<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# CMSV API Client&#10;&#10;A GUI application for interacting with CMSV (Commercial Vehicle Monitoring System) API. This application provides an easy-to-use interface for managing vehicle tracking devices, generating streaming links, and monitoring alarms.&#10;&#10;## Features&#10;&#10;- **User Authentication**: Login to CMSV system with account credentials&#10;- **Device Management**: View and manage connected tracking devices&#10;- **Vehicle Information**: Display detailed vehicle and company hierarchy information&#10;- **Real-time Alarms**: Monitor device alarms with auto-refresh capability&#10;- **Streaming Links Generation**: Generate RTSP, RTMP, and HLS streaming URLs&#10;- **Configurable Interface**: Customize UI elements visibility through configuration&#10;- **Multiple Coordinate Systems**: Support for WGS84, Google (GCJ-02), and Baidu (BD-09) coordinates&#10;&#10;## Configuration&#10;&#10;The application uses a `config.ini` file to manage settings. If the file doesn't exist, it will be created automatically with default values.&#10;&#10;### Server Configuration&#10;```ini&#10;# Server URL&#10;server_url = &quot;https://ahd.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;```&#10;&#10;### UI Elements Visibility (1 = show, 0 = hide)&#10;```ini&#10;show_login_button = 1&#10;show_save_button = 1&#10;show_vehicle_info_button = 1&#10;show_device_alarms_button = 1&#10;show_auto_refresh_button = 1&#10;show_rtsp_button = 1&#10;show_rtmp_button = 1&#10;show_hls_button = 1&#10;show_company_hierarchy = 0&#10;```&#10;&#10;## Installation&#10;&#10;### Prerequisites&#10;- Go 1.19 or later&#10;- Windows, macOS, or Linux&#10;&#10;### Building from Source&#10;1. Clone the repository or download the source code&#10;2. Navigate to the project directory&#10;3. Install dependencies:&#10;   ```bash&#10;   go mod tidy&#10;   ```&#10;4. Build the application:&#10;   ```bash&#10;   go build -o cmsv_api main.go&#10;   ```&#10;&#10;## Usage&#10;&#10;### Running the Application&#10;Execute the built binary:&#10;```bash&#10;./cmsv_api&#10;```&#10;&#10;### Basic Workflow&#10;1. **Login**: Enter your CMSV account credentials and click &quot;Login and Fetch Devices&quot;&#10;2. **Select Device**: Choose a device from the dropdown menu&#10;3. **Monitor Alarms**: Click &quot;GET DEVICE ALARMS&quot; to view current alarms&#10;4. **Generate Streaming Links**: Use RTSP, RTMP, or HLS buttons to generate streaming URLs&#10;5. **Save Data**: Use &quot;Save to File&quot; to export device information&#10;&#10;### Features Overview&#10;&#10;#### Device Management&#10;- Login with CMSV credentials&#10;- View all authorized devices&#10;- Real-time device status monitoring&#10;&#10;#### Vehicle Information&#10;- Display vehicle details including owner, engine number, frame number&#10;- Show company hierarchy (can be disabled in config)&#10;- Device installation information&#10;&#10;#### Alarm Monitoring&#10;- View device alarms with detailed information&#10;- Support for different coordinate systems&#10;- Auto-refresh functionality for real-time monitoring&#10;- Alarm logging to file&#10;&#10;#### Streaming Links&#10;- **RTSP**: Real-Time Streaming Protocol links for video players&#10;- **RTMP**: Real-Time Messaging Protocol for streaming servers&#10;- **HLS**: HTTP Live Streaming for web browsers&#10;- Configurable stream quality (main/sub stream)&#10;- Multiple channel support&#10;&#10;## API Documentation&#10;&#10;See `api_description.md` for detailed API endpoint documentation including:&#10;- User authentication endpoints&#10;- Device management APIs&#10;- Vehicle information retrieval&#10;- Alarm monitoring APIs&#10;- Error codes and troubleshooting&#10;&#10;## File Structure&#10;&#10;```&#10;cmsv_api/&#10;├── main.go              # Main application file&#10;├── config.ini           # Configuration file&#10;├── api_description.md   # API documentation&#10;├── README.md           # This file&#10;├── go.mod              # Go module file&#10;├── go.sum              # Go dependencies&#10;└── alarms.log          # Alarm log file (created automatically)&#10;```&#10;&#10;## Configuration Options&#10;&#10;### UI Customization&#10;You can hide/show interface elements by modifying the config.ini file:&#10;&#10;- `show_login_button = 0` - Hide the login button&#10;- `show_company_hierarchy = 0` - Hide company hierarchy in vehicle information&#10;- `show_rtsp_button = 0` - Hide RTSP link generation button&#10;&#10;### Server Configuration&#10;- Change `server_url` to point to your CMSV server&#10;- Modify port settings for different streaming protocols&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **SSL Certificate Errors**: The application automatically handles SSL certificate issues by falling back to insecure connections when necessary.&#10;&#10;2. **Login Failures**: Check your credentials and ensure the server URL is correct in config.ini.&#10;&#10;3. **No Devices Found**: Ensure your account has proper permissions to access devices.&#10;&#10;4. **Streaming Links Not Working**: Verify that the streaming ports are accessible and not blocked by firewalls.&#10;&#10;### Log Files&#10;- Application logs are displayed in the output area&#10;- Alarm data is automatically saved to `alarms.log`&#10;&#10;## Dependencies&#10;&#10;- [Fyne](https://fyne.io/) - Cross-platform GUI toolkit&#10;- Go standard library for HTTP requests and configuration parsing&#10;&#10;## License&#10;&#10;This project is for internal use with CMSV systems. Please ensure compliance with your organization's software usage policies.&#10;&#10;## Support&#10;&#10;For technical support or feature requests, please contact your system administrator or refer to the CMSV system documentation." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api_description.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api_description.md" />
              <option name="originalContent" value="# API Documentation&#10;&#10;## User Login&#10;&#10;### Interface Description&#10;User Login&#10;&#10;The credential obtained by this interface is used for subsequent access to the business interface.&#10;The validity period of the voucher is **4 hours**. The voucher can be reused during the validity period, and the validity time will be refreshed if the interface is continuously used. Do not refresh the voucher frequently.&#10;&#10;**NOTE:**&#10;The second login of the same account will not invalidate the jsession generated during the first login.&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_login.action?account=cmsv6&amp;password=cmsv6&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example | Description     |&#10;|---------------|---------------|------|---------|----------------|&#10;| account       | string        | Yes  | cmsv6   | User account   |&#10;| password      | string        | Yes  | cmsv6   | User password  |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| jsession       | string        | Session Number        |&#10;| pri            | string        | User Permissions      |&#10;| account_name   | string        | User Account          |&#10;| JSESSIONID     | string        | Session Number        |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;jsession&quot;: &quot;66d754dd7f41473dbd2&quot;,&#10;  &quot;pri&quot;: &quot;,1,2,21,24,25,26,27,28,29,210,211,212,213,214,241,242,215,216,217,676,282,283,284,285,218,219,220,221,222,223,224,225,226,23,227,228,229,230,231,232,233,234,22,235,236,257,258,259,260,237,238,671,672,239,240,243,244,245,248,261,262,264,263,265,266,267,268,272,3,31,32,33,34,35,36,37,38,39,40,41,310,311,318,319,320,321,4,41,42,43,44,5,6,7,611,612,613,621,622,623,624,625,626,627,628,629,630,631,641,651,652,653,654,655,656,657,658,659,660,661,663,664,997,998,7,121,122,123,124,125,126,127,128,129,950,681,607,608,615,616,617,290,291,292,293,294,295,296,297,298,299,130,650,677,831,888,682,683,684,685,686,1018,1019,1020,1100,305,690,1023,810,820,841,300,2000,2001,2002,2003,2004,286,287,288,289,275,276,277,16,161,162,163,165,166,274,800,15,151,152,153,154,155,156,157,158,159,160,270,271,273,278,279,281,1511,5- 1,5- 41,5- 42,5- 4,5- 11,5- 14,5- 5,5- 58,5- 39,5- 40,5- 15,5- 55,5- 56,5- 31,5- 19,5- 25,5- 6,5- 20,5- 21,5- 17,5- 22,5- 2,5- 3,5- 7,5- 12,5- 27,5- 28,5- 29,5- 49,5- 34,5- 36,5- 52,5- 46,5- 47,5- 50,5- 13,5- 16,5- 24,5- 26,5- 32,5- 33,5- 43,5- 44,5- 45,5- 48,5- 53,5- 9,5- 8,5- 10,5- 30,5- 37,5- 18,5- 23,5- 38,5- 51,5- 54,5- 57,5- 60,50,501,502,503,504,505,506,507,100,18,19,20,164,167,168,169,170,171,172,173,174,175,176,177,178,179,900,906,901,902,908,918,919,920,921,922,923,909,910,46,47,48,49,643,644,646,903,904,905,911,850,851,852,853,312,9,91,92,93,94,95,96,97,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,313,665,666,667,668,669,670,673,674,675,55,551,552,553,554,555,556,557,558,559,560,561,562,1017,60,601,602,603,604,605,606,609,610,619,632,633,634,635,636,637,638,642,640,6001,645,6002,6003,6004,614,618,620,889,639,2050,- 1,- 2,2005,1021,1022 ,&quot;,&#10;  &quot;account_name&quot;: &quot;cmsv6&quot;,&#10;  &quot;JSESSIONID&quot;: &quot;66d754dd7f41473dbd2&quot;&#10;}&#10;```&#10;&#10;## User Logoff&#10;&#10;### Interface Description&#10;User Logoff Login&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_logout.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Description     |&#10;|---------------|---------------|------|--------------------------|----------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number  |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Parameter meaning |&#10;|---------------|---------------|-------------------|&#10;| result        | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0&#10;}&#10;```&#10;&#10;## Get user vehicle information&#10;&#10;### Interface Description&#10;Get user vehicle information&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_queryUserVehicle.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| companys       | array         | List of companies/fleets |&#10;| id             | number        | Vehicle ID or company ID |&#10;| nm             | string        | License plate number or company name |&#10;| pId            | number        | Company or fleet ID |&#10;| vehicles       | array         | List of vehicles |&#10;| ic             | number        | Number of IO |&#10;| pid            | number        | Equipment company |&#10;| pnm            | string        | Company name |&#10;| abbr           | string        | Abbreviation |&#10;| dl             | array         | Device list |&#10;| ...            | ...           | Many more fields as described above |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;companys&quot;: [&#10;    { &quot;id&quot;: 3, &quot;nm&quot;: &quot;test11&quot;, &quot;pId&quot;: 1 },&#10;    { &quot;id&quot;: 4, &quot;nm&quot;: &quot;testce&quot;, &quot;pId&quot;: 3 },&#10;    { &quot;id&quot;: 1, &quot;nm&quot;: &quot;test&quot;, &quot;pId&quot;: 10 }&#10;  ],&#10;  &quot;vehicles&quot;: [&#10;    {&#10;      &quot;id&quot;: 28979,&#10;      &quot;nm&quot;: &quot;S66666&quot;,&#10;      &quot;ic&quot;: 6,&#10;      &quot;pid&quot;: 1,&#10;      &quot;pnm&quot;: &quot;test&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;dl&quot;: [&#10;        {&#10;          &quot;id&quot;: &quot;013300000001&quot;,&#10;          &quot;pid&quot;: 1,&#10;          &quot;dt&quot;: null,&#10;          &quot;cc&quot;: 4,&#10;          &quot;cn&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;          &quot;ic&quot;: 0,&#10;          &quot;io&quot;: &quot;&quot;,&#10;          &quot;outc&quot;: null,&#10;          &quot;outn&quot;: null,&#10;          &quot;tc&quot;: 0,&#10;          &quot;tn&quot;: &quot;&quot;,&#10;          &quot;sim&quot;: null,&#10;          &quot;md&quot;: 1513,&#10;          &quot;st&quot;: null,&#10;          &quot;nflt&quot;: null,&#10;          &quot;us&quot;: 0,&#10;          &quot;sdc&quot;: null,&#10;          &quot;did&quot;: 33,&#10;          &quot;vt&quot;: null,&#10;          &quot;isb&quot;: null,&#10;          &quot;srl&quot;: &quot;&quot;,&#10;          &quot;ptt&quot;: null,&#10;          &quot;gps&quot;: null,&#10;          &quot;fp&quot;: null,&#10;          &quot;tkc&quot;: null,&#10;          &quot;ist&quot;: &quot;2024-09-09 16:19:52&quot;,&#10;          &quot;ol&quot;: null,&#10;          &quot;lt&quot;: null&#10;        }&#10;      ],&#10;      &quot;pt&quot;: &quot;黄牌&quot;,&#10;      &quot;vehiColor&quot;: null,&#10;      &quot;status&quot;: 0,&#10;      &quot;vehiBand&quot;: &quot;&quot;,&#10;      &quot;vehiType&quot;: null,&#10;      &quot;vehiUse&quot;: &quot;&quot;,&#10;      &quot;dateProduct&quot;: -28800000,&#10;      &quot;icon&quot;: 6,&#10;      &quot;chnCount&quot;: 4,&#10;      &quot;chnName&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;      &quot;ioInCount&quot;: 0,&#10;      &quot;ioInName&quot;: &quot;&quot;,&#10;      &quot;ioOutCount&quot;: 0,&#10;      &quot;ioOutName&quot;: &quot;&quot;,&#10;      &quot;tempCount&quot;: 1,&#10;      &quot;tempName&quot;: &quot;0|TEMP_1&quot;,&#10;      &quot;payEnable&quot;: null,&#10;      &quot;payBegin&quot;: 1725811200000,&#10;      &quot;payEnd&quot;: null,&#10;      &quot;payMonth&quot;: null,&#10;      &quot;payDelayDay&quot;: 0,&#10;      &quot;safeDate&quot;: null,&#10;      &quot;drivingNum&quot;: &quot;&quot;,&#10;      &quot;drivingDate&quot;: -28800000,&#10;      &quot;operatingNum&quot;: &quot;&quot;,&#10;      &quot;operatingDate&quot;: -28800000,&#10;      &quot;repairDate&quot;: null,&#10;      &quot;stlTm&quot;: 1725811200000,&#10;      &quot;moreId&quot;: null,&#10;      &quot;vehicleGrade&quot;: &quot;&quot;,&#10;      &quot;approvedNumber&quot;: null,&#10;      &quot;approvedLoad&quot;: null,&#10;      &quot;vehicleType&quot;: 0,&#10;      &quot;installTire&quot;: 0,&#10;      &quot;tireBrand&quot;: &quot;&quot;,&#10;      &quot;tireModel&quot;: &quot;&quot;,&#10;      &quot;installAdas&quot;: 0,&#10;      &quot;adasBrand&quot;: &quot;&quot;,&#10;      &quot;adasModel&quot;: &quot;&quot;,&#10;      &quot;installDsm&quot;: 0,&#10;      &quot;dsmBrand&quot;: &quot;&quot;,&#10;      &quot;dsmModel&quot;: &quot;&quot;,&#10;      &quot;installBlind&quot;: 0,&#10;      &quot;blindBrand&quot;: &quot;&quot;,&#10;      &quot;blindModel&quot;: &quot;&quot;,&#10;      &quot;installLca&quot;: 0,&#10;      &quot;lcaBrand&quot;: &quot;&quot;,&#10;      &quot;lcaModel&quot;: &quot;&quot;,&#10;      &quot;installOM&quot;: 0,&#10;      &quot;engineNum&quot;: &quot;&quot;,&#10;      &quot;frameNum&quot;: &quot;&quot;,&#10;      &quot;ownerName&quot;: null,&#10;      &quot;lineId&quot;: null,&#10;      &quot;linkPeople&quot;: &quot;&quot;,&#10;      &quot;linkPhone&quot;: &quot;&quot;,&#10;      &quot;datePurchase&quot;: -28800000,&#10;      &quot;dateAnnualSurvey&quot;: -28800000,&#10;      &quot;speedLimit&quot;: 120,&#10;      &quot;linesOperation&quot;: &quot;&quot;,&#10;      &quot;operatingId&quot;: null,&#10;      &quot;industry&quot;: null,&#10;      &quot;carType&quot;: null,&#10;      &quot;carPlace&quot;: null,&#10;      &quot;param1&quot;: &quot;&quot;,&#10;      &quot;param2&quot;: &quot;&quot;,&#10;      &quot;param3&quot;: &quot;&quot;,&#10;      &quot;param4&quot;: &quot;&quot;,&#10;      &quot;roleId&quot;: null,&#10;      &quot;area&quot;: &quot;&quot;,&#10;      &quot;code&quot;: &quot;&quot;,&#10;      &quot;nuclearAuthority&quot;: &quot;&quot;,&#10;      &quot;legal&quot;: &quot;&quot;,&#10;      &quot;legalPhone&quot;: &quot;&quot;,&#10;      &quot;legalAddress&quot;: &quot;&quot;,&#10;      &quot;introduction&quot;: &quot;&quot;,&#10;      &quot;serialNum&quot;: null,&#10;      &quot;loginPwd&quot;: null,&#10;      &quot;allowLogin&quot;: 0,&#10;      &quot;mileCoefficient&quot;: null,&#10;      &quot;remark&quot;: &quot;&quot;,&#10;      &quot;vehicleModel&quot;: &quot;&quot;,&#10;      &quot;engineModel&quot;: &quot;&quot;,&#10;      &quot;axesNumber&quot;: null,&#10;      &quot;totalWeight&quot;: null,&#10;      &quot;quasiTractionMass&quot;: null,&#10;      &quot;longOutlineDimensions&quot;: null,&#10;      &quot;wideOutlineDimensions&quot;: null,&#10;      &quot;highOutlineDimensions&quot;: null,&#10;      &quot;longInsideDimension&quot;: null,&#10;      &quot;wideInnerDimensions&quot;: null,&#10;      &quot;highInsideDimensions&quot;: null,&#10;      &quot;ombrand&quot;: &quot;&quot;,&#10;      &quot;ommodel&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Get Device Online Status&#10;&#10;### Interface Description&#10;Get device online status&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_getDeviceOlStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&amp;status=1&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;| devIdno       | string        | No   | 01330000001              | Device number (can be multiple, comma-separated). If empty, license plate number is used |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (can be multiple, comma-separated). If both are empty, query all authorized equipment |&#10;| status        | number        | No   | 1                        | Online status: 0=offline, 1=online, empty=query all |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| onlines        | array         | Online status information |&#10;| did            | string        | Equipment number |&#10;| vid            | string        | License plate number (empty if queried by equipment number) |&#10;| online         | number        | Online status: 1=online, otherwise offline |&#10;&#10;### Return Example&#10;```json&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;onlines&quot;: [&#10;    {&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;online&quot;: 1,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;did&quot;: &quot;013300000001&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Get Real-time Device Status&#10;&#10;### Interface Description&#10;Get real-time device status&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_getDeviceStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;| devIdno       | string        | No   | 01330000001,01330000002  | Equipment number (can be multiple, comma-separated). If empty, use license plate number |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (can be multiple, comma-separated). If both are empty, query all authorized devices |&#10;| geoaddress    | number        | No   | 0                        | Whether to resolve geographic location: 1=provide geo resolution service, 0=no resolution |&#10;| driver        | number        | No   | 1                        | Whether to query driver information: 1=query, other=no query |&#10;| toMap         | number        | No   | 0                        | Map coordinate conversion: 0=WGS84 (default), 1=Google (gj02), 2=Baidu (bd09) |&#10;| language      | string        | No   | en                       | Language for longitude/latitude analysis: zh=Chinese, en=English |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Description |&#10;|---------------|---------------|-------------|&#10;| id            | string        | Device number |&#10;| vid           | string        | License plate |&#10;| lng           | number        | Longitude (0 if invalid location). Example: 113231258 = 113.231258 |&#10;| lat           | number        | Latitude (0 if invalid location). Example: 39231258 = 39.231258 |&#10;| ft            | number        | Manufacturer type |&#10;| sp            | number        | Speed (km/h, divide by 10 in use) |&#10;| ol            | number        | Online status: 1=online, otherwise offline |&#10;| gt            | string        | Location upload time |&#10;| pt            | number        | Communication protocol type |&#10;| dt            | number        | Hard disk type: 1=SD card, 2=hard disk, 3=SSD card |&#10;| ac            | number        | Audio type |&#10;| net           | number        | Network type: 0=3G, 1=WIFI, 2=wired, 3=4G, 4=5G |&#10;| gw            | string        | Gateway Server Number |&#10;| s1            | number        | Status 1 (see Device Status Description) |&#10;| s2            | number        | Status 2 (see Device Status Description) |&#10;| s3            | number        | Status 3 (see Device Status Description) |&#10;| s4            | number        | Status 4 (see Device Status Description) |&#10;| t1-t4         | number        | Temperature sensors 1-4 |&#10;| hx            | number        | Direction (0° north, increases clockwise, max 360°) |&#10;| mlng          | string        | Converted longitude of map |&#10;| mlat          | string        | Converted latitude of map |&#10;| pk            | number        | Parking duration (seconds) |&#10;| lc            | number        | Mileage (meters) |&#10;| yl            | number        | Oil quantity (liters, divide by 100 in use) |&#10;| viceYl        | number        | Secondary oil quantity (liters, divide by 100 in use) |&#10;| ps            | string        | Resolved geographic location or (converted longitude, converted latitude) |&#10;| tsp           | number        | Tachograph speed (km/h, divide by 10 in use) |&#10;| dn            | string        | Driver name |&#10;| jn            | string        | Driver certificate code |&#10;| lt            | number        | Login type: 0=linux, 1=windows, 2=web, 3=Android, 4=iOS |&#10;| ust           | number        | Usage status: 0=normal, 1=maintenance, 2=disabled, 3=overdue |&#10;| sn            | number        | Number of satellites |&#10;| lg            | number        | Location type (2 indicates long positioning, refer to 808-2019 protocol) |&#10;&#10;### Return Example&#10;```json&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;status&quot;: [&#10;    {&#10;      &quot;id&quot;: &quot;013300000001&quot;,&#10;      &quot;net&quot;: 3,&#10;      &quot;gw&quot;: &quot;G1&quot;,&#10;      &quot;ol&quot;: 1,&#10;      &quot;s1&quot;: 805309827,&#10;      &quot;s2&quot;: 20480,&#10;      &quot;s3&quot;: 65280,&#10;      &quot;s4&quot;: 0,&#10;      &quot;t1&quot;: 0,&#10;      &quot;t2&quot;: 0,&#10;      &quot;t3&quot;: 0,&#10;      &quot;t4&quot;: 0,&#10;      &quot;yl&quot;: 0,&#10;      &quot;sp&quot;: 0,&#10;      &quot;hx&quot;: 0,&#10;      &quot;lng&quot;: 113712944,&#10;      &quot;lat&quot;: 23004510,&#10;      &quot;mlng&quot;: &quot;113.718131&quot;,&#10;      &quot;mlat&quot;: &quot;23.001755&quot;,&#10;      &quot;ps&quot;: &quot;23.004510,113.712944&quot;,&#10;      &quot;pk&quot;: 0,&#10;      &quot;lc&quot;: 0,&#10;      &quot;gt&quot;: &quot;2024-12-07 11:58:30.0&quot;,&#10;      &quot;pt&quot;: 6,&#10;      &quot;dt&quot;: 2,&#10;      &quot;ac&quot;: 0,&#10;      &quot;ft&quot;: 0,&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Map Example&#10;&#10;### URL&#10;```&#10;https://v7.cmsv8.com/808gps/open/map/vehicleMap.html?jsession=66d754dd7f41473dbd2&amp;devIdno=013300000001&amp;lang=en&#10;```&#10;&#10;### Parameter Description&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | No   | 66d754dd7f41473dbd2      | Session number (if blank, use username and password) |&#10;| devIdno       | string        | No   | 0133000000001            | Equipment number (if empty, use license plate number) |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (if device number is empty) |&#10;| lang          | string        | No   | en                       | Language: en=English, otherwise Chinese |&#10;&#10;## Common Error Codes&#10;&#10;### 1. Web Error Code Description&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 1          | The username or password is invalid |&#10;| 2          | The username or password is invalid |&#10;| 3          | User disabled |&#10;| 4          | The user has expired |&#10;| 5          | Session does not exist |&#10;| 6          | System exception |&#10;| 7          | The request parameters are incorrect |&#10;| 8          | No permission to operate the vehicle or equipment |&#10;| 9          | The start time must not be greater than the end time |&#10;| 10         | Query time out of range |&#10;| 11         | The video download task already exists |&#10;| 12         | Account already exists |&#10;| 13         | No permission to operate |&#10;| 14         | Number of managed devices (maximum number of additions reached) |&#10;| 15         | Device already exists |&#10;| 16         | Vehicle already exists |&#10;| 17         | Device already in use |&#10;| 18         | Vehicle not present |&#10;| 19         | Device does not exist |&#10;| 20         | The device does not belong to the current company |&#10;| 21         | The number of registered devices does not match |&#10;| 24         | Network connection exception |&#10;| 25         | Rule name already exists |&#10;| 26         | Rule does not exist |&#10;| 27         | Information does not exist |&#10;| 28         | Session number already exists |&#10;| 29         | Company does not exist |&#10;| 32         | Device not online |&#10;| 34         | Single sign-on user, already logged in |&#10;&#10;### 2. Server Error Code Description (return parameters include: &quot;cmsserver&quot;:1)&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 2          | The username or password is invalid |&#10;| 3          | Invalid username or password |&#10;| 4          | User disabled |&#10;| 5          | Information does not exist |&#10;| 6          | Unknown error |&#10;| 7          | Name already in use |&#10;| 21         | Device does not exist |&#10;| 22         | No feedback received from the device |&#10;| 23         | Device not online |&#10;| 26         | Device connection lost |&#10;| 27         | No storage path defined |&#10;" />
              <option name="updatedContent" value="# API Documentation&#10;&#10;## User Login&#10;&#10;### Interface Description&#10;User Login&#10;&#10;The credential obtained by this interface is used for subsequent access to the business interface.&#10;The validity period of the voucher is **4 hours**. The voucher can be reused during the validity period, and the validity time will be refreshed if the interface is continuously used. Do not refresh the voucher frequently.&#10;&#10;**NOTE:**&#10;The second login of the same account will not invalidate the jsession generated during the first login.&#10;&#10;### Request Example&#10;```&#10;https://ahd.samsonix.com/StandardApiAction_login.action?account=cmsv6&amp;password=cmsv6&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example | Description     |&#10;|---------------|---------------|------|---------|----------------|&#10;| account       | string        | Yes  | cmsv6   | User account   |&#10;| password      | string        | Yes  | cmsv6   | User password  |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| jsession       | string        | Session Number        |&#10;| pri            | string        | User Permissions      |&#10;| account_name   | string        | User Account          |&#10;| JSESSIONID     | string        | Session Number        |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;jsession&quot;: &quot;66d754dd7f41473dbd2&quot;,&#10;  &quot;pri&quot;: &quot;,1,2,21,24,25,26,27,28,29,210,211,212,213,214,241,242,215,216,217,676,282,283,284,285,218,219,220,221,222,223,224,225,226,23,227,228,229,230,231,232,233,234,22,235,236,257,258,259,260,237,238,671,672,239,240,243,244,245,248,261,262,264,263,265,266,267,268,272,3,31,32,33,34,35,36,37,38,39,40,41,310,311,318,319,320,321,4,41,42,43,44,5,6,7,611,612,613,621,622,623,624,625,626,627,628,629,630,631,641,651,652,653,654,655,656,657,658,659,660,661,663,664,997,998,7,121,122,123,124,125,126,127,128,129,950,681,607,608,615,616,617,290,291,292,293,294,295,296,297,298,299,130,650,677,831,888,682,683,684,685,686,1018,1019,1020,1100,305,690,1023,810,820,841,300,2000,2001,2002,2003,2004,286,287,288,289,275,276,277,16,161,162,163,165,166,274,800,15,151,152,153,154,155,156,157,158,159,160,270,271,273,278,279,281,1511,5- 1,5- 41,5- 42,5- 4,5- 11,5- 14,5- 5,5- 58,5- 39,5- 40,5- 15,5- 55,5- 56,5- 31,5- 19,5- 25,5- 6,5- 20,5- 21,5- 17,5- 22,5- 2,5- 3,5- 7,5- 12,5- 27,5- 28,5- 29,5- 49,5- 34,5- 36,5- 52,5- 46,5- 47,5- 50,5- 13,5- 16,5- 24,5- 26,5- 32,5- 33,5- 43,5- 44,5- 45,5- 48,5- 53,5- 9,5- 8,5- 10,5- 30,5- 37,5- 18,5- 23,5- 38,5- 51,5- 54,5- 57,5- 60,50,501,502,503,504,505,506,507,100,18,19,20,164,167,168,169,170,171,172,173,174,175,176,177,178,179,900,906,901,902,908,918,919,920,921,922,923,909,910,46,47,48,49,643,644,646,903,904,905,911,850,851,852,853,312,9,91,92,93,94,95,96,97,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,313,665,666,667,668,669,670,673,674,675,55,551,552,553,554,555,556,557,558,559,560,561,562,1017,60,601,602,603,604,605,606,609,610,619,632,633,634,635,636,637,638,642,640,6001,645,6002,6003,6004,614,618,620,889,639,2050,- 1,- 2,2005,1021,1022 ,&quot;,&#10;  &quot;account_name&quot;: &quot;cmsv6&quot;,&#10;  &quot;JSESSIONID&quot;: &quot;66d754dd7f41473dbd2&quot;&#10;}&#10;```&#10;&#10;## User Logoff&#10;&#10;### Interface Description&#10;User Logoff Login&#10;&#10;### Request Example&#10;```&#10;https://ahd.samsonix.com/StandardApiAction_logout.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Description     |&#10;|---------------|---------------|------|--------------------------|----------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number  |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Parameter meaning |&#10;|---------------|---------------|-------------------|&#10;| result        | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0&#10;}&#10;```&#10;&#10;## Get user vehicle information&#10;&#10;### Interface Description&#10;Get user vehicle information&#10;&#10;### Request Example&#10;```&#10;https://ahd.samsonix.com/StandardApiAction_queryUserVehicle.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| companys       | array         | List of companies/fleets |&#10;| id             | number        | Vehicle ID or company ID |&#10;| nm             | string        | License plate number or company name |&#10;| pId            | number        | Company or fleet ID |&#10;| vehicles       | array         | List of vehicles |&#10;| ic             | number        | Number of IO |&#10;| pid            | number        | Equipment company |&#10;| pnm            | string        | Company name |&#10;| abbr           | string        | Abbreviation |&#10;| dl             | array         | Device list |&#10;| ...            | ...           | Many more fields as described above |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;companys&quot;: [&#10;    { &quot;id&quot;: 3, &quot;nm&quot;: &quot;test11&quot;, &quot;pId&quot;: 1 },&#10;    { &quot;id&quot;: 4, &quot;nm&quot;: &quot;testce&quot;, &quot;pId&quot;: 3 },&#10;    { &quot;id&quot;: 1, &quot;nm&quot;: &quot;test&quot;, &quot;pId&quot;: 10 }&#10;  ],&#10;  &quot;vehicles&quot;: [&#10;    {&#10;      &quot;id&quot;: 28979,&#10;      &quot;nm&quot;: &quot;S66666&quot;,&#10;      &quot;ic&quot;: 6,&#10;      &quot;pid&quot;: 1,&#10;      &quot;pnm&quot;: &quot;test&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;dl&quot;: [&#10;        {&#10;          &quot;id&quot;: &quot;013300000001&quot;,&#10;          &quot;pid&quot;: 1,&#10;          &quot;dt&quot;: null,&#10;          &quot;cc&quot;: 4,&#10;          &quot;cn&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;          &quot;ic&quot;: 0,&#10;          &quot;io&quot;: &quot;&quot;,&#10;          &quot;outc&quot;: null,&#10;          &quot;outn&quot;: null,&#10;          &quot;tc&quot;: 0,&#10;          &quot;tn&quot;: &quot;&quot;,&#10;          &quot;sim&quot;: null,&#10;          &quot;md&quot;: 1513,&#10;          &quot;st&quot;: null,&#10;          &quot;nflt&quot;: null,&#10;          &quot;us&quot;: 0,&#10;          &quot;sdc&quot;: null,&#10;          &quot;did&quot;: 33,&#10;          &quot;vt&quot;: null,&#10;          &quot;isb&quot;: null,&#10;          &quot;srl&quot;: &quot;&quot;,&#10;          &quot;ptt&quot;: null,&#10;          &quot;gps&quot;: null,&#10;          &quot;fp&quot;: null,&#10;          &quot;tkc&quot;: null,&#10;          &quot;ist&quot;: &quot;2024-09-09 16:19:52&quot;,&#10;          &quot;ol&quot;: null,&#10;          &quot;lt&quot;: null&#10;        }&#10;      ],&#10;      &quot;pt&quot;: &quot;黄牌&quot;,&#10;      &quot;vehiColor&quot;: null,&#10;      &quot;status&quot;: 0,&#10;      &quot;vehiBand&quot;: &quot;&quot;,&#10;      &quot;vehiType&quot;: null,&#10;      &quot;vehiUse&quot;: &quot;&quot;,&#10;      &quot;dateProduct&quot;: -28800000,&#10;      &quot;icon&quot;: 6,&#10;      &quot;chnCount&quot;: 4,&#10;      &quot;chnName&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;      &quot;ioInCount&quot;: 0,&#10;      &quot;ioInName&quot;: &quot;&quot;,&#10;      &quot;ioOutCount&quot;: 0,&#10;      &quot;ioOutName&quot;: &quot;&quot;,&#10;      &quot;tempCount&quot;: 1,&#10;      &quot;tempName&quot;: &quot;0|TEMP_1&quot;,&#10;      &quot;payEnable&quot;: null,&#10;      &quot;payBegin&quot;: 1725811200000,&#10;      &quot;payEnd&quot;: null,&#10;      &quot;payMonth&quot;: null,&#10;      &quot;payDelayDay&quot;: 0,&#10;      &quot;safeDate&quot;: null,&#10;      &quot;drivingNum&quot;: &quot;&quot;,&#10;      &quot;drivingDate&quot;: -28800000,&#10;      &quot;operatingNum&quot;: &quot;&quot;,&#10;      &quot;operatingDate&quot;: -28800000,&#10;      &quot;repairDate&quot;: null,&#10;      &quot;stlTm&quot;: 1725811200000,&#10;      &quot;moreId&quot;: null,&#10;      &quot;vehicleGrade&quot;: &quot;&quot;,&#10;      &quot;approvedNumber&quot;: null,&#10;      &quot;approvedLoad&quot;: null,&#10;      &quot;vehicleType&quot;: 0,&#10;      &quot;installTire&quot;: 0,&#10;      &quot;tireBrand&quot;: &quot;&quot;,&#10;      &quot;tireModel&quot;: &quot;&quot;,&#10;      &quot;installAdas&quot;: 0,&#10;      &quot;adasBrand&quot;: &quot;&quot;,&#10;      &quot;adasModel&quot;: &quot;&quot;,&#10;      &quot;installDsm&quot;: 0,&#10;      &quot;dsmBrand&quot;: &quot;&quot;,&#10;      &quot;dsmModel&quot;: &quot;&quot;,&#10;      &quot;installBlind&quot;: 0,&#10;      &quot;blindBrand&quot;: &quot;&quot;,&#10;      &quot;blindModel&quot;: &quot;&quot;,&#10;      &quot;installLca&quot;: 0,&#10;      &quot;lcaBrand&quot;: &quot;&quot;,&#10;      &quot;lcaModel&quot;: &quot;&quot;,&#10;      &quot;installOM&quot;: 0,&#10;      &quot;engineNum&quot;: &quot;&quot;,&#10;      &quot;frameNum&quot;: &quot;&quot;,&#10;      &quot;ownerName&quot;: null,&#10;      &quot;lineId&quot;: null,&#10;      &quot;linkPeople&quot;: &quot;&quot;,&#10;      &quot;linkPhone&quot;: &quot;&quot;,&#10;      &quot;datePurchase&quot;: -28800000,&#10;      &quot;dateAnnualSurvey&quot;: -28800000,&#10;      &quot;speedLimit&quot;: 120,&#10;      &quot;linesOperation&quot;: &quot;&quot;,&#10;      &quot;operatingId&quot;: null,&#10;      &quot;industry&quot;: null,&#10;      &quot;carType&quot;: null,&#10;      &quot;carPlace&quot;: null,&#10;      &quot;param1&quot;: &quot;&quot;,&#10;      &quot;param2&quot;: &quot;&quot;,&#10;      &quot;param3&quot;: &quot;&quot;,&#10;      &quot;param4&quot;: &quot;&quot;,&#10;      &quot;roleId&quot;: null,&#10;      &quot;area&quot;: &quot;&quot;,&#10;      &quot;code&quot;: &quot;&quot;,&#10;      &quot;nuclearAuthority&quot;: &quot;&quot;,&#10;      &quot;legal&quot;: &quot;&quot;,&#10;      &quot;legalPhone&quot;: &quot;&quot;,&#10;      &quot;legalAddress&quot;: &quot;&quot;,&#10;      &quot;introduction&quot;: &quot;&quot;,&#10;      &quot;serialNum&quot;: null,&#10;      &quot;loginPwd&quot;: null,&#10;      &quot;allowLogin&quot;: 0,&#10;      &quot;mileCoefficient&quot;: null,&#10;      &quot;remark&quot;: &quot;&quot;,&#10;      &quot;vehicleModel&quot;: &quot;&quot;,&#10;      &quot;engineModel&quot;: &quot;&quot;,&#10;      &quot;axesNumber&quot;: null,&#10;      &quot;totalWeight&quot;: null,&#10;      &quot;quasiTractionMass&quot;: null,&#10;      &quot;longOutlineDimensions&quot;: null,&#10;      &quot;wideOutlineDimensions&quot;: null,&#10;      &quot;highOutlineDimensions&quot;: null,&#10;      &quot;longInsideDimension&quot;: null,&#10;      &quot;wideInnerDimensions&quot;: null,&#10;      &quot;highInsideDimensions&quot;: null,&#10;      &quot;ombrand&quot;: &quot;&quot;,&#10;      &quot;ommodel&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Get Device Online Status&#10;&#10;### Interface Description&#10;Get device online status&#10;&#10;### Request Example&#10;```&#10;https://ahd.samsonix.com/StandardApiAction_getDeviceOlStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&amp;status=1&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;| devIdno       | string        | No   | 01330000001              | Device number (can be multiple, comma-separated). If empty, license plate number is used |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (can be multiple, comma-separated). If both are empty, query all authorized equipment |&#10;| status        | number        | No   | 1                        | Online status: 0=offline, 1=online, empty=query all |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| onlines        | array         | Online status information |&#10;| did            | string        | Equipment number |&#10;| vid            | string        | License plate number (empty if queried by equipment number) |&#10;| online         | number        | Online status: 1=online, otherwise offline |&#10;&#10;### Return Example&#10;```json&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;onlines&quot;: [&#10;    {&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;online&quot;: 1,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;did&quot;: &quot;013300000001&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Get Real-time Device Status&#10;&#10;### Interface Description&#10;Get real-time device status&#10;&#10;### Request Example&#10;```&#10;https://ahd.samsonix.com/StandardApiAction_getDeviceStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;| devIdno       | string        | No   | 01330000001,01330000002  | Equipment number (can be multiple, comma-separated). If empty, use license plate number |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (can be multiple, comma-separated). If both are empty, query all authorized devices |&#10;| geoaddress    | number        | No   | 0                        | Whether to resolve geographic location: 1=provide geo resolution service, 0=no resolution |&#10;| driver        | number        | No   | 1                        | Whether to query driver information: 1=query, other=no query |&#10;| toMap         | number        | No   | 0                        | Map coordinate conversion: 0=WGS84 (default), 1=Google (gj02), 2=Baidu (bd09) |&#10;| language      | string        | No   | en                       | Language for longitude/latitude analysis: zh=Chinese, en=English |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Description |&#10;|---------------|---------------|-------------|&#10;| id            | string        | Device number |&#10;| vid           | string        | License plate |&#10;| lng           | number        | Longitude (0 if invalid location). Example: 113231258 = 113.231258 |&#10;| lat           | number        | Latitude (0 if invalid location). Example: 39231258 = 39.231258 |&#10;| ft            | number        | Manufacturer type |&#10;| sp            | number        | Speed (km/h, divide by 10 in use) |&#10;| ol            | number        | Online status: 1=online, otherwise offline |&#10;| gt            | string        | Location upload time |&#10;| pt            | number        | Communication protocol type |&#10;| dt            | number        | Hard disk type: 1=SD card, 2=hard disk, 3=SSD card |&#10;| ac            | number        | Audio type |&#10;| net           | number        | Network type: 0=3G, 1=WIFI, 2=wired, 3=4G, 4=5G |&#10;| gw            | string        | Gateway Server Number |&#10;| s1            | number        | Status 1 (see Device Status Description) |&#10;| s2            | number        | Status 2 (see Device Status Description) |&#10;| s3            | number        | Status 3 (see Device Status Description) |&#10;| s4            | number        | Status 4 (see Device Status Description) |&#10;| t1-t4         | number        | Temperature sensors 1-4 |&#10;| hx            | number        | Direction (0° north, increases clockwise, max 360°) |&#10;| mlng          | string        | Converted longitude of map |&#10;| mlat          | string        | Converted latitude of map |&#10;| pk            | number        | Parking duration (seconds) |&#10;| lc            | number        | Mileage (meters) |&#10;| yl            | number        | Oil quantity (liters, divide by 100 in use) |&#10;| viceYl        | number        | Secondary oil quantity (liters, divide by 100 in use) |&#10;| ps            | string        | Resolved geographic location or (converted longitude, converted latitude) |&#10;| tsp           | number        | Tachograph speed (km/h, divide by 10 in use) |&#10;| dn            | string        | Driver name |&#10;| jn            | string        | Driver certificate code |&#10;| lt            | number        | Login type: 0=linux, 1=windows, 2=web, 3=Android, 4=iOS |&#10;| ust           | number        | Usage status: 0=normal, 1=maintenance, 2=disabled, 3=overdue |&#10;| sn            | number        | Number of satellites |&#10;| lg            | number        | Location type (2 indicates long positioning, refer to 808-2019 protocol) |&#10;&#10;### Return Example&#10;```json&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;status&quot;: [&#10;    {&#10;      &quot;id&quot;: &quot;013300000001&quot;,&#10;      &quot;net&quot;: 3,&#10;      &quot;gw&quot;: &quot;G1&quot;,&#10;      &quot;ol&quot;: 1,&#10;      &quot;s1&quot;: 805309827,&#10;      &quot;s2&quot;: 20480,&#10;      &quot;s3&quot;: 65280,&#10;      &quot;s4&quot;: 0,&#10;      &quot;t1&quot;: 0,&#10;      &quot;t2&quot;: 0,&#10;      &quot;t3&quot;: 0,&#10;      &quot;t4&quot;: 0,&#10;      &quot;yl&quot;: 0,&#10;      &quot;sp&quot;: 0,&#10;      &quot;hx&quot;: 0,&#10;      &quot;lng&quot;: 113712944,&#10;      &quot;lat&quot;: 23004510,&#10;      &quot;mlng&quot;: &quot;113.718131&quot;,&#10;      &quot;mlat&quot;: &quot;23.001755&quot;,&#10;      &quot;ps&quot;: &quot;23.004510,113.712944&quot;,&#10;      &quot;pk&quot;: 0,&#10;      &quot;lc&quot;: 0,&#10;      &quot;gt&quot;: &quot;2024-12-07 11:58:30.0&quot;,&#10;      &quot;pt&quot;: 6,&#10;      &quot;dt&quot;: 2,&#10;      &quot;ac&quot;: 0,&#10;      &quot;ft&quot;: 0,&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Map Example&#10;&#10;### URL&#10;```&#10;https://ahd.samsonix.com/808gps/open/map/vehicleMap.html?jsession=66d754dd7f41473dbd2&amp;devIdno=013300000001&amp;lang=en&#10;```&#10;&#10;### Parameter Description&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | No   | 66d754dd7f41473dbd2      | Session number (if blank, use username and password) |&#10;| devIdno       | string        | No   | 0133000000001            | Equipment number (if empty, use license plate number) |&#10;| vehiIdno      | string        | No   | S66666                   | License plate number (if device number is empty) |&#10;| lang          | string        | No   | en                       | Language: en=English, otherwise Chinese |&#10;&#10;## Common Error Codes&#10;&#10;### 1. Web Error Code Description&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 1          | The username or password is invalid |&#10;| 2          | The username or password is invalid |&#10;| 3          | User disabled |&#10;| 4          | The user has expired |&#10;| 5          | Session does not exist |&#10;| 6          | System exception |&#10;| 7          | The request parameters are incorrect |&#10;| 8          | No permission to operate the vehicle or equipment |&#10;| 9          | The start time must not be greater than the end time |&#10;| 10         | Query time out of range |&#10;| 11         | The video download task already exists |&#10;| 12         | Account already exists |&#10;| 13         | No permission to operate |&#10;| 14         | Number of managed devices (maximum number of additions reached) |&#10;| 15         | Device already exists |&#10;| 16         | Vehicle already exists |&#10;| 17         | Device already in use |&#10;| 18         | Vehicle not present |&#10;| 19         | Device does not exist |&#10;| 20         | The device does not belong to the current company |&#10;| 21         | The number of registered devices does not match |&#10;| 24         | Network connection exception |&#10;| 25         | Rule name already exists |&#10;| 26         | Rule does not exist |&#10;| 27         | Information does not exist |&#10;| 28         | Session number already exists |&#10;| 29         | Company does not exist |&#10;| 32         | Device not online |&#10;| 34         | Single sign-on user, already logged in |&#10;&#10;### 2. Server Error Code Description (return parameters include: &quot;cmsserver&quot;:1)&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 2          | The username or password is invalid |&#10;| 3          | Invalid username or password |&#10;| 4          | User disabled |&#10;| 5          | Information does not exist |&#10;| 6          | Unknown error |&#10;| 7          | Name already in use |&#10;| 21         | Device does not exist |&#10;| 22         | No feedback received from the device |&#10;| 23         | Device not online |&#10;| 26         | Device connection lost |&#10;| 27         | No storage path defined |&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config.ini">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config.ini" />
              <option name="originalContent" value="# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://ahd.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;" />
              <option name="updatedContent" value="# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://ahd.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# UI Elements Visibility (1 = show, 0 = hide)&#10;show_login_button = 1&#10;show_save_button = 1&#10;show_vehicle_info_button = 1&#10;show_device_alarms_button = 1&#10;show_auto_refresh_button = 1&#10;show_rtsp_button = 1&#10;show_rtmp_button = 1&#10;show_hls_button = 1&#10;show_company_hierarchy = 0&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.go" />
              <option name="originalContent" value="package main&#10;&#10;import (&#10;&#9;&quot;bufio&quot;&#10;&#9;&quot;crypto/tls&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;fyne.io/fyne/v2&quot;&#10;&#9;&quot;fyne.io/fyne/v2/app&quot;&#10;&#9;&quot;fyne.io/fyne/v2/container&quot;&#10;&#9;&quot;fyne.io/fyne/v2/dialog&quot;&#10;&#9;&quot;fyne.io/fyne/v2/theme&quot;&#10;&#9;&quot;fyne.io/fyne/v2/widget&quot;&#10;&#9;&quot;io&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;strconv&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;// AppConfig holds all configuration values&#10;type AppConfig struct {&#10;&#9;ServerURL string&#10;&#9;APIPort   int&#10;&#9;RTMPPort  int&#10;&#9;RTSPPort  int&#10;&#9;HLSPort   int&#10;&#10;&#9;// UI Elements Visibility&#10;&#9;ShowLoginButton        bool&#10;&#9;ShowSaveButton         bool&#10;&#9;ShowVehicleInfoButton  bool&#10;&#9;ShowDeviceAlarmsButton bool&#10;&#9;ShowAutoRefreshButton  bool&#10;&#9;ShowRTSPButton         bool&#10;&#9;ShowRTMPButton         bool&#10;&#9;ShowHLSButton          bool&#10;&#9;ShowCompanyHierarchy   bool&#10;}&#10;&#10;// Global config variable&#10;var config AppConfig&#10;&#10;// loadConfig reads the configuration from config.ini file&#10;func loadConfig() error {&#10;&#9;// Set default values&#10;&#9;config = AppConfig{&#10;&#9;&#9;ServerURL: &quot;https://ahd.samsonix.com&quot;,&#10;&#9;&#9;APIPort:   443,&#10;&#9;&#9;RTMPPort:  1935,&#10;&#9;&#9;RTSPPort:  6604,&#10;&#9;&#9;HLSPort:   16604,&#10;&#10;&#9;&#9;// Default UI visibility settings&#10;&#9;&#9;ShowLoginButton:        true,&#10;&#9;&#9;ShowSaveButton:         true,&#10;&#9;&#9;ShowVehicleInfoButton:  true,&#10;&#9;&#9;ShowDeviceAlarmsButton: true,&#10;&#9;&#9;ShowAutoRefreshButton:  true,&#10;&#9;&#9;ShowRTSPButton:         true,&#10;&#9;&#9;ShowRTMPButton:         true,&#10;&#9;&#9;ShowHLSButton:          true,&#10;&#9;&#9;ShowCompanyHierarchy:   true,&#10;&#9;}&#10;&#10;&#9;file, err := os.Open(&quot;config.ini&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;// If config file doesn't exist, use defaults and create one&#10;&#9;&#9;fmt.Println(&quot;Config file not found, using defaults and creating config.ini&quot;)&#10;&#9;&#9;return createDefaultConfig()&#10;&#9;}&#10;&#9;defer file.Close()&#10;&#10;&#9;scanner := bufio.NewScanner(file)&#10;&#9;for scanner.Scan() {&#10;&#9;&#9;line := strings.TrimSpace(scanner.Text())&#10;&#10;&#9;&#9;// Skip empty lines and comments&#10;&#9;&#9;if line == &quot;&quot; || strings.HasPrefix(line, &quot;#&quot;) {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Parse key = value pairs&#10;&#9;&#9;parts := strings.SplitN(line, &quot;=&quot;, 2)&#10;&#9;&#9;if len(parts) != 2 {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;key := strings.TrimSpace(parts[0])&#10;&#9;&#9;value := strings.TrimSpace(parts[1])&#10;&#10;&#9;&#9;// Remove quotes from value if present&#10;&#9;&#9;if len(value) &gt;= 2 &amp;&amp; ((value[0] == '&quot;' &amp;&amp; value[len(value)-1] == '&quot;') || (value[0] == '\'' &amp;&amp; value[len(value)-1] == '\'')) {&#10;&#9;&#9;&#9;value = value[1 : len(value)-1]&#10;&#9;&#9;}&#10;&#10;&#9;&#9;switch key {&#10;&#9;&#9;case &quot;server_url&quot;:&#10;&#9;&#9;&#9;config.ServerURL = value&#10;&#9;&#9;case &quot;api_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.APIPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtmp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTMPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtsp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTSPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;hls_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.HLSPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;// UI Visibility settings&#10;&#9;&#9;case &quot;show_login_button&quot;:&#10;&#9;&#9;&#9;config.ShowLoginButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_save_button&quot;:&#10;&#9;&#9;&#9;config.ShowSaveButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_vehicle_info_button&quot;:&#10;&#9;&#9;&#9;config.ShowVehicleInfoButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_device_alarms_button&quot;:&#10;&#9;&#9;&#9;config.ShowDeviceAlarmsButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_auto_refresh_button&quot;:&#10;&#9;&#9;&#9;config.ShowAutoRefreshButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_rtsp_button&quot;:&#10;&#9;&#9;&#9;config.ShowRTSPButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_rtmp_button&quot;:&#10;&#9;&#9;&#9;config.ShowRTMPButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_hls_button&quot;:&#10;&#9;&#9;&#9;config.ShowHLSButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_company_hierarchy&quot;:&#10;&#9;&#9;&#9;config.ShowCompanyHierarchy = value == &quot;1&quot;&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return scanner.Err()&#10;}&#10;&#10;// createDefaultConfig creates a default config.ini file&#10;func createDefaultConfig() error {&#10;&#9;content := `# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;`&#10;&#9;return os.WriteFile(&quot;config.ini&quot;, []byte(content), 0644)&#10;}&#10;&#10;type Config struct {&#10;&#9;Account  string `json:&quot;account&quot;`&#10;&#9;Password string `json:&quot;password&quot;`&#10;}&#10;&#10;type LoginResponse struct {&#10;&#9;Result   int    `json:&quot;result&quot;`&#10;&#9;JSession string `json:&quot;jsession&quot;`&#10;}&#10;&#10;type Device struct {&#10;&#9;VID string `json:&quot;vid&quot;`&#10;&#9;DID string `json:&quot;did&quot;`&#10;}&#10;&#10;type StatusResponse struct {&#10;&#9;Result  int      `json:&quot;result&quot;`&#10;&#9;Onlines []Device `json:&quot;onlines&quot;`&#10;}&#10;&#10;type VehicleResponse struct {&#10;&#9;Result   int `json:&quot;result&quot;`&#10;&#9;Companys []struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;} `json:&quot;companys&quot;`&#10;&#9;Vehicles []struct {&#10;&#9;&#9;ID         int    `json:&quot;id&quot;`&#10;&#9;&#9;Name       string `json:&quot;nm&quot;`&#10;&#9;&#9;PID        int    `json:&quot;pid&quot;`&#10;&#9;&#9;PName      string `json:&quot;pnm&quot;`&#10;&#9;&#9;DeviceList []struct {&#10;&#9;&#9;&#9;ID          string `json:&quot;id&quot;`&#10;&#9;&#9;&#9;Channels    int    `json:&quot;cc&quot;`&#10;&#9;&#9;&#9;ChanName    string `json:&quot;cn&quot;`&#10;&#9;&#9;&#9;SIM         string `json:&quot;sim&quot;`&#10;&#9;&#9;&#9;InstallTime string `json:&quot;ist&quot;`&#10;&#9;&#9;} `json:&quot;dl&quot;`&#10;&#9;&#9;VehicleType  string `json:&quot;vehiType&quot;`&#10;&#9;&#9;VehicleColor string `json:&quot;vehiColor&quot;`&#10;&#9;&#9;VehicleBand  string `json:&quot;vehiBand&quot;`&#10;&#9;&#9;OwnerName    string `json:&quot;ownerName&quot;`&#10;&#9;&#9;EngineNum    string `json:&quot;engineNum&quot;`&#10;&#9;&#9;FrameNum     string `json:&quot;frameNum&quot;`&#10;&#9;} `json:&quot;vehicles&quot;`&#10;}&#10;&#10;// EquipmentStatus represents the bit-by-bit status flags for equipment&#10;type EquipmentStatus struct {&#10;&#9;// S1 flags (32 bits)&#10;&#9;GPSValid           bool // s1:0 - GPS positioning status (0=invalid, 1=valid)&#10;&#9;ACCStatus          bool // s1:1 - ACC status (0=off, 1=on)&#10;&#9;LeftTurn           bool // s1:2 - Left turn status&#10;&#9;RightTurn          bool // s1:3 - Right turn status&#10;&#9;FatigueWarning     bool // s1:4 - Fatigue driving warning&#10;&#9;ForwardRotation    bool // s1:5 - Positive rotation state&#10;&#9;ReverseState       bool // s1:6 - Reverse state&#10;&#9;GPSAntennaPresent  bool // s1:7 - GPS antenna present&#10;&#9;HardDriveStatus    int  // s1:8-9 - Hard drive status (0=not present, 1=present, 2=power down)&#10;&#9;ThreeGModuleStatus int  // s1:10-12 - 3G module status (0-5)&#10;&#9;QuiescentState     bool // s1:13 - Quiescent state&#10;&#9;OverspeedState     bool // s1:14 - Overspeed state&#10;&#9;GPSSupplement      bool // s1:15 - GPS supplement&#10;&#9;BatteryStatus      bool // s1:16 - Battery status&#10;&#9;NightState         bool // s1:17 - Night state&#10;&#9;OvercrowdingStatus bool // s1:18 - Overcrowding status&#10;&#9;ParkingACCStatus   bool // s1:19 - Parking ACC status&#10;&#9;IO1Status          bool // s1:20 - IO1 status&#10;&#9;IO2Status          bool // s1:21 - IO2 status&#10;&#9;IO3Status          bool // s1:22 - IO3 status&#10;&#9;IO4Status          bool // s1:23 - IO4 status&#10;&#9;IO5Status          bool // s1:24 - IO5 status&#10;&#9;IO6Status          bool // s1:25 - IO6 status&#10;&#9;IO7Status          bool // s1:26 - IO7 status&#10;&#9;IO8Status          bool // s1:27 - IO8 status&#10;&#9;Drive2Status       bool // s1:28 - Drive 2 status&#10;&#9;HardDisk2Status    int  // s1:29-30 - Hard disk 2 status&#10;&#9;HardDiskInvalid    bool // s1:31 - Hard disk status&#10;&#10;&#9;// S2 flags (32 bits)&#10;&#9;OutOfAreaAlarm            bool // s2:0 - Out of area alarm&#10;&#9;LineAlarm                 bool // s2:1 - Line alarm&#10;&#9;HighSpeedInAreaAlarm      bool // s2:2 - High speed in area&#10;&#9;LowSpeedInAreaAlarm       bool // s2:3 - Low speed in area&#10;&#9;HighSpeedOutsideAreaAlarm bool // s2:4 - High speed outside area&#10;&#9;LowSpeedOutsideAreaAlarm  bool // s2:5 - Low speed outside area&#10;&#9;ParkingInAreaAlarm        bool // s2:6 - Parking in area alarm&#10;&#9;OutOfAreaParkingAlarm     bool // s2:7 - Out of area parking alarm&#10;&#9;DailyFlowWarning          bool // s2:8 - Daily flow warning&#10;&#9;DailyFlowExceeded         bool // s2:9 - Daily flow exceeded&#10;&#9;MonthlyTrafficWarning     bool // s2:10 - Monthly traffic warning&#10;&#9;MonthlyFlowExceeded       bool // s2:11 - Monthly flow exceeded&#10;&#9;BackupBatteryPowered      bool // s2:12 - Host powered by backup battery&#10;&#9;DoorOpen                  bool // s2:13 - Door open&#10;&#9;VehicleFortification      bool // s2:14 - Vehicle fortification&#10;&#9;BatteryVoltageLow         bool // s2:15 - Battery voltage too low&#10;&#9;EngineStatus              bool // s2:17 - Engine status&#10;&#9;LastValidGPSInfo          bool // s2:18 - Last valid GPS information&#10;&#9;OnBoardStatus             bool // s2:19 - On board status (0=no load, 1=heavy load)&#10;&#9;OperationStatus           bool // s2:20 - Operation status (1=shutdown)&#10;&#9;LatLngNotEncrypted        bool // s2:21 - Latitude and longitude not encrypted&#10;&#9;NormalOilCircuit          bool // s2:22 - Normal oil circuit (1=disconnected)&#10;&#9;CircuitOK                 bool // s2:23 - Circuit OK (1=disconnected)&#10;&#9;DoorUnlock                bool // s2:24 - Door unlock (1=locked)&#10;&#9;AreaOverspeedPlatform     bool // s2:25 - Area overspeed alarm (platform)&#10;&#9;AreaOverspeedPlatform2    bool // s2:26 - Area overspeed alarm (platform)&#10;&#9;IntoAreaAlarm             bool // s2:27 - Into area alarm (platform)&#10;&#9;LineOffset                bool // s2:28 - Line offset (platform)&#10;&#9;TimePeriodOverspeed       bool // s2:29 - Time period overspeed (platform)&#10;&#9;TimePeriodLowSpeed        bool // s2:30 - Time period low speed (platform)&#10;&#9;FatigueDriving            bool // s2:31 - Fatigue driving (platform)&#10;&#10;&#9;// S3 flags (32 bits)&#10;&#9;VideoLostChannels    uint8 // s3:0-7 - Channel video lost&#10;&#9;VideoChannels        uint8 // s3:8-15 - Channel video&#10;&#9;IOInputs916          uint8 // s3:16-23 - IO inputs 9-16&#10;&#9;IOOutput14           uint8 // s3:24-27 - IO output 1-4&#10;&#9;PositioningType      uint8 // s3:28-29 - Positioning (0=GPS, 1=base station, 2=WiFi)&#10;&#9;AbnormalDrivingState bool  // s3:30 - Abnormal driving state (passenger cars forbidden)&#10;&#9;MountainForbidden    bool  // s3:31 - Mountain forbidden line&#10;&#10;&#9;// S4 flags (32 bits)&#10;&#9;PositioningCoordType      uint8 // s4:0-2 - Positioning type (0=WGS84, 1=GCJ-02, 2=BD09)&#10;&#9;EmergencyAlarm            bool  // s4:3 - Emergency alarm&#10;&#9;AreaOverspeedAlarm        bool  // s4:4 - Area overspeed alarm&#10;&#9;FatigueDrivingReport      bool  // s4:5 - Fatigue driving report&#10;&#9;DangerousDrivingAlarm     bool  // s4:6 - Dangerous driving behavior alarm&#10;&#9;GNSSModuleFault           bool  // s4:7 - GNSS module fault alarm&#10;&#9;GNSSAntennaDisconnected   bool  // s4:8 - GNSS antenna not connected/cut off&#10;&#9;GNSSAntennaShortCircuit   bool  // s4:9 - GNSS antenna short circuit&#10;&#9;TerminalLCDFault          bool  // s4:10 - Terminal LCD/display failure&#10;&#9;TTSModuleFault            bool  // s4:11 - TTS module fault&#10;&#9;CameraFailure             bool  // s4:12 - Camera failure&#10;&#9;CumulativeDrivingOvertime bool  // s4:13 - Cumulative driving overtime&#10;&#9;OvertimeParking           bool  // s4:14 - Overtime parking&#10;&#9;IntoArea                  bool  // s4:15 - Into area&#10;&#9;RouteAlarm                bool  // s4:16 - Route alarm&#10;&#9;TravelTimeAbnormal        bool  // s4:17 - Insufficient/excessive travel time&#10;&#9;RouteDeviationAlarm       bool  // s4:18 - Route deviation alarm&#10;&#9;VSSFailure                bool  // s4:19 - Vehicle VSS failure&#10;&#9;FuelQuantityAbnormal      bool  // s4:20 - Abnormal fuel quantity&#10;&#9;VehicleTheftAlarm         bool  // s4:21 - Vehicle theft alarm&#10;&#9;IllegalIgnitionAlarm      bool  // s4:22 - Illegal ignition alarm&#10;&#9;IllegalDisplacementAlarm  bool  // s4:23 - Illegal displacement alarm&#10;&#9;CollisionRolloverAlarm    bool  // s4:24 - Collision rollover alarm&#10;&#9;OvertimeStop              bool  // s4:25 - Overtime stop (platform)&#10;&#9;KeyPointNotReachedAlarm   bool  // s4:26 - Key point not reached (platform)&#10;&#9;LineOverspeedAlarm        bool  // s4:27 - Line overspeed alarm (platform)&#10;&#9;LineLowSpeedAlarm         bool  // s4:28 - Line low speed alarm (platform)&#10;&#9;RoadOverspeedAlarm        bool  // s4:29 - Road overspeed alarm (platform)&#10;&#9;OutOfAreaAlarmPlatform    bool  // s4:30 - Out of area alarm (platform)&#10;&#9;KeyPointNotLeaveAlarm     bool  // s4:31 - Key points not leave alarm (platform)&#10;}&#10;&#10;// ParseEquipmentStatus parses the s1, s2, s3, s4 integers into a structured EquipmentStatus&#10;func ParseEquipmentStatus(s1, s2, s3, s4 int) EquipmentStatus {&#10;&#9;status := EquipmentStatus{}&#10;&#10;&#9;// Parse S1 flags&#10;&#9;status.GPSValid = (s1 &amp; 0x01) != 0&#10;&#9;status.ACCStatus = (s1 &amp; 0x02) != 0&#10;&#9;status.LeftTurn = (s1 &amp; 0x04) != 0&#10;&#9;status.RightTurn = (s1 &amp; 0x08) != 0&#10;&#9;status.FatigueWarning = (s1 &amp; 0x10) != 0&#10;&#9;status.ForwardRotation = (s1 &amp; 0x20) != 0&#10;&#9;status.ReverseState = (s1 &amp; 0x40) != 0&#10;&#9;status.GPSAntennaPresent = (s1 &amp; 0x80) != 0&#10;&#9;status.HardDriveStatus = (s1 &gt;&gt; 8) &amp; 0x03&#10;&#9;status.ThreeGModuleStatus = (s1 &gt;&gt; 10) &amp; 0x07&#10;&#9;status.QuiescentState = (s1 &amp; 0x2000) != 0&#10;&#9;status.OverspeedState = (s1 &amp; 0x4000) != 0&#10;&#9;status.GPSSupplement = (s1 &amp; 0x8000) != 0&#10;&#9;status.BatteryStatus = (s1 &amp; 0x10000) != 0&#10;&#9;status.NightState = (s1 &amp; 0x20000) != 0&#10;&#9;status.OvercrowdingStatus = (s1 &amp; 0x40000) != 0&#10;&#9;status.ParkingACCStatus = (s1 &amp; 0x80000) != 0&#10;&#9;status.IO1Status = (s1 &amp; 0x100000) != 0&#10;&#9;status.IO2Status = (s1 &amp; 0x200000) != 0&#10;&#9;status.IO3Status = (s1 &amp; 0x400000) != 0&#10;&#9;status.IO4Status = (s1 &amp; 0x800000) != 0&#10;&#9;status.IO5Status = (s1 &amp; 0x1000000) != 0&#10;&#9;status.IO6Status = (s1 &amp; 0x2000000) != 0&#10;&#9;status.IO7Status = (s1 &amp; 0x4000000) != 0&#10;&#9;status.IO8Status = (s1 &amp; 0x8000000) != 0&#10;&#9;status.Drive2Status = (s1 &amp; 0x10000000) != 0&#10;&#9;status.HardDisk2Status = (s1 &gt;&gt; 29) &amp; 0x03&#10;&#9;status.HardDiskInvalid = (s1 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S2 flags&#10;&#9;status.OutOfAreaAlarm = (s2 &amp; 0x01) != 0&#10;&#9;status.LineAlarm = (s2 &amp; 0x02) != 0&#10;&#9;status.HighSpeedInAreaAlarm = (s2 &amp; 0x04) != 0&#10;&#9;status.LowSpeedInAreaAlarm = (s2 &amp; 0x08) != 0&#10;&#9;status.HighSpeedOutsideAreaAlarm = (s2 &amp; 0x10) != 0&#10;&#9;status.LowSpeedOutsideAreaAlarm = (s2 &amp; 0x20) != 0&#10;&#9;status.ParkingInAreaAlarm = (s2 &amp; 0x40) != 0&#10;&#9;status.OutOfAreaParkingAlarm = (s2 &amp; 0x80) != 0&#10;&#9;status.DailyFlowWarning = (s2 &amp; 0x100) != 0&#10;&#9;status.DailyFlowExceeded = (s2 &amp; 0x200) != 0&#10;&#9;status.MonthlyTrafficWarning = (s2 &amp; 0x400) != 0&#10;&#9;status.MonthlyFlowExceeded = (s2 &amp; 0x800) != 0&#10;&#9;status.BackupBatteryPowered = (s2 &amp; 0x1000) != 0&#10;&#9;status.DoorOpen = (s2 &amp; 0x2000) != 0&#10;&#9;status.VehicleFortification = (s2 &amp; 0x4000) != 0&#10;&#9;status.BatteryVoltageLow = (s2 &amp; 0x8000) != 0&#10;&#9;status.EngineStatus = (s2 &amp; 0x20000) != 0&#10;&#9;status.LastValidGPSInfo = (s2 &amp; 0x40000) != 0&#10;&#9;status.OnBoardStatus = (s2 &amp; 0x80000) != 0&#10;&#9;status.OperationStatus = (s2 &amp; 0x100000) != 0&#10;&#9;status.LatLngNotEncrypted = (s2 &amp; 0x200000) != 0&#10;&#9;status.NormalOilCircuit = (s2 &amp; 0x400000) != 0&#10;&#9;status.CircuitOK = (s2 &amp; 0x800000) != 0&#10;&#9;status.DoorUnlock = (s2 &amp; 0x1000000) != 0&#10;&#9;status.AreaOverspeedPlatform = (s2 &amp; 0x2000000) != 0&#10;&#9;status.AreaOverspeedPlatform2 = (s2 &amp; 0x4000000) != 0&#10;&#9;status.IntoAreaAlarm = (s2 &amp; 0x8000000) != 0&#10;&#9;status.LineOffset = (s2 &amp; 0x10000000) != 0&#10;&#9;status.TimePeriodOverspeed = (s2 &amp; 0x20000000) != 0&#10;&#9;status.TimePeriodLowSpeed = (s2 &amp; 0x40000000) != 0&#10;&#9;status.FatigueDriving = (s2 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S3 flags&#10;&#9;status.VideoLostChannels = uint8(s3 &amp; 0xFF)&#10;&#9;status.VideoChannels = uint8((s3 &gt;&gt; 8) &amp; 0xFF)&#10;&#9;status.IOInputs916 = uint8((s3 &gt;&gt; 16) &amp; 0xFF)&#10;&#9;status.IOOutput14 = uint8((s3 &gt;&gt; 24) &amp; 0x0F)&#10;&#9;status.PositioningType = uint8((s3 &gt;&gt; 28) &amp; 0x03)&#10;&#9;status.AbnormalDrivingState = (s3 &amp; 0x40000000) != 0&#10;&#9;status.MountainForbidden = (s3 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S4 flags&#10;&#9;status.PositioningCoordType = uint8(s4 &amp; 0x07)&#10;&#9;status.EmergencyAlarm = (s4 &amp; 0x08) != 0&#10;&#9;status.AreaOverspeedAlarm = (s4 &amp; 0x10) != 0&#10;&#9;status.FatigueDrivingReport = (s4 &amp; 0x20) != 0&#10;&#9;status.DangerousDrivingAlarm = (s4 &amp; 0x40) != 0&#10;&#9;status.GNSSModuleFault = (s4 &amp; 0x80) != 0&#10;&#9;status.GNSSAntennaDisconnected = (s4 &amp; 0x100) != 0&#10;&#9;status.GNSSAntennaShortCircuit = (s4 &amp; 0x200) != 0&#10;&#9;status.TerminalLCDFault = (s4 &amp; 0x400) != 0&#10;&#9;status.TTSModuleFault = (s4 &amp; 0x800) != 0&#10;&#9;status.CameraFailure = (s4 &amp; 0x1000) != 0&#10;&#9;status.CumulativeDrivingOvertime = (s4 &amp; 0x2000) != 0&#10;&#9;status.OvertimeParking = (s4 &amp; 0x4000) != 0&#10;&#9;status.IntoArea = (s4 &amp; 0x8000) != 0&#10;&#9;status.RouteAlarm = (s4 &amp; 0x10000) != 0&#10;&#9;status.TravelTimeAbnormal = (s4 &amp; 0x20000) != 0&#10;&#9;status.RouteDeviationAlarm = (s4 &amp; 0x40000) != 0&#10;&#9;status.VSSFailure = (s4 &amp; 0x80000) != 0&#10;&#9;status.FuelQuantityAbnormal = (s4 &amp; 0x100000) != 0&#10;&#9;status.VehicleTheftAlarm = (s4 &amp; 0x200000) != 0&#10;&#9;status.IllegalIgnitionAlarm = (s4 &amp; 0x400000) != 0&#10;&#9;status.IllegalDisplacementAlarm = (s4 &amp; 0x800000) != 0&#10;&#9;status.CollisionRolloverAlarm = (s4 &amp; 0x1000000) != 0&#10;&#9;status.OvertimeStop = (s4 &amp; 0x2000000) != 0&#10;&#9;status.KeyPointNotReachedAlarm = (s4 &amp; 0x4000000) != 0&#10;&#9;status.LineOverspeedAlarm = (s4 &amp; 0x8000000) != 0&#10;&#9;status.LineLowSpeedAlarm = (s4 &amp; 0x10000000) != 0&#10;&#9;status.RoadOverspeedAlarm = (s4 &amp; 0x20000000) != 0&#10;&#9;status.OutOfAreaAlarmPlatform = (s4 &amp; 0x40000000) != 0&#10;&#9;status.KeyPointNotLeaveAlarm = (s4 &amp; 0x80000000) != 0&#10;&#10;&#9;return status&#10;}&#10;&#10;type AlarmResponse struct {&#10;&#9;Result    int `json:&quot;result&quot;`&#10;&#9;AlarmList []struct {&#10;&#9;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;&#9;Gps     struct {&#10;&#9;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;&#9;} `json:&quot;Gps&quot;`&#10;&#9;} `json:&quot;alarmlist&quot;`&#10;&#9;Pagination struct {&#10;&#9;&#9;TotalPages   int `json:&quot;totalPages&quot;`&#10;&#9;&#9;CurrentPage  int `json:&quot;currentPage&quot;`&#10;&#9;&#9;PageRecords  int `json:&quot;pageRecords&quot;`&#10;&#9;&#9;TotalRecords int `json:&quot;totalRecords&quot;`&#10;&#9;} `json:&quot;pagination&quot;`&#10;}&#10;&#10;type AlarmResponseAlarm = struct {&#10;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;Gps     struct {&#10;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;} `json:&quot;Gps&quot;`&#10;}&#10;&#10;// RTSPLinkOptions contains the parameters needed to build an RTSP URL&#10;type RTSPLinkOptions struct {&#10;&#9;ServerHost string // RTSP server hostname&#10;&#9;ServerPort int    // RTSP server port (default 6604)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTSPLink creates a properly formatted RTSP URL for video streaming&#10;func GenerateRTSPLink(opts RTSPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTSPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTSP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtsp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;// HLSLinkOptions contains the parameters needed to build an HLS URL&#10;&#10;type HLSLinkOptions struct {&#10;&#9;ServerHost  string // HLS server hostname&#10;&#9;ServerPort  int    // HLS server port (default 16604)&#10;&#9;JSession    string // Session token from login&#10;&#9;DevIDNO     string // Device ID number&#10;&#9;Channel     int    // Channel number (starts from 0)&#10;&#9;Stream      int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;RequestType int    // 1 for real-time video&#10;}&#10;&#10;// GenerateHLSLink creates a properly formatted HLS URL for video streaming&#10;// HLS(HTTP Live streaming) is a streaming media transmission protocol based on HTTP, which is proposed by Apple as a protocol interaction method for transmitting audio and video.&#10;// Provides the real- time video request address based on the HLS protocol. Currently supports h264, does not support h265.&#10;func GenerateHLSLink(opts HLSLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.HLSPort&#10;&#9;}&#10;&#10;&#9;// Default to real-time video if not specified&#10;&#9;if opts.RequestType == 0 {&#10;&#9;&#9;opts.RequestType = 1&#10;&#9;}&#10;&#10;&#9;// Format the HLS URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;https://%s:%d/hls/%d_%s_%d_%d.m3u8?jsession=%s&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.RequestType,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream,&#10;&#9;&#9;opts.JSession)&#10;}&#10;&#10;// RTMPLinkOptions contains the parameters needed to build an RTMP URL&#10;type RTMPLinkOptions struct {&#10;&#9;ServerHost string // RTMP server hostname&#10;&#9;ServerPort int    // RTMP server port (default from config)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTMPLink creates a properly formatted RTMP URL for video streaming&#10;func GenerateRTMPLink(opts RTMPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTMPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTMP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtmp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;func httpGetJSON(url string) ([]byte, error) {&#10;&#9;client := &amp;http.Client{}&#10;&#9;req, err := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create request: %v&quot;, err)&#10;&#9;}&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#10;&#9;resp, err := client.Do(req)&#10;&#9;if err != nil &amp;&amp; isCertError(err) {&#10;&#9;&#9;// Retry with InsecureSkipVerify&#10;&#9;&#9;insecureClient := &amp;http.Client{&#10;&#9;&#9;&#9;Transport: &amp;http.Transport{&#10;&#9;&#9;&#9;&#9;TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},&#10;&#9;&#9;&#9;},&#10;&#9;&#9;}&#10;&#9;&#9;req2, err2 := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;&#9;if err2 != nil {&#10;&#9;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create retry request: %v&quot;, err2)&#10;&#9;&#9;}&#10;&#9;&#9;req2.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#9;&#9;resp, err = insecureClient.Do(req2)&#10;&#9;}&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#9;return io.ReadAll(resp.Body)&#10;}&#10;&#10;func isCertError(err error) bool {&#10;&#9;if err == nil {&#10;&#9;&#9;return false&#10;&#9;}&#10;&#9;msg := err.Error()&#10;&#9;return strings.Contains(msg, &quot;x509:&quot;) || strings.Contains(msg, &quot;certificate signed by unknown authority&quot;)&#10;}&#10;&#10;func login(account, password string) (string, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?account=%s&amp;password=%s&quot;, getLoginURL(), account, password)&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;var res LoginResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return &quot;&quot;, fmt.Errorf(&quot;login failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#9;return res.JSession, nil&#10;}&#10;&#10;func getDevices(jsession string) ([]Device, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getStatusURL(), jsession)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;var res StatusResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return res.Onlines, nil&#10;}&#10;&#10;func getVehicleInfo(jsession string) (*VehicleResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getVehicleInfoURL(), jsession)&#10;&#10;&#9;fmt.Printf(&quot;Requesting vehicle info from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw response: %s\n&quot;, string(data))&#10;&#10;&#9;var res VehicleResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;fmt.Printf(&quot;API error response with code: %d\n&quot;, res.Result)&#10;&#9;&#9;return nil, fmt.Errorf(&quot;vehicle info request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func getDeviceAlarms(jsession, devIDNO string, toMap int) (*AlarmResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;toMap=%d&quot;, getAlarmURL(), jsession, devIDNO, toMap)&#10;&#10;&#9;fmt.Printf(&quot;Requesting alarms from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw alarm response: %s\n&quot;, string(data))&#10;&#10;&#9;var res AlarmResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;alarm request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func generateLinks(jsession, did, vid, account, password string) map[string]string {&#10;&#9;return map[string]string{&#10;&#9;&#9;&quot;Web Player ID&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;devIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), did, account, password),&#10;&#9;&#9;&quot;Web Player VI&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;vehiIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), vid, account, password),&#10;&#9;&#9;&quot;Live API&quot;:      fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;Chn=1&amp;Sec=300&amp;Label=test&quot;, getLiveAPIBaseURL(), jsession, did),&#10;&#9;}&#10;}&#10;&#10;func saveToFile(account string, allLinks map[string]map[string]string) error {&#10;&#9;filename := fmt.Sprintf(&quot;%s-%ddev-%s.txt&quot;, account, len(allLinks), time.Now().Format(&quot;2006-01-02&quot;))&#10;&#9;f, err := os.Create(filename)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;for name, links := range allLinks {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, name)&#10;&#9;&#9;for k, v := range links {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;  %s: %s\n&quot;, k, v)&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;func buildCompanyHierarchy(companies []struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}) map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;} {&#10;&#9;hierarchy := make(map[int][]struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;})&#10;&#10;&#9;for _, company := range companies {&#10;&#9;&#9;hierarchy[company.PID] = append(hierarchy[company.PID], company)&#10;&#9;}&#10;&#10;&#9;return hierarchy&#10;}&#10;&#10;func printCompanyTree(builder *strings.Builder, hierarchy map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}, parentID int, prefix string) {&#10;&#9;children, exists := hierarchy[parentID]&#10;&#9;if !exists {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;for i, company := range children {&#10;&#9;&#9;isLast := i == len(children)-1&#10;&#10;&#9;&#9;if isLast {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s└── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;    &quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s├── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;│   &quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;func getStatusDescription(status EquipmentStatus) string {&#10;&#9;var descriptions []string&#10;&#10;&#9;// Build status descriptions for relevant flags&#10;&#9;if status.GPSValid {&#10;&#9;&#9;descriptions = append(descriptions, &quot;GPS Valid&quot;)&#10;&#9;}&#10;&#10;&#9;if status.ACCStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;ACC On&quot;)&#10;&#9;}&#10;&#10;&#9;if status.LeftTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Left Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.RightTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Right Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.QuiescentState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Quiescent&quot;)&#10;&#9;}&#10;&#10;&#9;if status.OverspeedState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Overspeeding&quot;)&#10;&#9;}&#10;&#10;&#9;if status.BatteryStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Battery Low&quot;)&#10;&#9;}&#10;&#10;&#9;if status.NightState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Night Mode&quot;)&#10;&#9;}&#10;&#10;&#9;if status.DoorOpen {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Door Open&quot;)&#10;&#9;}&#10;&#10;&#9;// Add important alarms&#10;&#9;var alarms []string&#10;&#9;if status.EmergencyAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Emergency&quot;)&#10;&#9;}&#10;&#9;if status.AreaOverspeedAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Area Overspeed&quot;)&#10;&#9;}&#10;&#9;if status.FatigueDrivingReport {&#10;&#9;&#9;alarms = append(alarms, &quot;Fatigue Driving&quot;)&#10;&#9;}&#10;&#9;if status.DangerousDrivingAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Dangerous Driving&quot;)&#10;&#9;}&#10;&#9;if status.VehicleTheftAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Vehicle Theft&quot;)&#10;&#9;}&#10;&#9;if status.IllegalIgnitionAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Illegal Ignition&quot;)&#10;&#9;}&#10;&#9;if status.CollisionRolloverAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Collision/Rollover&quot;)&#10;&#9;}&#10;&#10;&#9;if len(alarms) &gt; 0 {&#10;&#9;&#9;descriptions = append(descriptions, fmt.Sprintf(&quot;ALARMS: %s&quot;, strings.Join(alarms, &quot;, &quot;)))&#10;&#9;}&#10;&#10;&#9;return strings.Join(descriptions, &quot;, &quot;)&#10;}&#10;&#10;func appIcon() fyne.Resource {&#10;&#9;// Return the default Fyne icon instead of trying to load a custom one&#10;&#9;// This avoids the PNG decoding error&#10;&#9;return theme.FyneLogo()&#10;}&#10;&#10;func logAlarmsToFile(alarms []AlarmResponseAlarm) {&#10;&#9;if len(alarms) == 0 {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;f, err := os.OpenFile(&quot;alarms.log&quot;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Failed to write log: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;timestamp := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)&#10;&#9;fmt.Fprintf(f, &quot;=== Alarm log at %s ===\n&quot;, timestamp)&#10;&#10;&#9;for _, alarm := range alarms {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, alarm.DevIDNO)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Time: %s\n&quot;, alarm.Time)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Type: %d\n&quot;, alarm.Type)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Description: %s\n&quot;, alarm.Desc)&#10;&#10;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintf(f, &quot;Status: %s\n&quot;, status)&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;}&#10;&#10;// URL generation functions that use config&#10;func getLoginURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_login.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getStatusURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_getDeviceOlStatus.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getLiveAPIBaseURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_realTimeVedio.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getVehicleInfoURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_queryUserVehicle.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getAlarmURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_vehicleAlarm.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getWebPlayerURL() string {&#10;&#9;return strings.Replace(config.ServerURL, &quot;https://&quot;, &quot;http://&quot;, 1)&#10;}&#10;&#10;// getServerHostname extracts hostname from server URL for streaming services&#10;func getServerHostname() string {&#10;&#9;// Remove protocol prefix (https:// or http://)&#10;&#9;hostname := strings.TrimPrefix(config.ServerURL, &quot;https://&quot;)&#10;&#9;hostname = strings.TrimPrefix(hostname, &quot;http://&quot;)&#10;&#10;&#9;// Remove any path or port if present&#10;&#9;parts := strings.Split(hostname, &quot;/&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;// Remove port if present (for cases like hostname:port)&#10;&#9;parts = strings.Split(hostname, &quot;:&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;return hostname&#10;}&#10;&#10;func main() {&#10;&#9;// Load configuration&#10;&#9;err := loadConfig()&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Error loading config: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;myApp := app.New()&#10;&#9;myWindow := myApp.NewWindow(&quot;CMSV Video Generator Link&quot;)&#10;&#9;myWindow.SetIcon(appIcon())&#10;&#10;&#9;accountEntry := widget.NewEntry()&#10;&#9;accountEntry.SetPlaceHolder(&quot;Enter Account&quot;)&#10;&#9;passwordEntry := widget.NewPasswordEntry()&#10;&#9;passwordEntry.SetPlaceHolder(&quot;Enter Password&quot;)&#10;&#10;&#9;output := widget.NewMultiLineEntry()&#10;&#9;output.SetPlaceHolder(&quot;Results will appear here...&quot;)&#10;&#9;output.SetMinRowsVisible(15)&#10;&#10;&#9;// Create a dropdown for device selection&#10;&#9;deviceSelector := widget.NewSelect([]string{&quot;Login first to see devices&quot;}, func(selected string) {&#10;&#9;&#9;// This will be handled when a device is selected&#10;&#9;})&#10;&#9;deviceSelector.PlaceHolder = &quot;Select Device IDNO&quot;&#10;&#9;deviceSelector.Disable() // Disable until logged in&#10;&#10;&#9;// Create a dropdown for coordinate system selection&#10;&#9;coordSystems := []string{&#10;&#9;&#9;&quot;0 - WGS84 (Default)&quot;,&#10;&#9;&#9;&quot;1 - Google (GJ02)&quot;,&#10;&#9;&#9;&quot;2 - Baidu (BD09)&quot;,&#10;&#9;}&#10;&#9;coordSystemSelector := widget.NewSelect(coordSystems, nil)&#10;&#9;coordSystemSelector.SetSelected(coordSystems[0])&#10;&#10;&#9;var allLinks map[string]map[string]string&#10;&#9;var deviceMap map[string]Device // Map to store device names to their IDs&#10;&#9;var jsessionCache string        // Store the session for reuse&#10;&#10;&#9;loginBtn := widget.NewButton(&quot;Login and Fetch Devices&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for later use&#10;&#10;&#9;&#9;devices, err := getDevices(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Device fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Update the device selector with actual devices&#10;&#9;&#9;deviceOptions := []string{&quot;All Devices&quot;}&#10;&#9;&#9;deviceMap = make(map[string]Device)&#10;&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;deviceName := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;deviceOptions = append(deviceOptions, deviceName)&#10;&#9;&#9;&#9;deviceMap[deviceName] = d&#10;&#9;&#9;}&#10;&#10;&#9;&#9;deviceSelector.Options = deviceOptions&#10;&#9;&#9;deviceSelector.Enable()&#10;&#9;&#9;deviceSelector.SetSelected(&quot;All Devices&quot;)&#10;&#10;&#9;&#9;allLinks = make(map[string]map[string]string)&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d devices\n\n&quot;, len(devices)))&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;key := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;links := generateLinks(jsession, d.DID, d.VID, account, password)&#10;&#9;&#9;&#9;allLinks[key] = links&#10;&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, key))&#10;&#9;&#9;&#9;for name, link := range links {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  %s: %s\n&quot;, name, link))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;saveBtn := widget.NewButton(&quot;Save to File&quot;, func() {&#10;&#9;&#9;if allLinks == nil {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Info&quot;, &quot;No data to save yet&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;err := saveToFile(accountEntry.Text, allLinks)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(err, myWindow)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Success&quot;, &quot;File saved successfully&quot;, myWindow)&#10;&#9;&#9;}&#10;&#9;})&#10;&#10;&#9;vehicleInfoBtn := widget.NewButton(&quot;VEHICLE INFORMATION&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for reuse&#10;&#9;&#9;fmt.Printf(&quot;Using jsession: %s\n&quot;, jsession)&#10;&#10;&#9;&#9;vehicleInfo, err := getVehicleInfo(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Vehicle info fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;// Build and display company hierarchy only if enabled&#10;&#9;&#9;if config.ShowCompanyHierarchy {&#10;&#9;&#9;&#9;builder.WriteString(&quot;=== COMPANY HIERARCHY ===\n&quot;)&#10;&#9;&#9;&#9;hierarchy := buildCompanyHierarchy(vehicleInfo.Companys)&#10;&#9;&#9;&#9;printCompanyTree(&amp;builder, hierarchy, 2, &quot;&quot;)&#10;&#9;&#9;&#9;builder.WriteString(&quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Display vehicle information&#10;&#9;&#9;builder.WriteString(&quot;=== VEHICLE INFORMATION ===\n&quot;)&#10;&#9;&#9;for _, vehicle := range vehicleInfo.Vehicles {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Vehicle: %s (ID: %d)\n&quot;, vehicle.Name, vehicle.ID))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Company: %s\n&quot;, vehicle.PName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Type: %s, Band: %s, Color: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.VehicleType, vehicle.VehicleBand, vehicle.VehicleColor))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Owner: %s\n&quot;, vehicle.OwnerName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Engine #: %s, Frame #: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.EngineNum, vehicle.FrameNum))&#10;&#10;&#9;&#9;&#9;// Display device information for each vehicle&#10;&#9;&#9;&#9;builder.WriteString(&quot;  Devices:\n&quot;)&#10;&#9;&#9;&#9;for _, device := range vehicle.DeviceList {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;    - %s (%s)\n&quot;, device.ID, device.SIM))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Channels: %d, Channel Name: %s\n&quot;, device.Channels, device.ChanName))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Installed: %s\n&quot;, device.InstallTime))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;alarmBtn := widget.NewButton(&quot;GET DEVICE ALARMS&quot;, func() {&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please login first&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please select a device&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get the device ID based on selection&#10;&#9;&#9;var deviceID string&#10;&#9;&#9;if selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;} else if device, ok := deviceMap[selectedDevice]; ok {&#10;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get coordinate system selection&#10;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;}&#10;&#10;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;alarm fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;builder.WriteString(&quot;=== DEVICE ALARMS ===\n&quot;)&#10;&#10;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0))&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Status: %s\n&quot;, status))&#10;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Log alarms to file for future reference&#10;&#9;&#9;&#9;var alarmSlice []AlarmResponseAlarm&#10;&#9;&#9;&#9;for _, a := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;alarmSlice = append(alarmSlice, a)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;logAlarmsToFile(alarmSlice)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;// Add refresh button to continuously fetch alarms&#10;&#9;var refreshTicker *time.Ticker&#10;&#9;var stopRefresh chan bool&#10;&#9;var refreshBtn *widget.Button&#10;&#9;refreshBtn = widget.NewButton(&quot;AUTO REFRESH ALARMS&quot;, func() {&#10;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;// Stop auto-refresh&#10;&#9;&#9;&#9;stopRefresh &lt;- true&#10;&#9;&#9;&#9;refreshTicker = nil&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;AUTO REFRESH ALARMS&quot;)&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Auto-refresh&quot;, &quot;Auto-refresh stopped&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Start auto-refresh&#10;&#9;&#9;const timeoutSec = 5&#10;&#9;&#9;message := fmt.Sprintf(&quot;Start auto-refreshing alarms every %d seconds?&quot;, timeoutSec)&#10;&#10;&#9;&#9;dialog.ShowConfirm(&quot;Auto-refresh&quot;, message, func(start bool) {&#10;&#9;&#9;&#9;if !start {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Setup channels&#10;&#9;&#9;&#9;refreshTicker = time.NewTicker(time.Duration(timeoutSec) * time.Second)&#10;&#9;&#9;&#9;stopRefresh = make(chan bool)&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;STOP AUTO REFRESH&quot;)&#10;&#10;&#9;&#9;&#9;// Start refresh goroutine&#10;&#9;&#9;&#9;go func() {&#10;&#9;&#9;&#9;&#9;for {&#10;&#9;&#9;&#9;&#9;&#9;select {&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-refreshTicker.C:&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get device ID based on selection&#10;&#9;&#9;&#9;&#9;&#9;&#9;var deviceID string&#10;&#9;&#9;&#9;&#9;&#9;&#9;if deviceSelector.Selected == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if device, ok := deviceMap[deviceSelector.Selected]; ok {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get coordinate system&#10;&#9;&#9;&#9;&#9;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;&#9;&#9;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;&#9;&#9;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Fetch alarms&#10;&#9;&#9;&#9;&#9;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue // Skip this iteration on error&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Build output&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;=== AUTO REFRESH ALARMS (%s) ===\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;time.Now().Format(&quot;15:04:05&quot;)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI thread-safely&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI on main thread&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.SetText(builder.String())&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.Refresh()&#10;&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-stopRefresh:&#10;&#9;&#9;&#9;&#9;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;refreshTicker.Stop()&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}()&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTSP link generation button&#10;&#9;rtspBtn := widget.NewButton(&quot;Generate RTSP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTSP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTSP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTSP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTSP link&#10;&#9;&#9;&#9;rtspOptions := RTSPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtspLink := GenerateRTSPLink(rtspOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtspLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTSP Link Generated:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(rtspLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;RTSP link copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTSP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTMP link generation button&#10;&#9;rtmpBtn := widget.NewButton(&quot;Generate RTMP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTMP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTMP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTMP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTMP link&#10;&#9;&#9;&#9;rtmpOptions := RTMPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port for RTMP&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtmpLink := GenerateRTMPLink(rtmpOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtmpLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTMP URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTMP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add HLS link generation button&#10;&#9;hlsBtn := widget.NewButton(&quot;Generate HLS Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for HLS parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure HLS Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;HLS Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the HLS link&#10;&#9;&#9;&#9;hlsOptions := HLSLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost:  serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort:  16604, // Default port for HLS&#10;&#9;&#9;&#9;&#9;JSession:    jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:     device.DID,&#10;&#9;&#9;&#9;&#9;Channel:     channelNum,&#10;&#9;&#9;&#9;&#9;Stream:      streamType,&#10;&#9;&#9;&#9;&#9;RequestType: 1, // Real-time video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;hlsLink := GenerateHLSLink(hlsOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(hlsLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;// Add HTML video player code&#10;&#9;&#9;&#9;htmlCode := fmt.Sprintf(`&lt;video controls preload=&quot;none&quot; width=&quot;352&quot; height=&quot;288&quot; data-setup=&quot;{}&quot;&gt;&#10;    &lt;source src=&quot;%s&quot; type=&quot;application/x-mpegURL&quot;&gt;&#10;&lt;/video&gt;`, hlsLink)&#10;&#10;&#9;&#9;&#9;htmlEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;htmlEntry.SetText(htmlCode)&#10;&#9;&#9;&#9;htmlEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HLS URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy HLS URL to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(hlsLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;HLS URL copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HTML Video Player Code:&quot;),&#10;&#9;&#9;&#9;&#9;htmlEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy HTML Code to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(htmlCode)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;HTML video player code copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;HLS Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Create the final UI layout with conditional visibility&#10;&#9;var uiElements []fyne.CanvasObject&#10;&#10;&#9;// Add basic login form&#10;&#9;uiElements = append(uiElements,&#10;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Account:&quot;),&#10;&#9;&#9;&#9;accountEntry,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Password:&quot;),&#10;&#9;&#9;&#9;passwordEntry,&#10;&#9;&#9;),&#10;&#9;)&#10;&#10;&#9;// Add login button if enabled&#10;&#9;if config.ShowLoginButton {&#10;&#9;&#9;uiElements = append(uiElements, loginBtn)&#10;&#9;}&#10;&#10;&#9;// Add device selector&#10;&#9;uiElements = append(uiElements, deviceSelector)&#10;&#10;&#9;// Create button row with only enabled buttons&#10;&#9;var buttons []fyne.CanvasObject&#10;&#9;if config.ShowVehicleInfoButton {&#10;&#9;&#9;buttons = append(buttons, vehicleInfoBtn)&#10;&#9;}&#10;&#9;if config.ShowDeviceAlarmsButton {&#10;&#9;&#9;buttons = append(buttons, alarmBtn)&#10;&#9;}&#10;&#9;if config.ShowAutoRefreshButton {&#10;&#9;&#9;buttons = append(buttons, refreshBtn)&#10;&#9;}&#10;&#9;if config.ShowRTSPButton {&#10;&#9;&#9;buttons = append(buttons, rtspBtn)&#10;&#9;}&#10;&#9;if config.ShowHLSButton {&#10;&#9;&#9;buttons = append(buttons, hlsBtn)&#10;&#9;}&#10;&#9;if config.ShowRTMPButton {&#10;&#9;&#9;buttons = append(buttons, rtmpBtn)&#10;&#9;}&#10;&#10;&#9;// Add button row if there are any buttons to show&#10;&#9;if len(buttons) &gt; 0 {&#10;&#9;&#9;// Dynamically adjust columns based on number of buttons&#10;&#9;&#9;cols := len(buttons)&#10;&#9;&#9;if cols &gt; 6 {&#10;&#9;&#9;&#9;cols = 6 // Maximum 6 columns&#10;&#9;&#9;}&#10;&#9;&#9;uiElements = append(uiElements, container.NewGridWithColumns(cols, buttons...))&#10;&#9;}&#10;&#10;&#9;// Add coordinate system selector&#10;&#9;uiElements = append(uiElements,&#10;&#9;&#9;widget.NewLabel(&quot;Coordinate System:&quot;),&#10;&#9;&#9;coordSystemSelector,&#10;&#9;)&#10;&#10;&#9;// Add save button if enabled&#10;&#9;if config.ShowSaveButton {&#10;&#9;&#9;uiElements = append(uiElements, saveBtn)&#10;&#9;}&#10;&#10;&#9;// Add output area&#10;&#9;uiElements = append(uiElements, output)&#10;&#10;&#9;content := container.NewVBox(uiElements...)&#10;&#10;&#9;myWindow.SetContent(content)&#10;&#9;myWindow.Resize(fyne.NewSize(800, 600))&#10;&#9;myWindow.ShowAndRun()&#10;}&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;bufio&quot;&#10;&#9;&quot;crypto/tls&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;fyne.io/fyne/v2&quot;&#10;&#9;&quot;fyne.io/fyne/v2/app&quot;&#10;&#9;&quot;fyne.io/fyne/v2/container&quot;&#10;&#9;&quot;fyne.io/fyne/v2/dialog&quot;&#10;&#9;&quot;fyne.io/fyne/v2/theme&quot;&#10;&#9;&quot;fyne.io/fyne/v2/widget&quot;&#10;&#9;&quot;io&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;strconv&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;// AppConfig holds all configuration values&#10;type AppConfig struct {&#10;&#9;ServerURL string&#10;&#9;APIPort   int&#10;&#9;RTMPPort  int&#10;&#9;RTSPPort  int&#10;&#9;HLSPort   int&#10;&#10;&#9;// UI Elements Visibility&#10;&#9;ShowLoginButton        bool&#10;&#9;ShowSaveButton         bool&#10;&#9;ShowVehicleInfoButton  bool&#10;&#9;ShowDeviceAlarmsButton bool&#10;&#9;ShowAutoRefreshButton  bool&#10;&#9;ShowRTSPButton         bool&#10;&#9;ShowRTMPButton         bool&#10;&#9;ShowHLSButton          bool&#10;&#9;ShowCompanyHierarchy   bool&#10;}&#10;&#10;// Global config variable&#10;var config AppConfig&#10;&#10;// loadConfig reads the configuration from config.ini file&#10;func loadConfig() error {&#10;&#9;// Set default values&#10;&#9;config = AppConfig{&#10;&#9;&#9;ServerURL: &quot;https://ahd.samsonix.com&quot;,&#10;&#9;&#9;APIPort:   443,&#10;&#9;&#9;RTMPPort:  1935,&#10;&#9;&#9;RTSPPort:  6604,&#10;&#9;&#9;HLSPort:   16604,&#10;&#10;&#9;&#9;// Default UI visibility settings&#10;&#9;&#9;ShowLoginButton:        true,&#10;&#9;&#9;ShowSaveButton:         true,&#10;&#9;&#9;ShowVehicleInfoButton:  true,&#10;&#9;&#9;ShowDeviceAlarmsButton: true,&#10;&#9;&#9;ShowAutoRefreshButton:  true,&#10;&#9;&#9;ShowRTSPButton:         true,&#10;&#9;&#9;ShowRTMPButton:         true,&#10;&#9;&#9;ShowHLSButton:          true,&#10;&#9;&#9;ShowCompanyHierarchy:   true,&#10;&#9;}&#10;&#10;&#9;file, err := os.Open(&quot;config.ini&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;// If config file doesn't exist, use defaults and create one&#10;&#9;&#9;fmt.Println(&quot;Config file not found, using defaults and creating config.ini&quot;)&#10;&#9;&#9;return createDefaultConfig()&#10;&#9;}&#10;&#9;defer file.Close()&#10;&#10;&#9;scanner := bufio.NewScanner(file)&#10;&#9;for scanner.Scan() {&#10;&#9;&#9;line := strings.TrimSpace(scanner.Text())&#10;&#10;&#9;&#9;// Skip empty lines and comments&#10;&#9;&#9;if line == &quot;&quot; || strings.HasPrefix(line, &quot;#&quot;) {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Parse key = value pairs&#10;&#9;&#9;parts := strings.SplitN(line, &quot;=&quot;, 2)&#10;&#9;&#9;if len(parts) != 2 {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;key := strings.TrimSpace(parts[0])&#10;&#9;&#9;value := strings.TrimSpace(parts[1])&#10;&#10;&#9;&#9;// Remove quotes from value if present&#10;&#9;&#9;if len(value) &gt;= 2 &amp;&amp; ((value[0] == '&quot;' &amp;&amp; value[len(value)-1] == '&quot;') || (value[0] == '\'' &amp;&amp; value[len(value)-1] == '\'')) {&#10;&#9;&#9;&#9;value = value[1 : len(value)-1]&#10;&#9;&#9;}&#10;&#10;&#9;&#9;switch key {&#10;&#9;&#9;case &quot;server_url&quot;:&#10;&#9;&#9;&#9;config.ServerURL = value&#10;&#9;&#9;case &quot;api_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.APIPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtmp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTMPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtsp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTSPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;hls_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.HLSPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;// UI Visibility settings&#10;&#9;&#9;case &quot;show_login_button&quot;:&#10;&#9;&#9;&#9;config.ShowLoginButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_save_button&quot;:&#10;&#9;&#9;&#9;config.ShowSaveButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_vehicle_info_button&quot;:&#10;&#9;&#9;&#9;config.ShowVehicleInfoButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_device_alarms_button&quot;:&#10;&#9;&#9;&#9;config.ShowDeviceAlarmsButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_auto_refresh_button&quot;:&#10;&#9;&#9;&#9;config.ShowAutoRefreshButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_rtsp_button&quot;:&#10;&#9;&#9;&#9;config.ShowRTSPButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_rtmp_button&quot;:&#10;&#9;&#9;&#9;config.ShowRTMPButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_hls_button&quot;:&#10;&#9;&#9;&#9;config.ShowHLSButton = value == &quot;1&quot;&#10;&#9;&#9;case &quot;show_company_hierarchy&quot;:&#10;&#9;&#9;&#9;config.ShowCompanyHierarchy = value == &quot;1&quot;&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return scanner.Err()&#10;}&#10;&#10;// createDefaultConfig creates a default config.ini file&#10;func createDefaultConfig() error {&#10;&#9;content := `# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;`&#10;&#9;return os.WriteFile(&quot;config.ini&quot;, []byte(content), 0644)&#10;}&#10;&#10;type Config struct {&#10;&#9;Account  string `json:&quot;account&quot;`&#10;&#9;Password string `json:&quot;password&quot;`&#10;}&#10;&#10;type LoginResponse struct {&#10;&#9;Result   int    `json:&quot;result&quot;`&#10;&#9;JSession string `json:&quot;jsession&quot;`&#10;}&#10;&#10;type Device struct {&#10;&#9;VID string `json:&quot;vid&quot;`&#10;&#9;DID string `json:&quot;did&quot;`&#10;}&#10;&#10;type StatusResponse struct {&#10;&#9;Result  int      `json:&quot;result&quot;`&#10;&#9;Onlines []Device `json:&quot;onlines&quot;`&#10;}&#10;&#10;type VehicleResponse struct {&#10;&#9;Result   int `json:&quot;result&quot;`&#10;&#9;Companys []struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;} `json:&quot;companys&quot;`&#10;&#9;Vehicles []struct {&#10;&#9;&#9;ID         int    `json:&quot;id&quot;`&#10;&#9;&#9;Name       string `json:&quot;nm&quot;`&#10;&#9;&#9;PID        int    `json:&quot;pid&quot;`&#10;&#9;&#9;PName      string `json:&quot;pnm&quot;`&#10;&#9;&#9;DeviceList []struct {&#10;&#9;&#9;&#9;ID          string `json:&quot;id&quot;`&#10;&#9;&#9;&#9;Channels    int    `json:&quot;cc&quot;`&#10;&#9;&#9;&#9;ChanName    string `json:&quot;cn&quot;`&#10;&#9;&#9;&#9;SIM         string `json:&quot;sim&quot;`&#10;&#9;&#9;&#9;InstallTime string `json:&quot;ist&quot;`&#10;&#9;&#9;} `json:&quot;dl&quot;`&#10;&#9;&#9;VehicleType  string `json:&quot;vehiType&quot;`&#10;&#9;&#9;VehicleColor string `json:&quot;vehiColor&quot;`&#10;&#9;&#9;VehicleBand  string `json:&quot;vehiBand&quot;`&#10;&#9;&#9;OwnerName    string `json:&quot;ownerName&quot;`&#10;&#9;&#9;EngineNum    string `json:&quot;engineNum&quot;`&#10;&#9;&#9;FrameNum     string `json:&quot;frameNum&quot;`&#10;&#9;} `json:&quot;vehicles&quot;`&#10;}&#10;&#10;// EquipmentStatus represents the bit-by-bit status flags for equipment&#10;type EquipmentStatus struct {&#10;&#9;// S1 flags (32 bits)&#10;&#9;GPSValid           bool // s1:0 - GPS positioning status (0=invalid, 1=valid)&#10;&#9;ACCStatus          bool // s1:1 - ACC status (0=off, 1=on)&#10;&#9;LeftTurn           bool // s1:2 - Left turn status&#10;&#9;RightTurn          bool // s1:3 - Right turn status&#10;&#9;FatigueWarning     bool // s1:4 - Fatigue driving warning&#10;&#9;ForwardRotation    bool // s1:5 - Positive rotation state&#10;&#9;ReverseState       bool // s1:6 - Reverse state&#10;&#9;GPSAntennaPresent  bool // s1:7 - GPS antenna present&#10;&#9;HardDriveStatus    int  // s1:8-9 - Hard drive status (0=not present, 1=present, 2=power down)&#10;&#9;ThreeGModuleStatus int  // s1:10-12 - 3G module status (0-5)&#10;&#9;QuiescentState     bool // s1:13 - Quiescent state&#10;&#9;OverspeedState     bool // s1:14 - Overspeed state&#10;&#9;GPSSupplement      bool // s1:15 - GPS supplement&#10;&#9;BatteryStatus      bool // s1:16 - Battery status&#10;&#9;NightState         bool // s1:17 - Night state&#10;&#9;OvercrowdingStatus bool // s1:18 - Overcrowding status&#10;&#9;ParkingACCStatus   bool // s1:19 - Parking ACC status&#10;&#9;IO1Status          bool // s1:20 - IO1 status&#10;&#9;IO2Status          bool // s1:21 - IO2 status&#10;&#9;IO3Status          bool // s1:22 - IO3 status&#10;&#9;IO4Status          bool // s1:23 - IO4 status&#10;&#9;IO5Status          bool // s1:24 - IO5 status&#10;&#9;IO6Status          bool // s1:25 - IO6 status&#10;&#9;IO7Status          bool // s1:26 - IO7 status&#10;&#9;IO8Status          bool // s1:27 - IO8 status&#10;&#9;Drive2Status       bool // s1:28 - Drive 2 status&#10;&#9;HardDisk2Status    int  // s1:29-30 - Hard disk 2 status&#10;&#9;HardDiskInvalid    bool // s1:31 - Hard disk status&#10;&#10;&#9;// S2 flags (32 bits)&#10;&#9;OutOfAreaAlarm            bool // s2:0 - Out of area alarm&#10;&#9;LineAlarm                 bool // s2:1 - Line alarm&#10;&#9;HighSpeedInAreaAlarm      bool // s2:2 - High speed in area&#10;&#9;LowSpeedInAreaAlarm       bool // s2:3 - Low speed in area&#10;&#9;HighSpeedOutsideAreaAlarm bool // s2:4 - High speed outside area&#10;&#9;LowSpeedOutsideAreaAlarm  bool // s2:5 - Low speed outside area&#10;&#9;ParkingInAreaAlarm        bool // s2:6 - Parking in area alarm&#10;&#9;OutOfAreaParkingAlarm     bool // s2:7 - Out of area parking alarm&#10;&#9;DailyFlowWarning          bool // s2:8 - Daily flow warning&#10;&#9;DailyFlowExceeded         bool // s2:9 - Daily flow exceeded&#10;&#9;MonthlyTrafficWarning     bool // s2:10 - Monthly traffic warning&#10;&#9;MonthlyFlowExceeded       bool // s2:11 - Monthly flow exceeded&#10;&#9;BackupBatteryPowered      bool // s2:12 - Host powered by backup battery&#10;&#9;DoorOpen                  bool // s2:13 - Door open&#10;&#9;VehicleFortification      bool // s2:14 - Vehicle fortification&#10;&#9;BatteryVoltageLow         bool // s2:15 - Battery voltage too low&#10;&#9;EngineStatus              bool // s2:17 - Engine status&#10;&#9;LastValidGPSInfo          bool // s2:18 - Last valid GPS information&#10;&#9;OnBoardStatus             bool // s2:19 - On board status (0=no load, 1=heavy load)&#10;&#9;OperationStatus           bool // s2:20 - Operation status (1=shutdown)&#10;&#9;LatLngNotEncrypted        bool // s2:21 - Latitude and longitude not encrypted&#10;&#9;NormalOilCircuit          bool // s2:22 - Normal oil circuit (1=disconnected)&#10;&#9;CircuitOK                 bool // s2:23 - Circuit OK (1=disconnected)&#10;&#9;DoorUnlock                bool // s2:24 - Door unlock (1=locked)&#10;&#9;AreaOverspeedPlatform     bool // s2:25 - Area overspeed alarm (platform)&#10;&#9;AreaOverspeedPlatform2    bool // s2:26 - Area overspeed alarm (platform)&#10;&#9;IntoAreaAlarm             bool // s2:27 - Into area alarm (platform)&#10;&#9;LineOffset                bool // s2:28 - Line offset (platform)&#10;&#9;TimePeriodOverspeed       bool // s2:29 - Time period overspeed (platform)&#10;&#9;TimePeriodLowSpeed        bool // s2:30 - Time period low speed (platform)&#10;&#9;FatigueDriving            bool // s2:31 - Fatigue driving (platform)&#10;&#10;&#9;// S3 flags (32 bits)&#10;&#9;VideoLostChannels    uint8 // s3:0-7 - Channel video lost&#10;&#9;VideoChannels        uint8 // s3:8-15 - Channel video&#10;&#9;IOInputs916          uint8 // s3:16-23 - IO inputs 9-16&#10;&#9;IOOutput14           uint8 // s3:24-27 - IO output 1-4&#10;&#9;PositioningType      uint8 // s3:28-29 - Positioning (0=GPS, 1=base station, 2=WiFi)&#10;&#9;AbnormalDrivingState bool  // s3:30 - Abnormal driving state (passenger cars forbidden)&#10;&#9;MountainForbidden    bool  // s3:31 - Mountain forbidden line&#10;&#10;&#9;// S4 flags (32 bits)&#10;&#9;PositioningCoordType      uint8 // s4:0-2 - Positioning type (0=WGS84, 1=GCJ-02, 2=BD09)&#10;&#9;EmergencyAlarm            bool  // s4:3 - Emergency alarm&#10;&#9;AreaOverspeedAlarm        bool  // s4:4 - Area overspeed alarm&#10;&#9;FatigueDrivingReport      bool  // s4:5 - Fatigue driving report&#10;&#9;DangerousDrivingAlarm     bool  // s4:6 - Dangerous driving behavior alarm&#10;&#9;GNSSModuleFault           bool  // s4:7 - GNSS module fault alarm&#10;&#9;GNSSAntennaDisconnected   bool  // s4:8 - GNSS antenna not connected/cut off&#10;&#9;GNSSAntennaShortCircuit   bool  // s4:9 - GNSS antenna short circuit&#10;&#9;TerminalLCDFault          bool  // s4:10 - Terminal LCD/display failure&#10;&#9;TTSModuleFault            bool  // s4:11 - TTS module fault&#10;&#9;CameraFailure             bool  // s4:12 - Camera failure&#10;&#9;CumulativeDrivingOvertime bool  // s4:13 - Cumulative driving overtime&#10;&#9;OvertimeParking           bool  // s4:14 - Overtime parking&#10;&#9;IntoArea                  bool  // s4:15 - Into area&#10;&#9;RouteAlarm                bool  // s4:16 - Route alarm&#10;&#9;TravelTimeAbnormal        bool  // s4:17 - Insufficient/excessive travel time&#10;&#9;RouteDeviationAlarm       bool  // s4:18 - Route deviation alarm&#10;&#9;VSSFailure                bool  // s4:19 - Vehicle VSS failure&#10;&#9;FuelQuantityAbnormal      bool  // s4:20 - Abnormal fuel quantity&#10;&#9;VehicleTheftAlarm         bool  // s4:21 - Vehicle theft alarm&#10;&#9;IllegalIgnitionAlarm      bool  // s4:22 - Illegal ignition alarm&#10;&#9;IllegalDisplacementAlarm  bool  // s4:23 - Illegal displacement alarm&#10;&#9;CollisionRolloverAlarm    bool  // s4:24 - Collision rollover alarm&#10;&#9;OvertimeStop              bool  // s4:25 - Overtime stop (platform)&#10;&#9;KeyPointNotReachedAlarm   bool  // s4:26 - Key point not reached (platform)&#10;&#9;LineOverspeedAlarm        bool  // s4:27 - Line overspeed alarm (platform)&#10;&#9;LineLowSpeedAlarm         bool  // s4:28 - Line low speed alarm (platform)&#10;&#9;RoadOverspeedAlarm        bool  // s4:29 - Road overspeed alarm (platform)&#10;&#9;OutOfAreaAlarmPlatform    bool  // s4:30 - Out of area alarm (platform)&#10;&#9;KeyPointNotLeaveAlarm     bool  // s4:31 - Key points not leave alarm (platform)&#10;}&#10;&#10;// ParseEquipmentStatus parses the s1, s2, s3, s4 integers into a structured EquipmentStatus&#10;func ParseEquipmentStatus(s1, s2, s3, s4 int) EquipmentStatus {&#10;&#9;status := EquipmentStatus{}&#10;&#10;&#9;// Parse S1 flags&#10;&#9;status.GPSValid = (s1 &amp; 0x01) != 0&#10;&#9;status.ACCStatus = (s1 &amp; 0x02) != 0&#10;&#9;status.LeftTurn = (s1 &amp; 0x04) != 0&#10;&#9;status.RightTurn = (s1 &amp; 0x08) != 0&#10;&#9;status.FatigueWarning = (s1 &amp; 0x10) != 0&#10;&#9;status.ForwardRotation = (s1 &amp; 0x20) != 0&#10;&#9;status.ReverseState = (s1 &amp; 0x40) != 0&#10;&#9;status.GPSAntennaPresent = (s1 &amp; 0x80) != 0&#10;&#9;status.HardDriveStatus = (s1 &gt;&gt; 8) &amp; 0x03&#10;&#9;status.ThreeGModuleStatus = (s1 &gt;&gt; 10) &amp; 0x07&#10;&#9;status.QuiescentState = (s1 &amp; 0x2000) != 0&#10;&#9;status.OverspeedState = (s1 &amp; 0x4000) != 0&#10;&#9;status.GPSSupplement = (s1 &amp; 0x8000) != 0&#10;&#9;status.BatteryStatus = (s1 &amp; 0x10000) != 0&#10;&#9;status.NightState = (s1 &amp; 0x20000) != 0&#10;&#9;status.OvercrowdingStatus = (s1 &amp; 0x40000) != 0&#10;&#9;status.ParkingACCStatus = (s1 &amp; 0x80000) != 0&#10;&#9;status.IO1Status = (s1 &amp; 0x100000) != 0&#10;&#9;status.IO2Status = (s1 &amp; 0x200000) != 0&#10;&#9;status.IO3Status = (s1 &amp; 0x400000) != 0&#10;&#9;status.IO4Status = (s1 &amp; 0x800000) != 0&#10;&#9;status.IO5Status = (s1 &amp; 0x1000000) != 0&#10;&#9;status.IO6Status = (s1 &amp; 0x2000000) != 0&#10;&#9;status.IO7Status = (s1 &amp; 0x4000000) != 0&#10;&#9;status.IO8Status = (s1 &amp; 0x8000000) != 0&#10;&#9;status.Drive2Status = (s1 &amp; 0x10000000) != 0&#10;&#9;status.HardDisk2Status = (s1 &gt;&gt; 29) &amp; 0x03&#10;&#9;status.HardDiskInvalid = (s1 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S2 flags&#10;&#9;status.OutOfAreaAlarm = (s2 &amp; 0x01) != 0&#10;&#9;status.LineAlarm = (s2 &amp; 0x02) != 0&#10;&#9;status.HighSpeedInAreaAlarm = (s2 &amp; 0x04) != 0&#10;&#9;status.LowSpeedInAreaAlarm = (s2 &amp; 0x08) != 0&#10;&#9;status.HighSpeedOutsideAreaAlarm = (s2 &amp; 0x10) != 0&#10;&#9;status.LowSpeedOutsideAreaAlarm = (s2 &amp; 0x20) != 0&#10;&#9;status.ParkingInAreaAlarm = (s2 &amp; 0x40) != 0&#10;&#9;status.OutOfAreaParkingAlarm = (s2 &amp; 0x80) != 0&#10;&#9;status.DailyFlowWarning = (s2 &amp; 0x100) != 0&#10;&#9;status.DailyFlowExceeded = (s2 &amp; 0x200) != 0&#10;&#9;status.MonthlyTrafficWarning = (s2 &amp; 0x400) != 0&#10;&#9;status.MonthlyFlowExceeded = (s2 &amp; 0x800) != 0&#10;&#9;status.BackupBatteryPowered = (s2 &amp; 0x1000) != 0&#10;&#9;status.DoorOpen = (s2 &amp; 0x2000) != 0&#10;&#9;status.VehicleFortification = (s2 &amp; 0x4000) != 0&#10;&#9;status.BatteryVoltageLow = (s2 &amp; 0x8000) != 0&#10;&#9;status.EngineStatus = (s2 &amp; 0x20000) != 0&#10;&#9;status.LastValidGPSInfo = (s2 &amp; 0x40000) != 0&#10;&#9;status.OnBoardStatus = (s2 &amp; 0x80000) != 0&#10;&#9;status.OperationStatus = (s2 &amp; 0x100000) != 0&#10;&#9;status.LatLngNotEncrypted = (s2 &amp; 0x200000) != 0&#10;&#9;status.NormalOilCircuit = (s2 &amp; 0x400000) != 0&#10;&#9;status.CircuitOK = (s2 &amp; 0x800000) != 0&#10;&#9;status.DoorUnlock = (s2 &amp; 0x1000000) != 0&#10;&#9;status.AreaOverspeedPlatform = (s2 &amp; 0x2000000) != 0&#10;&#9;status.AreaOverspeedPlatform2 = (s2 &amp; 0x4000000) != 0&#10;&#9;status.IntoAreaAlarm = (s2 &amp; 0x8000000) != 0&#10;&#9;status.LineOffset = (s2 &amp; 0x10000000) != 0&#10;&#9;status.TimePeriodOverspeed = (s2 &amp; 0x20000000) != 0&#10;&#9;status.TimePeriodLowSpeed = (s2 &amp; 0x40000000) != 0&#10;&#9;status.FatigueDriving = (s2 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S3 flags&#10;&#9;status.VideoLostChannels = uint8(s3 &amp; 0xFF)&#10;&#9;status.VideoChannels = uint8((s3 &gt;&gt; 8) &amp; 0xFF)&#10;&#9;status.IOInputs916 = uint8((s3 &gt;&gt; 16) &amp; 0xFF)&#10;&#9;status.IOOutput14 = uint8((s3 &gt;&gt; 24) &amp; 0x0F)&#10;&#9;status.PositioningType = uint8((s3 &gt;&gt; 28) &amp; 0x03)&#10;&#9;status.AbnormalDrivingState = (s3 &amp; 0x40000000) != 0&#10;&#9;status.MountainForbidden = (s3 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S4 flags&#10;&#9;status.PositioningCoordType = uint8(s4 &amp; 0x07)&#10;&#9;status.EmergencyAlarm = (s4 &amp; 0x08) != 0&#10;&#9;status.AreaOverspeedAlarm = (s4 &amp; 0x10) != 0&#10;&#9;status.FatigueDrivingReport = (s4 &amp; 0x20) != 0&#10;&#9;status.DangerousDrivingAlarm = (s4 &amp; 0x40) != 0&#10;&#9;status.GNSSModuleFault = (s4 &amp; 0x80) != 0&#10;&#9;status.GNSSAntennaDisconnected = (s4 &amp; 0x100) != 0&#10;&#9;status.GNSSAntennaShortCircuit = (s4 &amp; 0x200) != 0&#10;&#9;status.TerminalLCDFault = (s4 &amp; 0x400) != 0&#10;&#9;status.TTSModuleFault = (s4 &amp; 0x800) != 0&#10;&#9;status.CameraFailure = (s4 &amp; 0x1000) != 0&#10;&#9;status.CumulativeDrivingOvertime = (s4 &amp; 0x2000) != 0&#10;&#9;status.OvertimeParking = (s4 &amp; 0x4000) != 0&#10;&#9;status.IntoArea = (s4 &amp; 0x8000) != 0&#10;&#9;status.RouteAlarm = (s4 &amp; 0x10000) != 0&#10;&#9;status.TravelTimeAbnormal = (s4 &amp; 0x20000) != 0&#10;&#9;status.RouteDeviationAlarm = (s4 &amp; 0x40000) != 0&#10;&#9;status.VSSFailure = (s4 &amp; 0x80000) != 0&#10;&#9;status.FuelQuantityAbnormal = (s4 &amp; 0x100000) != 0&#10;&#9;status.VehicleTheftAlarm = (s4 &amp; 0x200000) != 0&#10;&#9;status.IllegalIgnitionAlarm = (s4 &amp; 0x400000) != 0&#10;&#9;status.IllegalDisplacementAlarm = (s4 &amp; 0x800000) != 0&#10;&#9;status.CollisionRolloverAlarm = (s4 &amp; 0x1000000) != 0&#10;&#9;status.OvertimeStop = (s4 &amp; 0x2000000) != 0&#10;&#9;status.KeyPointNotReachedAlarm = (s4 &amp; 0x4000000) != 0&#10;&#9;status.LineOverspeedAlarm = (s4 &amp; 0x8000000) != 0&#10;&#9;status.LineLowSpeedAlarm = (s4 &amp; 0x10000000) != 0&#10;&#9;status.RoadOverspeedAlarm = (s4 &amp; 0x20000000) != 0&#10;&#9;status.OutOfAreaAlarmPlatform = (s4 &amp; 0x40000000) != 0&#10;&#9;status.KeyPointNotLeaveAlarm = (s4 &amp; 0x80000000) != 0&#10;&#10;&#9;return status&#10;}&#10;&#10;type AlarmResponse struct {&#10;&#9;Result    int `json:&quot;result&quot;`&#10;&#9;AlarmList []struct {&#10;&#9;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;&#9;Gps     struct {&#10;&#9;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;&#9;} `json:&quot;Gps&quot;`&#10;&#9;} `json:&quot;alarmlist&quot;`&#10;&#9;Pagination struct {&#10;&#9;&#9;TotalPages   int `json:&quot;totalPages&quot;`&#10;&#9;&#9;CurrentPage  int `json:&quot;currentPage&quot;`&#10;&#9;&#9;PageRecords  int `json:&quot;pageRecords&quot;`&#10;&#9;&#9;TotalRecords int `json:&quot;totalRecords&quot;`&#10;&#9;} `json:&quot;pagination&quot;`&#10;}&#10;&#10;type AlarmResponseAlarm = struct {&#10;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;Gps     struct {&#10;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;} `json:&quot;Gps&quot;`&#10;}&#10;&#10;// RTSPLinkOptions contains the parameters needed to build an RTSP URL&#10;type RTSPLinkOptions struct {&#10;&#9;ServerHost string // RTSP server hostname&#10;&#9;ServerPort int    // RTSP server port (default 6604)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTSPLink creates a properly formatted RTSP URL for video streaming&#10;func GenerateRTSPLink(opts RTSPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTSPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTSP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtsp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;// HLSLinkOptions contains the parameters needed to build an HLS URL&#10;&#10;type HLSLinkOptions struct {&#10;&#9;ServerHost  string // HLS server hostname&#10;&#9;ServerPort  int    // HLS server port (default 16604)&#10;&#9;JSession    string // Session token from login&#10;&#9;DevIDNO     string // Device ID number&#10;&#9;Channel     int    // Channel number (starts from 0)&#10;&#9;Stream      int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;RequestType int    // 1 for real-time video&#10;}&#10;&#10;// GenerateHLSLink creates a properly formatted HLS URL for video streaming&#10;// HLS(HTTP Live streaming) is a streaming media transmission protocol based on HTTP, which is proposed by Apple as a protocol interaction method for transmitting audio and video.&#10;// Provides the real- time video request address based on the HLS protocol. Currently supports h264, does not support h265.&#10;func GenerateHLSLink(opts HLSLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.HLSPort&#10;&#9;}&#10;&#10;&#9;// Default to real-time video if not specified&#10;&#9;if opts.RequestType == 0 {&#10;&#9;&#9;opts.RequestType = 1&#10;&#9;}&#10;&#10;&#9;// Format the HLS URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;https://%s:%d/hls/%d_%s_%d_%d.m3u8?jsession=%s&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.RequestType,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream,&#10;&#9;&#9;opts.JSession)&#10;}&#10;&#10;// RTMPLinkOptions contains the parameters needed to build an RTMP URL&#10;type RTMPLinkOptions struct {&#10;&#9;ServerHost string // RTMP server hostname&#10;&#9;ServerPort int    // RTMP server port (default from config)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTMPLink creates a properly formatted RTMP URL for video streaming&#10;func GenerateRTMPLink(opts RTMPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTMPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTMP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtmp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;func httpGetJSON(url string) ([]byte, error) {&#10;&#9;client := &amp;http.Client{}&#10;&#9;req, err := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create request: %v&quot;, err)&#10;&#9;}&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#10;&#9;resp, err := client.Do(req)&#10;&#9;if err != nil &amp;&amp; isCertError(err) {&#10;&#9;&#9;// Retry with InsecureSkipVerify&#10;&#9;&#9;insecureClient := &amp;http.Client{&#10;&#9;&#9;&#9;Transport: &amp;http.Transport{&#10;&#9;&#9;&#9;&#9;TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},&#10;&#9;&#9;&#9;},&#10;&#9;&#9;}&#10;&#9;&#9;req2, err2 := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;&#9;if err2 != nil {&#10;&#9;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create retry request: %v&quot;, err2)&#10;&#9;&#9;}&#10;&#9;&#9;req2.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#9;&#9;resp, err = insecureClient.Do(req2)&#10;&#9;}&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#9;return io.ReadAll(resp.Body)&#10;}&#10;&#10;func isCertError(err error) bool {&#10;&#9;if err == nil {&#10;&#9;&#9;return false&#10;&#9;}&#10;&#9;msg := err.Error()&#10;&#9;return strings.Contains(msg, &quot;x509:&quot;) || strings.Contains(msg, &quot;certificate signed by unknown authority&quot;)&#10;}&#10;&#10;func login(account, password string) (string, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?account=%s&amp;password=%s&quot;, getLoginURL(), account, password)&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;var res LoginResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return &quot;&quot;, fmt.Errorf(&quot;login failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#9;return res.JSession, nil&#10;}&#10;&#10;func getDevices(jsession string) ([]Device, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getStatusURL(), jsession)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;var res StatusResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return res.Onlines, nil&#10;}&#10;&#10;func getVehicleInfo(jsession string) (*VehicleResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getVehicleInfoURL(), jsession)&#10;&#10;&#9;fmt.Printf(&quot;Requesting vehicle info from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw response: %s\n&quot;, string(data))&#10;&#10;&#9;var res VehicleResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;fmt.Printf(&quot;API error response with code: %d\n&quot;, res.Result)&#10;&#9;&#9;return nil, fmt.Errorf(&quot;vehicle info request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func getDeviceAlarms(jsession, devIDNO string, toMap int) (*AlarmResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;toMap=%d&quot;, getAlarmURL(), jsession, devIDNO, toMap)&#10;&#10;&#9;fmt.Printf(&quot;Requesting alarms from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw alarm response: %s\n&quot;, string(data))&#10;&#10;&#9;var res AlarmResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;alarm request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func generateLinks(jsession, did, vid, account, password string) map[string]string {&#10;&#9;return map[string]string{&#10;&#9;&#9;&quot;Web Player ID&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;devIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), did, account, password),&#10;&#9;&#9;&quot;Web Player VI&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;vehiIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), vid, account, password),&#10;&#9;&#9;&quot;Live API&quot;:      fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;Chn=1&amp;Sec=300&amp;Label=test&quot;, getLiveAPIBaseURL(), jsession, did),&#10;&#9;}&#10;}&#10;&#10;func saveToFile(account string, allLinks map[string]map[string]string) error {&#10;&#9;filename := fmt.Sprintf(&quot;%s-%ddev-%s.txt&quot;, account, len(allLinks), time.Now().Format(&quot;2006-01-02&quot;))&#10;&#9;f, err := os.Create(filename)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;for name, links := range allLinks {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, name)&#10;&#9;&#9;for k, v := range links {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;  %s: %s\n&quot;, k, v)&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;func buildCompanyHierarchy(companies []struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}) map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;} {&#10;&#9;hierarchy := make(map[int][]struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;})&#10;&#10;&#9;for _, company := range companies {&#10;&#9;&#9;hierarchy[company.PID] = append(hierarchy[company.PID], company)&#10;&#9;}&#10;&#10;&#9;return hierarchy&#10;}&#10;&#10;func printCompanyTree(builder *strings.Builder, hierarchy map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}, parentID int, prefix string) {&#10;&#9;children, exists := hierarchy[parentID]&#10;&#9;if !exists {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;for i, company := range children {&#10;&#9;&#9;isLast := i == len(children)-1&#10;&#10;&#9;&#9;if isLast {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s└── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;    &quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s├── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;│   &quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;func getStatusDescription(status EquipmentStatus) string {&#10;&#9;var descriptions []string&#10;&#10;&#9;// Build status descriptions for relevant flags&#10;&#9;if status.GPSValid {&#10;&#9;&#9;descriptions = append(descriptions, &quot;GPS Valid&quot;)&#10;&#9;}&#10;&#10;&#9;if status.ACCStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;ACC On&quot;)&#10;&#9;}&#10;&#10;&#9;if status.LeftTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Left Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.RightTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Right Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.QuiescentState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Quiescent&quot;)&#10;&#9;}&#10;&#10;&#9;if status.OverspeedState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Overspeeding&quot;)&#10;&#9;}&#10;&#10;&#9;if status.BatteryStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Battery Low&quot;)&#10;&#9;}&#10;&#10;&#9;if status.NightState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Night Mode&quot;)&#10;&#9;}&#10;&#10;&#9;if status.DoorOpen {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Door Open&quot;)&#10;&#9;}&#10;&#10;&#9;// Add important alarms&#10;&#9;var alarms []string&#10;&#9;if status.EmergencyAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Emergency&quot;)&#10;&#9;}&#10;&#9;if status.AreaOverspeedAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Area Overspeed&quot;)&#10;&#9;}&#10;&#9;if status.FatigueDrivingReport {&#10;&#9;&#9;alarms = append(alarms, &quot;Fatigue Driving&quot;)&#10;&#9;}&#10;&#9;if status.DangerousDrivingAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Dangerous Driving&quot;)&#10;&#9;}&#10;&#9;if status.VehicleTheftAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Vehicle Theft&quot;)&#10;&#9;}&#10;&#9;if status.IllegalIgnitionAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Illegal Ignition&quot;)&#10;&#9;}&#10;&#9;if status.CollisionRolloverAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Collision/Rollover&quot;)&#10;&#9;}&#10;&#10;&#9;if len(alarms) &gt; 0 {&#10;&#9;&#9;descriptions = append(descriptions, fmt.Sprintf(&quot;ALARMS: %s&quot;, strings.Join(alarms, &quot;, &quot;)))&#10;&#9;}&#10;&#10;&#9;return strings.Join(descriptions, &quot;, &quot;)&#10;}&#10;&#10;func appIcon() fyne.Resource {&#10;&#9;// Return the default Fyne icon instead of trying to load a custom one&#10;&#9;// This avoids the PNG decoding error&#10;&#9;return theme.FyneLogo()&#10;}&#10;&#10;func logAlarmsToFile(alarms []AlarmResponseAlarm) {&#10;&#9;if len(alarms) == 0 {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;f, err := os.OpenFile(&quot;alarms.log&quot;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Failed to write log: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;timestamp := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)&#10;&#9;fmt.Fprintf(f, &quot;=== Alarm log at %s ===\n&quot;, timestamp)&#10;&#10;&#9;for _, alarm := range alarms {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, alarm.DevIDNO)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Time: %s\n&quot;, alarm.Time)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Type: %d\n&quot;, alarm.Type)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Description: %s\n&quot;, alarm.Desc)&#10;&#10;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintf(f, &quot;Status: %s\n&quot;, status)&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;}&#10;&#10;// URL generation functions that use config&#10;func getLoginURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_login.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getStatusURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_getDeviceOlStatus.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getLiveAPIBaseURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_realTimeVedio.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getVehicleInfoURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_queryUserVehicle.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getAlarmURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_vehicleAlarm.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getWebPlayerURL() string {&#10;&#9;return strings.Replace(config.ServerURL, &quot;https://&quot;, &quot;http://&quot;, 1)&#10;}&#10;&#10;// getServerHostname extracts hostname from server URL for streaming services&#10;func getServerHostname() string {&#10;&#9;// Remove protocol prefix (https:// or http://)&#10;&#9;hostname := strings.TrimPrefix(config.ServerURL, &quot;https://&quot;)&#10;&#9;hostname = strings.TrimPrefix(hostname, &quot;http://&quot;)&#10;&#10;&#9;// Remove any path or port if present&#10;&#9;parts := strings.Split(hostname, &quot;/&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;// Remove port if present (for cases like hostname:port)&#10;&#9;parts = strings.Split(hostname, &quot;:&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;return hostname&#10;}&#10;&#10;func main() {&#10;&#9;// Load configuration&#10;&#9;err := loadConfig()&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Error loading config: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;myApp := app.New()&#10;&#9;myWindow := myApp.NewWindow(&quot;CMSV Video Generator Link&quot;)&#10;&#9;myWindow.SetIcon(appIcon())&#10;&#10;&#9;accountEntry := widget.NewEntry()&#10;&#9;accountEntry.SetPlaceHolder(&quot;Enter Account&quot;)&#10;&#9;passwordEntry := widget.NewPasswordEntry()&#10;&#9;passwordEntry.SetPlaceHolder(&quot;Enter Password&quot;)&#10;&#10;&#9;output := widget.NewMultiLineEntry()&#10;&#9;output.SetPlaceHolder(&quot;Results will appear here...&quot;)&#10;&#9;output.SetMinRowsVisible(15)&#10;&#10;&#9;// Create a dropdown for device selection&#10;&#9;deviceSelector := widget.NewSelect([]string{&quot;Login first to see devices&quot;}, func(selected string) {&#10;&#9;&#9;// This will be handled when a device is selected&#10;&#9;})&#10;&#9;deviceSelector.PlaceHolder = &quot;Select Device IDNO&quot;&#10;&#9;deviceSelector.Disable() // Disable until logged in&#10;&#10;&#9;// Create a dropdown for coordinate system selection&#10;&#9;coordSystems := []string{&#10;&#9;&#9;&quot;0 - WGS84 (Default)&quot;,&#10;&#9;&#9;&quot;1 - Google (GJ02)&quot;,&#10;&#9;&#9;&quot;2 - Baidu (BD09)&quot;,&#10;&#9;}&#10;&#9;coordSystemSelector := widget.NewSelect(coordSystems, nil)&#10;&#9;coordSystemSelector.SetSelected(coordSystems[0])&#10;&#10;&#9;var allLinks map[string]map[string]string&#10;&#9;var deviceMap map[string]Device // Map to store device names to their IDs&#10;&#9;var jsessionCache string        // Store the session for reuse&#10;&#10;&#9;loginBtn := widget.NewButton(&quot;Login and Fetch Devices&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for later use&#10;&#10;&#9;&#9;devices, err := getDevices(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Device fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Update the device selector with actual devices&#10;&#9;&#9;deviceOptions := []string{&quot;All Devices&quot;}&#10;&#9;&#9;deviceMap = make(map[string]Device)&#10;&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;deviceName := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;deviceOptions = append(deviceOptions, deviceName)&#10;&#9;&#9;&#9;deviceMap[deviceName] = d&#10;&#9;&#9;}&#10;&#10;&#9;&#9;deviceSelector.Options = deviceOptions&#10;&#9;&#9;deviceSelector.Enable()&#10;&#9;&#9;deviceSelector.SetSelected(&quot;All Devices&quot;)&#10;&#10;&#9;&#9;allLinks = make(map[string]map[string]string)&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d devices\n\n&quot;, len(devices)))&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;key := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;links := generateLinks(jsession, d.DID, d.VID, account, password)&#10;&#9;&#9;&#9;allLinks[key] = links&#10;&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, key))&#10;&#9;&#9;&#9;for name, link := range links {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  %s: %s\n&quot;, name, link))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;saveBtn := widget.NewButton(&quot;Save to File&quot;, func() {&#10;&#9;&#9;if allLinks == nil {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Info&quot;, &quot;No data to save yet&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;err := saveToFile(accountEntry.Text, allLinks)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(err, myWindow)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Success&quot;, &quot;File saved successfully&quot;, myWindow)&#10;&#9;&#9;}&#10;&#9;})&#10;&#10;&#9;vehicleInfoBtn := widget.NewButton(&quot;VEHICLE INFORMATION&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for reuse&#10;&#9;&#9;fmt.Printf(&quot;Using jsession: %s\n&quot;, jsession)&#10;&#10;&#9;&#9;vehicleInfo, err := getVehicleInfo(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Vehicle info fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;// Build and display company hierarchy only if enabled&#10;&#9;&#9;if config.ShowCompanyHierarchy {&#10;&#9;&#9;&#9;builder.WriteString(&quot;=== COMPANY HIERARCHY ===\n&quot;)&#10;&#9;&#9;&#9;hierarchy := buildCompanyHierarchy(vehicleInfo.Companys)&#10;&#9;&#9;&#9;printCompanyTree(&amp;builder, hierarchy, 2, &quot;&quot;)&#10;&#9;&#9;&#9;builder.WriteString(&quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Display vehicle information&#10;&#9;&#9;builder.WriteString(&quot;=== VEHICLE INFORMATION ===\n&quot;)&#10;&#9;&#9;for _, vehicle := range vehicleInfo.Vehicles {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Vehicle: %s (ID: %d)\n&quot;, vehicle.Name, vehicle.ID))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Company: %s\n&quot;, vehicle.PName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Type: %s, Band: %s, Color: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.VehicleType, vehicle.VehicleBand, vehicle.VehicleColor))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Owner: %s\n&quot;, vehicle.OwnerName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Engine #: %s, Frame #: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.EngineNum, vehicle.FrameNum))&#10;&#10;&#9;&#9;&#9;// Display device information for each vehicle&#10;&#9;&#9;&#9;builder.WriteString(&quot;  Devices:\n&quot;)&#10;&#9;&#9;&#9;for _, device := range vehicle.DeviceList {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;    - %s (%s)\n&quot;, device.ID, device.SIM))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Channels: %d, Channel Name: %s\n&quot;, device.Channels, device.ChanName))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Installed: %s\n&quot;, device.InstallTime))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;vehicleInfoText := builder.String()&#10;&#9;&#9;output.SetText(vehicleInfoText)&#10;&#10;&#9;&#9;// Show additional options dialog&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;Vehicle Information Options&quot;, &quot;OK&quot;, &quot;Cancel&quot;,&#10;&#9;&#9;&#9;container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Vehicle information has been displayed.&quot;),&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Choose an action:&quot;),&#10;&#9;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Save to File&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;&#9;filename := fmt.Sprintf(&quot;vehicle_info_%s_%s.txt&quot;, account, time.Now().Format(&quot;2006-01-02_15-04-05&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;err := os.WriteFile(filename, []byte(vehicleInfoText), 0644)&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;failed to save file: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Saved&quot;, fmt.Sprintf(&quot;Vehicle information saved to %s&quot;, filename), myWindow)&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(vehicleInfoText)&#10;&#9;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;Vehicle information copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;&#9;),&#10;&#9;&#9;&#9;),&#10;&#9;&#9;&#9;func(confirmed bool) {&#10;&#9;&#9;&#9;&#9;// Dialog closed, no action needed&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;myWindow)&#10;&#9;})&#10;&#10;&#9;alarmBtn := widget.NewButton(&quot;GET DEVICE ALARMS&quot;, func() {&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please login first&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please select a device&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get the device ID based on selection&#10;&#9;&#9;var deviceID string&#10;&#9;&#9;if selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;} else if device, ok := deviceMap[selectedDevice]; ok {&#10;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get coordinate system selection&#10;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;}&#10;&#10;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;alarm fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;builder.WriteString(&quot;=== DEVICE ALARMS ===\n&quot;)&#10;&#10;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0))&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Status: %s\n&quot;, status))&#10;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Log alarms to file for future reference&#10;&#9;&#9;&#9;var alarmSlice []AlarmResponseAlarm&#10;&#9;&#9;&#9;for _, a := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;alarmSlice = append(alarmSlice, a)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;logAlarmsToFile(alarmSlice)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;// Add refresh button to continuously fetch alarms&#10;&#9;var refreshTicker *time.Ticker&#10;&#9;var stopRefresh chan bool&#10;&#9;var refreshBtn *widget.Button&#10;&#9;refreshBtn = widget.NewButton(&quot;AUTO REFRESH ALARMS&quot;, func() {&#10;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;// Stop auto-refresh&#10;&#9;&#9;&#9;stopRefresh &lt;- true&#10;&#9;&#9;&#9;refreshTicker = nil&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;AUTO REFRESH ALARMS&quot;)&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Auto-refresh&quot;, &quot;Auto-refresh stopped&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Start auto-refresh&#10;&#9;&#9;const timeoutSec = 5&#10;&#9;&#9;message := fmt.Sprintf(&quot;Start auto-refreshing alarms every %d seconds?&quot;, timeoutSec)&#10;&#10;&#9;&#9;dialog.ShowConfirm(&quot;Auto-refresh&quot;, message, func(start bool) {&#10;&#9;&#9;&#9;if !start {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Setup channels&#10;&#9;&#9;&#9;refreshTicker = time.NewTicker(time.Duration(timeoutSec) * time.Second)&#10;&#9;&#9;&#9;stopRefresh = make(chan bool)&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;STOP AUTO REFRESH&quot;)&#10;&#10;&#9;&#9;&#9;// Start refresh goroutine&#10;&#9;&#9;&#9;go func() {&#10;&#9;&#9;&#9;&#9;for {&#10;&#9;&#9;&#9;&#9;&#9;select {&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-refreshTicker.C:&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get device ID based on selection&#10;&#9;&#9;&#9;&#9;&#9;&#9;var deviceID string&#10;&#9;&#9;&#9;&#9;&#9;&#9;if deviceSelector.Selected == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if device, ok := deviceMap[deviceSelector.Selected]; ok {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get coordinate system&#10;&#9;&#9;&#9;&#9;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;&#9;&#9;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;&#9;&#9;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Fetch alarms&#10;&#9;&#9;&#9;&#9;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue // Skip this iteration on error&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Build output&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;=== AUTO REFRESH ALARMS (%s) ===\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;time.Now().Format(&quot;15:04:05&quot;)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI thread-safely&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI on main thread&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.SetText(builder.String())&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.Refresh()&#10;&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-stopRefresh:&#10;&#9;&#9;&#9;&#9;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;refreshTicker.Stop()&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}()&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTSP link generation button&#10;&#9;rtspBtn := widget.NewButton(&quot;Generate RTSP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTSP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTSP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTSP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTSP link&#10;&#9;&#9;&#9;rtspOptions := RTSPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtspLink := GenerateRTSPLink(rtspOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtspLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTSP Link Generated:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(rtspLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;RTSP link copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTSP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTMP link generation button&#10;&#9;rtmpBtn := widget.NewButton(&quot;Generate RTMP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTMP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTMP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTMP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTMP link&#10;&#9;&#9;&#9;rtmpOptions := RTMPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port for RTMP&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtmpLink := GenerateRTMPLink(rtmpOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtmpLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTMP URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy RTMP URL to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(rtmpLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;RTMP URL copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTMP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add HLS link generation button&#10;&#9;hlsBtn := widget.NewButton(&quot;Generate HLS Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for HLS parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure HLS Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;HLS Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the HLS link&#10;&#9;&#9;&#9;hlsOptions := HLSLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost:  serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort:  16604, // Default port for HLS&#10;&#9;&#9;&#9;&#9;JSession:    jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:     device.DID,&#10;&#9;&#9;&#9;&#9;Channel:     channelNum,&#10;&#9;&#9;&#9;&#9;Stream:      streamType,&#10;&#9;&#9;&#9;&#9;RequestType: 1, // Real-time video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;hlsLink := GenerateHLSLink(hlsOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(hlsLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;// Add HTML video player code&#10;&#9;&#9;&#9;htmlCode := fmt.Sprintf(`&lt;video controls preload=&quot;none&quot; width=&quot;352&quot; height=&quot;288&quot; data-setup=&quot;{}&quot;&gt;&#10;    &lt;source src=&quot;%s&quot; type=&quot;application/x-mpegURL&quot;&gt;&#10;&lt;/video&gt;`, hlsLink)&#10;&#10;&#9;&#9;&#9;htmlEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;htmlEntry.SetText(htmlCode)&#10;&#9;&#9;&#9;htmlEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HLS URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy HLS URL to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(hlsLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;HLS URL copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HTML Video Player Code:&quot;),&#10;&#9;&#9;&#9;&#9;htmlEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy HTML Code to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(htmlCode)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;HTML video player code copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;HLS Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Create the final UI layout with conditional visibility&#10;&#9;var uiElements []fyne.CanvasObject&#10;&#10;&#9;// Add basic login form&#10;&#9;uiElements = append(uiElements,&#10;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Account:&quot;),&#10;&#9;&#9;&#9;accountEntry,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Password:&quot;),&#10;&#9;&#9;&#9;passwordEntry,&#10;&#9;&#9;),&#10;&#9;)&#10;&#10;&#9;// Add login button if enabled&#10;&#9;if config.ShowLoginButton {&#10;&#9;&#9;uiElements = append(uiElements, loginBtn)&#10;&#9;}&#10;&#10;&#9;// Add device selector&#10;&#9;uiElements = append(uiElements, deviceSelector)&#10;&#10;&#9;// Create button row with only enabled buttons&#10;&#9;var buttons []fyne.CanvasObject&#10;&#9;if config.ShowVehicleInfoButton {&#10;&#9;&#9;buttons = append(buttons, vehicleInfoBtn)&#10;&#9;}&#10;&#9;if config.ShowDeviceAlarmsButton {&#10;&#9;&#9;buttons = append(buttons, alarmBtn)&#10;&#9;}&#10;&#9;if config.ShowAutoRefreshButton {&#10;&#9;&#9;buttons = append(buttons, refreshBtn)&#10;&#9;}&#10;&#9;if config.ShowRTSPButton {&#10;&#9;&#9;buttons = append(buttons, rtspBtn)&#10;&#9;}&#10;&#9;if config.ShowHLSButton {&#10;&#9;&#9;buttons = append(buttons, hlsBtn)&#10;&#9;}&#10;&#9;if config.ShowRTMPButton {&#10;&#9;&#9;buttons = append(buttons, rtmpBtn)&#10;&#9;}&#10;&#10;&#9;// Add button row if there are any buttons to show&#10;&#9;if len(buttons) &gt; 0 {&#10;&#9;&#9;// Dynamically adjust columns based on number of buttons&#10;&#9;&#9;cols := len(buttons)&#10;&#9;&#9;if cols &gt; 6 {&#10;&#9;&#9;&#9;cols = 6 // Maximum 6 columns&#10;&#9;&#9;}&#10;&#9;&#9;uiElements = append(uiElements, container.NewGridWithColumns(cols, buttons...))&#10;&#9;}&#10;&#10;&#9;// Add coordinate system selector&#10;&#9;uiElements = append(uiElements,&#10;&#9;&#9;widget.NewLabel(&quot;Coordinate System:&quot;),&#10;&#9;&#9;coordSystemSelector,&#10;&#9;)&#10;&#10;&#9;// Add save button if enabled&#10;&#9;if config.ShowSaveButton {&#10;&#9;&#9;uiElements = append(uiElements, saveBtn)&#10;&#9;}&#10;&#10;&#9;// Add output area&#10;&#9;uiElements = append(uiElements, output)&#10;&#10;&#9;content := container.NewVBox(uiElements...)&#10;&#10;&#9;myWindow.SetContent(content)&#10;&#9;myWindow.Resize(fyne.NewSize(800, 600))&#10;&#9;myWindow.ShowAndRun()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# CMSV API Project&#10;&#10;This project is a Go application for interacting with the CMSV8 API, providing a user interface for device management, vehicle information, and real-time monitoring.&#10;&#10;## Features&#10;- User login/logout&#10;- Retrieve user vehicle information&#10;- Get device online status&#10;- Get real-time device status&#10;- RTSP stream configuration for devices&#10;&#10;## API Endpoints&#10;See `api_description.md` for detailed API documentation, including request/response examples and error codes.&#10;&#10;## Requirements&#10;- Go 1.18+&#10;- Fyne UI library&#10;&#10;## Getting Started&#10;1. Clone the repository:&#10;   ```sh&#10;   git clone &lt;repo-url&gt;&#10;   cd cmsv_api&#10;   ```&#10;2. Install dependencies:&#10;   ```sh&#10;   go mod tidy&#10;   ```&#10;3. Run the application:&#10;   ```sh&#10;   go run main.go&#10;   ```&#10;&#10;## Usage&#10;- Launch the application and log in with your CMSV8 account.&#10;- Select a device to view or configure.&#10;- Use the UI to access vehicle and device information, and configure RTSP streams.&#10;&#10;## Documentation&#10;- API details: [api_description.md](api_description.md)&#10;- Main application logic: [main.go](main.go)&#10;&#10;## License&#10;This project is licensed under the MIT License.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api_description.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api_description.md" />
              <option name="originalContent" value="# API Documentation&#10;&#10;## User Login&#10;&#10;### Interface Description&#10;User Login&#10;&#10;The credential obtained by this interface is used for subsequent access to the business interface.&#10;The validity period of the voucher is **4 hours**. The voucher can be reused during the validity period, and the validity time will be refreshed if the interface is continuously used. Do not refresh the voucher frequently.&#10;&#10;**NOTE:**&#10;The second login of the same account will not invalidate the jsession generated during the first login.&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_login.action?account=cmsv6&amp;password=cmsv6&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example | Description     |&#10;|---------------|---------------|------|---------|----------------|&#10;| account       | string        | Yes  | cmsv6   | User account   |&#10;| password      | string        | Yes  | cmsv6   | User password  |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| jsession       | string        | Session Number        |&#10;| pri            | string        | User Permissions      |&#10;| account_name   | string        | User Account          |&#10;| JSESSIONID     | string        | Session Number        |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;jsession&quot;: &quot;66d754dd7f41473dbd2&quot;,&#10;  &quot;pri&quot;: &quot;,1,2,21,24,25,26,27,28,29,210,211,212,213,214,241,242,215,216,217,676,282,283,284,285,218,219,220,221,222,223,224,225,226,23,227,228,229,230,231,232,233,234,22,235,236,257,258,259,260,237,238,671,672,239,240,243,244,245,248,261,262,264,263,265,266,267,268,272,3,31,32,33,34,35,36,37,38,39,40,41,310,311,318,319,320,321,4,41,42,43,44,5,6,7,611,612,613,621,622,623,624,625,626,627,628,629,630,631,641,651,652,653,654,655,656,657,658,659,660,661,663,664,997,998,7,121,122,123,124,125,126,127,128,129,950,681,607,608,615,616,617,290,291,292,293,294,295,296,297,298,299,130,650,677,831,888,682,683,684,685,686,1018,1019,1020,1100,305,690,1023,810,820,841,300,2000,2001,2002,2003,2004,286,287,288,289,275,276,277,16,161,162,163,165,166,274,800,15,151,152,153,154,155,156,157,158,159,160,270,271,273,278,279,281,1511,5- 1,5- 41,5- 42,5- 4,5- 11,5- 14,5- 5,5- 58,5- 39,5- 40,5- 15,5- 55,5- 56,5- 31,5- 19,5- 25,5- 6,5- 20,5- 21,5- 17,5- 22,5- 2,5- 3,5- 7,5- 12,5- 27,5- 28,5- 29,5- 49,5- 34,5- 36,5- 52,5- 46,5- 47,5- 50,5- 13,5- 16,5- 24,5- 26,5- 32,5- 33,5- 43,5- 44,5- 45,5- 48,5- 53,5- 9,5- 8,5- 10,5- 30,5- 37,5- 18,5- 23,5- 38,5- 51,5- 54,5- 57,5- 60,50,501,502,503,504,505,506,507,100,18,19,20,164,167,168,169,170,171,172,173,174,175,176,177,178,179,900,906,901,902,908,918,919,920,921,922,923,909,910,46,47,48,49,643,644,646,903,904,905,911,850,851,852,853,312,9,91,92,93,94,95,96,97,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,313,665,666,667,668,669,670,673,674,675,55,551,552,553,554,555,556,557,558,559,560,561,562,1017,60,601,602,603,604,605,606,609,610,619,632,633,634,635,636,637,638,642,640,6001,645,6002,6003,6004,614,618,620,889,639,2050,- 1,- 2,2005,1021,1022 ,&quot;,&#10;  &quot;account_name&quot;: &quot;cmsv6&quot;,&#10;  &quot;JSESSIONID&quot;: &quot;66d754dd7f41473dbd2&quot;&#10;}&#10;```&#10;&#10;## User Logoff&#10;&#10;### Interface Description&#10;User Logoff Login&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_logout.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Description     |&#10;|---------------|---------------|------|--------------------------|----------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number  |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Parameter meaning |&#10;|---------------|---------------|-------------------|&#10;| result        | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0&#10;}&#10;```&#10;&#10;## Get user vehicle information&#10;&#10;### Interface Description&#10;Get user vehicle information&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_queryUserVehicle.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| companys       | array         | List of companies/fleets |&#10;| id             | number        | Vehicle ID or company ID |&#10;| nm             | string        | License plate number or company name |&#10;| pId            | number        | Company or fleet ID |&#10;| vehicles       | array         | List of vehicles |&#10;| ic             | number        | Number of IO |&#10;| pid            | number        | Equipment company |&#10;| pnm            | string        | Company name |&#10;| abbr           | string        | Abbreviation |&#10;| dl             | array         | Device list |&#10;| ...            | ...           | Many more fields as described above |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;companys&quot;: [&#10;    { &quot;id&quot;: 3, &quot;nm&quot;: &quot;test11&quot;, &quot;pId&quot;: 1 },&#10;    { &quot;id&quot;: 4, &quot;nm&quot;: &quot;testce&quot;, &quot;pId&quot;: 3 },&#10;    { &quot;id&quot;: 1, &quot;nm&quot;: &quot;test&quot;, &quot;pId&quot;: 10 }&#10;  ],&#10;  &quot;vehicles&quot;: [&#10;    {&#10;      &quot;id&quot;: 28979,&#10;      &quot;nm&quot;: &quot;S66666&quot;,&#10;      &quot;ic&quot;: 6,&#10;      &quot;pid&quot;: 1,&#10;      &quot;pnm&quot;: &quot;test&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;dl&quot;: [&#10;        {&#10;          &quot;id&quot;: &quot;013300000001&quot;,&#10;          &quot;pid&quot;: 1,&#10;          &quot;dt&quot;: null,&#10;          &quot;cc&quot;: 4,&#10;          &quot;cn&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;          &quot;ic&quot;: 0,&#10;          &quot;io&quot;: &quot;&quot;,&#10;          &quot;outc&quot;: null,&#10;          &quot;outn&quot;: null,&#10;          &quot;tc&quot;: 0,&#10;          &quot;tn&quot;: &quot;&quot;,&#10;          &quot;sim&quot;: null,&#10;          &quot;md&quot;: 1513,&#10;          &quot;st&quot;: null,&#10;          &quot;nflt&quot;: null,&#10;          &quot;us&quot;: 0,&#10;          &quot;sdc&quot;: null,&#10;          &quot;did&quot;: 33,&#10;          &quot;vt&quot;: null,&#10;          &quot;isb&quot;: null,&#10;          &quot;srl&quot;: &quot;&quot;,&#10;          &quot;ptt&quot;: null,&#10;          &quot;gps&quot;: null,&#10;          &quot;fp&quot;: null,&#10;          &quot;tkc&quot;: null,&#10;          &quot;ist&quot;: &quot;2024-09-09 16:19:52&quot;,&#10;          &quot;ol&quot;: null,&#10;          &quot;lt&quot;: null&#10;        }&#10;      ],&#10;      &quot;pt&quot;: &quot;黄牌&quot;,&#10;      &quot;vehiColor&quot;: null,&#10;      &quot;status&quot;: 0,&#10;      &quot;vehiBand&quot;: &quot;&quot;,&#10;      &quot;vehiType&quot;: null,&#10;      &quot;vehiUse&quot;: &quot;&quot;,&#10;      &quot;dateProduct&quot;: -28800000,&#10;      &quot;icon&quot;: 6,&#10;      &quot;chnCount&quot;: 4,&#10;      &quot;chnName&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;      &quot;ioInCount&quot;: 0,&#10;      &quot;ioInName&quot;: &quot;&quot;,&#10;      &quot;ioOutCount&quot;: 0,&#10;      &quot;ioOutName&quot;: &quot;&quot;,&#10;      &quot;tempCount&quot;: 1,&#10;      &quot;tempName&quot;: &quot;0|TEMP_1&quot;,&#10;      &quot;payEnable&quot;: null,&#10;      &quot;payBegin&quot;: 1725811200000,&#10;      &quot;payEnd&quot;: null,&#10;      &quot;payMonth&quot;: null,&#10;      &quot;payDelayDay&quot;: 0,&#10;      &quot;safeDate&quot;: null,&#10;      &quot;drivingNum&quot;: &quot;&quot;,&#10;      &quot;drivingDate&quot;: -28800000,&#10;      &quot;operatingNum&quot;: &quot;&quot;,&#10;      &quot;operatingDate&quot;: -28800000,&#10;      &quot;repairDate&quot;: null,&#10;      &quot;stlTm&quot;: 1725811200000,&#10;      &quot;moreId&quot;: null,&#10;      &quot;vehicleGrade&quot;: &quot;&quot;,&#10;      &quot;approvedNumber&quot;: null,&#10;      &quot;approvedLoad&quot;: null,&#10;      &quot;vehicleType&quot;: 0,&#10;      &quot;installTire&quot;: 0,&#10;      &quot;tireBrand&quot;: &quot;&quot;,&#10;      &quot;tireModel&quot;: &quot;&quot;,&#10;      &quot;installAdas&quot;: 0,&#10;      &quot;adasBrand&quot;: &quot;&quot;,&#10;      &quot;adasModel&quot;: &quot;&quot;,&#10;      &quot;installDsm&quot;: 0,&#10;      &quot;dsmBrand&quot;: &quot;&quot;,&#10;      &quot;dsmModel&quot;: &quot;&quot;,&#10;      &quot;installBlind&quot;: 0,&#10;      &quot;blindBrand&quot;: &quot;&quot;,&#10;      &quot;blindModel&quot;: &quot;&quot;,&#10;      &quot;installLca&quot;: 0,&#10;      &quot;lcaBrand&quot;: &quot;&quot;,&#10;      &quot;lcaModel&quot;: &quot;&quot;,&#10;      &quot;installOM&quot;: 0,&#10;      &quot;engineNum&quot;: &quot;&quot;,&#10;      &quot;frameNum&quot;: &quot;&quot;,&#10;      &quot;ownerName&quot;: null,&#10;      &quot;lineId&quot;: null,&#10;      &quot;linkPeople&quot;: &quot;&quot;,&#10;      &quot;linkPhone&quot;: &quot;&quot;,&#10;      &quot;datePurchase&quot;: -28800000,&#10;      &quot;dateAnnualSurvey&quot;: -28800000,&#10;      &quot;speedLimit&quot;: 120,&#10;      &quot;linesOperation&quot;: &quot;&quot;,&#10;      &quot;operatingId&quot;: null,&#10;      &quot;industry&quot;: null,&#10;      &quot;carType&quot;: null,&#10;      &quot;carPlace&quot;: null,&#10;      &quot;param1&quot;: &quot;&quot;,&#10;      &quot;param2&quot;: &quot;&quot;,&#10;      &quot;param3&quot;: &quot;&quot;,&#10;      &quot;param4&quot;: &quot;&quot;,&#10;      &quot;roleId&quot;: null,&#10;      &quot;area&quot;: &quot;&quot;,&#10;      &quot;code&quot;: &quot;&quot;,&#10;      &quot;nuclearAuthority&quot;: &quot;&quot;,&#10;      &quot;legal&quot;: &quot;&quot;,&#10;      &quot;legalPhone&quot;: &quot;&quot;,&#10;      &quot;legalAddress&quot;: &quot;&quot;,&#10;      &quot;introduction&quot;: &quot;&quot;,&#10;      &quot;serialNum&quot;: null,&#10;      &quot;loginPwd&quot;: null,&#10;      &quot;allowLogin&quot;: 0,&#10;      &quot;mileCoefficient&quot;: null,&#10;      &quot;remark&quot;: &quot;&quot;,&#10;      &quot;vehicleModel&quot;: &quot;&quot;,&#10;      &quot;engineModel&quot;: &quot;&quot;,&#10;      &quot;axesNumber&quot;: null,&#10;      &quot;totalWeight&quot;: null,&#10;      &quot;quasiTractionMass&quot;: null,&#10;      &quot;longOutlineDimensions&quot;: null,&#10;      &quot;wideOutlineDimensions&quot;: null,&#10;      &quot;highOutlineDimensions&quot;: null,&#10;      &quot;longInsideDimension&quot;: null,&#10;      &quot;wideInnerDimensions&quot;: null,&#10;      &quot;highInsideDimensions&quot;: null,&#10;      &quot;ombrand&quot;: &quot;&quot;,&#10;      &quot;ommodel&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Common Error Codes&#10;&#10;### Web Error Code Description&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 1          | The username or password is invalid |&#10;| 2          | The username or password is invalid |&#10;| 3          | User disabled |&#10;| 4          | The user has expired |&#10;| 5          | Session does not exist |&#10;| 6          | System exception |&#10;| 7          | The request parameters are incorrect |&#10;| 8          | No permission to operate the vehicle or equipment |&#10;| 9          | The start time must not be greater than the end time |&#10;| 10         | Query time out of range |&#10;| 11         | The video download task already exists |&#10;| 12         | Account already exists |&#10;| 13         | No permission to operate |&#10;| 14         | Number of managed devices (maximum number of additions reached) |&#10;| 15         | Device already exists |&#10;| 16         | Vehicle already exists |&#10;| 17         | Device already in use |&#10;| 18         | Vehicle not present |&#10;| 19         | Device does not exist |&#10;| 20         | The device does not belong to the current company |&#10;| 21         | The number of registered devices does not match. Check whether the number of registered devices exceeds the number of registered devices. |&#10;| 24         | Network connection exception |&#10;| 25         | Rule name already exists |&#10;| 26         | Rule does not exist |&#10;| 27         | Information does not exist |&#10;| 28         | Session number already exists |&#10;| 29         | Company does not exist |&#10;| 32         | Device not online |&#10;| 34         | Single sign-on user, already logged in |&#10;&#10;### Server Error Code Description (return parameters include: &quot;cmsserver&quot;:1)&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 2          | The username or password is invalid |&#10;| 3          | Invalid username or password |&#10;| 4          | User disabled |&#10;| 5          | Information does not exist |&#10;| 6          | Unknown error |&#10;| 7          | Name already in use |&#10;| 21         | Device does not exist |&#10;| 22         | No feedback received from the device |&#10;| 23         | Device not online |&#10;| 26         | Device connection lost |&#10;| 27         | No storage path defined |&#10;&#10;## Get device online status&#10;&#10;### Interface Description&#10;Get device online status&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_getDeviceOlStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&amp;status=1&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Required | Example         | Parameter meaning |&#10;|---------------|---------------|----------|-----------------|-------------------|&#10;| jsession      | string        | Yes      | 66d754dd7f41473dbd2 | Session number    |&#10;| devIdno       | string        | No       | 01330000001     | Device number(s), comma-separated. If empty, license plate number is used. |&#10;| vehiIdno      | string        | No       | S66666          | License plate number(s), comma-separated. If empty, queries all authorized equipment for the account. |&#10;| status        | number        | No       | 1               | Online status: 0 not online, 1 online, empty queries all. |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|---------------|---------------|----------------------|&#10;| result        | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| onlines       | array         | List of device online status information |&#10;| did           | string        | Equipment number |&#10;| vid           | string        | License plate number (empty if queried by equipment number) |&#10;| online        | number        | Online status: 1 means online, otherwise not online |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;onlines&quot;: [&#10;    {&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;online&quot;: 1,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;did&quot;: &quot;013300000001&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;" />
              <option name="updatedContent" value="# API Documentation&#10;&#10;## User Login&#10;&#10;### Interface Description&#10;User Login&#10;&#10;The credential obtained by this interface is used for subsequent access to the business interface.&#10;The validity period of the voucher is **4 hours**. The voucher can be reused during the validity period, and the validity time will be refreshed if the interface is continuously used. Do not refresh the voucher frequently.&#10;&#10;**NOTE:**&#10;The second login of the same account will not invalidate the jsession generated during the first login.&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_login.action?account=cmsv6&amp;password=cmsv6&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example | Description     |&#10;|---------------|---------------|------|---------|----------------|&#10;| account       | string        | Yes  | cmsv6   | User account   |&#10;| password      | string        | Yes  | cmsv6   | User password  |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| jsession       | string        | Session Number        |&#10;| pri            | string        | User Permissions      |&#10;| account_name   | string        | User Account          |&#10;| JSESSIONID     | string        | Session Number        |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;jsession&quot;: &quot;66d754dd7f41473dbd2&quot;,&#10;  &quot;pri&quot;: &quot;,1,2,21,24,25,26,27,28,29,210,211,212,213,214,241,242,215,216,217,676,282,283,284,285,218,219,220,221,222,223,224,225,226,23,227,228,229,230,231,232,233,234,22,235,236,257,258,259,260,237,238,671,672,239,240,243,244,245,248,261,262,264,263,265,266,267,268,272,3,31,32,33,34,35,36,37,38,39,40,41,310,311,318,319,320,321,4,41,42,43,44,5,6,7,611,612,613,621,622,623,624,625,626,627,628,629,630,631,641,651,652,653,654,655,656,657,658,659,660,661,663,664,997,998,7,121,122,123,124,125,126,127,128,129,950,681,607,608,615,616,617,290,291,292,293,294,295,296,297,298,299,130,650,677,831,888,682,683,684,685,686,1018,1019,1020,1100,305,690,1023,810,820,841,300,2000,2001,2002,2003,2004,286,287,288,289,275,276,277,16,161,162,163,165,166,274,800,15,151,152,153,154,155,156,157,158,159,160,270,271,273,278,279,281,1511,5- 1,5- 41,5- 42,5- 4,5- 11,5- 14,5- 5,5- 58,5- 39,5- 40,5- 15,5- 55,5- 56,5- 31,5- 19,5- 25,5- 6,5- 20,5- 21,5- 17,5- 22,5- 2,5- 3,5- 7,5- 12,5- 27,5- 28,5- 29,5- 49,5- 34,5- 36,5- 52,5- 46,5- 47,5- 50,5- 13,5- 16,5- 24,5- 26,5- 32,5- 33,5- 43,5- 44,5- 45,5- 48,5- 53,5- 9,5- 8,5- 10,5- 30,5- 37,5- 18,5- 23,5- 38,5- 51,5- 54,5- 57,5- 60,50,501,502,503,504,505,506,507,100,18,19,20,164,167,168,169,170,171,172,173,174,175,176,177,178,179,900,906,901,902,908,918,919,920,921,922,923,909,910,46,47,48,49,643,644,646,903,904,905,911,850,851,852,853,312,9,91,92,93,94,95,96,97,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,313,665,666,667,668,669,670,673,674,675,55,551,552,553,554,555,556,557,558,559,560,561,562,1017,60,601,602,603,604,605,606,609,610,619,632,633,634,635,636,637,638,642,640,6001,645,6002,6003,6004,614,618,620,889,639,2050,- 1,- 2,2005,1021,1022 ,&quot;,&#10;  &quot;account_name&quot;: &quot;cmsv6&quot;,&#10;  &quot;JSESSIONID&quot;: &quot;66d754dd7f41473dbd2&quot;&#10;}&#10;```&#10;&#10;## User Logoff&#10;&#10;### Interface Description&#10;User Logoff Login&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_logout.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Description     |&#10;|---------------|---------------|------|--------------------------|----------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number  |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Parameter meaning |&#10;|---------------|---------------|-------------------|&#10;| result        | number        | The interface status code: 0 is normal, other values indicate errors. (See Error Code Description) |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0&#10;}&#10;```&#10;&#10;## Get user vehicle information&#10;&#10;### Interface Description&#10;Get user vehicle information&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_queryUserVehicle.action?jsession=66d754dd7f41473dbd2&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Must | Example                  | Parameter meaning |&#10;|---------------|---------------|------|--------------------------|-------------------|&#10;| jsession      | string        | Yes  | 66d754dd7f41473dbd2      | Session number    |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|----------------|---------------|----------------------|&#10;| result         | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| companys       | array         | List of companies/fleets |&#10;| id             | number        | Vehicle ID or company ID |&#10;| nm             | string        | License plate number or company name |&#10;| pId            | number        | Company or fleet ID |&#10;| vehicles       | array         | List of vehicles |&#10;| ic             | number        | Number of IO |&#10;| pid            | number        | Equipment company |&#10;| pnm            | string        | Company name |&#10;| abbr           | string        | Abbreviation |&#10;| dl             | array         | Device list |&#10;| ...            | ...           | Many more fields as described above |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;companys&quot;: [&#10;    { &quot;id&quot;: 3, &quot;nm&quot;: &quot;test11&quot;, &quot;pId&quot;: 1 },&#10;    { &quot;id&quot;: 4, &quot;nm&quot;: &quot;testce&quot;, &quot;pId&quot;: 3 },&#10;    { &quot;id&quot;: 1, &quot;nm&quot;: &quot;test&quot;, &quot;pId&quot;: 10 }&#10;  ],&#10;  &quot;vehicles&quot;: [&#10;    {&#10;      &quot;id&quot;: 28979,&#10;      &quot;nm&quot;: &quot;S66666&quot;,&#10;      &quot;ic&quot;: 6,&#10;      &quot;pid&quot;: 1,&#10;      &quot;pnm&quot;: &quot;test&quot;,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;dl&quot;: [&#10;        {&#10;          &quot;id&quot;: &quot;013300000001&quot;,&#10;          &quot;pid&quot;: 1,&#10;          &quot;dt&quot;: null,&#10;          &quot;cc&quot;: 4,&#10;          &quot;cn&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;          &quot;ic&quot;: 0,&#10;          &quot;io&quot;: &quot;&quot;,&#10;          &quot;outc&quot;: null,&#10;          &quot;outn&quot;: null,&#10;          &quot;tc&quot;: 0,&#10;          &quot;tn&quot;: &quot;&quot;,&#10;          &quot;sim&quot;: null,&#10;          &quot;md&quot;: 1513,&#10;          &quot;st&quot;: null,&#10;          &quot;nflt&quot;: null,&#10;          &quot;us&quot;: 0,&#10;          &quot;sdc&quot;: null,&#10;          &quot;did&quot;: 33,&#10;          &quot;vt&quot;: null,&#10;          &quot;isb&quot;: null,&#10;          &quot;srl&quot;: &quot;&quot;,&#10;          &quot;ptt&quot;: null,&#10;          &quot;gps&quot;: null,&#10;          &quot;fp&quot;: null,&#10;          &quot;tkc&quot;: null,&#10;          &quot;ist&quot;: &quot;2024-09-09 16:19:52&quot;,&#10;          &quot;ol&quot;: null,&#10;          &quot;lt&quot;: null&#10;        }&#10;      ],&#10;      &quot;pt&quot;: &quot;黄牌&quot;,&#10;      &quot;vehiColor&quot;: null,&#10;      &quot;status&quot;: 0,&#10;      &quot;vehiBand&quot;: &quot;&quot;,&#10;      &quot;vehiType&quot;: null,&#10;      &quot;vehiUse&quot;: &quot;&quot;,&#10;      &quot;dateProduct&quot;: -28800000,&#10;      &quot;icon&quot;: 6,&#10;      &quot;chnCount&quot;: 4,&#10;      &quot;chnName&quot;: &quot;CH1,CH2,CH3,CH4&quot;,&#10;      &quot;ioInCount&quot;: 0,&#10;      &quot;ioInName&quot;: &quot;&quot;,&#10;      &quot;ioOutCount&quot;: 0,&#10;      &quot;ioOutName&quot;: &quot;&quot;,&#10;      &quot;tempCount&quot;: 1,&#10;      &quot;tempName&quot;: &quot;0|TEMP_1&quot;,&#10;      &quot;payEnable&quot;: null,&#10;      &quot;payBegin&quot;: 1725811200000,&#10;      &quot;payEnd&quot;: null,&#10;      &quot;payMonth&quot;: null,&#10;      &quot;payDelayDay&quot;: 0,&#10;      &quot;safeDate&quot;: null,&#10;      &quot;drivingNum&quot;: &quot;&quot;,&#10;      &quot;drivingDate&quot;: -28800000,&#10;      &quot;operatingNum&quot;: &quot;&quot;,&#10;      &quot;operatingDate&quot;: -28800000,&#10;      &quot;repairDate&quot;: null,&#10;      &quot;stlTm&quot;: 1725811200000,&#10;      &quot;moreId&quot;: null,&#10;      &quot;vehicleGrade&quot;: &quot;&quot;,&#10;      &quot;approvedNumber&quot;: null,&#10;      &quot;approvedLoad&quot;: null,&#10;      &quot;vehicleType&quot;: 0,&#10;      &quot;installTire&quot;: 0,&#10;      &quot;tireBrand&quot;: &quot;&quot;,&#10;      &quot;tireModel&quot;: &quot;&quot;,&#10;      &quot;installAdas&quot;: 0,&#10;      &quot;adasBrand&quot;: &quot;&quot;,&#10;      &quot;adasModel&quot;: &quot;&quot;,&#10;      &quot;installDsm&quot;: 0,&#10;      &quot;dsmBrand&quot;: &quot;&quot;,&#10;      &quot;dsmModel&quot;: &quot;&quot;,&#10;      &quot;installBlind&quot;: 0,&#10;      &quot;blindBrand&quot;: &quot;&quot;,&#10;      &quot;blindModel&quot;: &quot;&quot;,&#10;      &quot;installLca&quot;: 0,&#10;      &quot;lcaBrand&quot;: &quot;&quot;,&#10;      &quot;lcaModel&quot;: &quot;&quot;,&#10;      &quot;installOM&quot;: 0,&#10;      &quot;engineNum&quot;: &quot;&quot;,&#10;      &quot;frameNum&quot;: &quot;&quot;,&#10;      &quot;ownerName&quot;: null,&#10;      &quot;lineId&quot;: null,&#10;      &quot;linkPeople&quot;: &quot;&quot;,&#10;      &quot;linkPhone&quot;: &quot;&quot;,&#10;      &quot;datePurchase&quot;: -28800000,&#10;      &quot;dateAnnualSurvey&quot;: -28800000,&#10;      &quot;speedLimit&quot;: 120,&#10;      &quot;linesOperation&quot;: &quot;&quot;,&#10;      &quot;operatingId&quot;: null,&#10;      &quot;industry&quot;: null,&#10;      &quot;carType&quot;: null,&#10;      &quot;carPlace&quot;: null,&#10;      &quot;param1&quot;: &quot;&quot;,&#10;      &quot;param2&quot;: &quot;&quot;,&#10;      &quot;param3&quot;: &quot;&quot;,&#10;      &quot;param4&quot;: &quot;&quot;,&#10;      &quot;roleId&quot;: null,&#10;      &quot;area&quot;: &quot;&quot;,&#10;      &quot;code&quot;: &quot;&quot;,&#10;      &quot;nuclearAuthority&quot;: &quot;&quot;,&#10;      &quot;legal&quot;: &quot;&quot;,&#10;      &quot;legalPhone&quot;: &quot;&quot;,&#10;      &quot;legalAddress&quot;: &quot;&quot;,&#10;      &quot;introduction&quot;: &quot;&quot;,&#10;      &quot;serialNum&quot;: null,&#10;      &quot;loginPwd&quot;: null,&#10;      &quot;allowLogin&quot;: 0,&#10;      &quot;mileCoefficient&quot;: null,&#10;      &quot;remark&quot;: &quot;&quot;,&#10;      &quot;vehicleModel&quot;: &quot;&quot;,&#10;      &quot;engineModel&quot;: &quot;&quot;,&#10;      &quot;axesNumber&quot;: null,&#10;      &quot;totalWeight&quot;: null,&#10;      &quot;quasiTractionMass&quot;: null,&#10;      &quot;longOutlineDimensions&quot;: null,&#10;      &quot;wideOutlineDimensions&quot;: null,&#10;      &quot;highOutlineDimensions&quot;: null,&#10;      &quot;longInsideDimension&quot;: null,&#10;      &quot;wideInnerDimensions&quot;: null,&#10;      &quot;highInsideDimensions&quot;: null,&#10;      &quot;ombrand&quot;: &quot;&quot;,&#10;      &quot;ommodel&quot;: &quot;&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Common Error Codes&#10;&#10;### Web Error Code Description&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 1          | The username or password is invalid |&#10;| 2          | The username or password is invalid |&#10;| 3          | User disabled |&#10;| 4          | The user has expired |&#10;| 5          | Session does not exist |&#10;| 6          | System exception |&#10;| 7          | The request parameters are incorrect |&#10;| 8          | No permission to operate the vehicle or equipment |&#10;| 9          | The start time must not be greater than the end time |&#10;| 10         | Query time out of range |&#10;| 11         | The video download task already exists |&#10;| 12         | Account already exists |&#10;| 13         | No permission to operate |&#10;| 14         | Number of managed devices (maximum number of additions reached) |&#10;| 15         | Device already exists |&#10;| 16         | Vehicle already exists |&#10;| 17         | Device already in use |&#10;| 18         | Vehicle not present |&#10;| 19         | Device does not exist |&#10;| 20         | The device does not belong to the current company |&#10;| 21         | The number of registered devices does not match. Check whether the number of registered devices exceeds the number of registered devices. |&#10;| 24         | Network connection exception |&#10;| 25         | Rule name already exists |&#10;| 26         | Rule does not exist |&#10;| 27         | Information does not exist |&#10;| 28         | Session number already exists |&#10;| 29         | Company does not exist |&#10;| 32         | Device not online |&#10;| 34         | Single sign-on user, already logged in |&#10;&#10;### Server Error Code Description (return parameters include: &quot;cmsserver&quot;:1)&#10;| Error Code | Description |&#10;|------------|-------------|&#10;| 2          | The username or password is invalid |&#10;| 3          | Invalid username or password |&#10;| 4          | User disabled |&#10;| 5          | Information does not exist |&#10;| 6          | Unknown error |&#10;| 7          | Name already in use |&#10;| 21         | Device does not exist |&#10;| 22         | No feedback received from the device |&#10;| 23         | Device not online |&#10;| 26         | Device connection lost |&#10;| 27         | No storage path defined |&#10;&#10;## Get device online status&#10;&#10;### Interface Description&#10;Get device online status&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_getDeviceOlStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&amp;status=1&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Required | Example         | Parameter meaning |&#10;|---------------|---------------|----------|-----------------|-------------------|&#10;| jsession      | string        | Yes      | 66d754dd7f41473dbd2 | Session number    |&#10;| devIdno       | string        | No       | 01330000001     | Device number(s), comma-separated. If empty, license plate number is used. |&#10;| vehiIdno      | string        | No       | S66666          | License plate number(s), comma-separated. If empty, queries all authorized equipment for the account. |&#10;| status        | number        | No       | 1               | Online status: 0 not online, 1 online, empty queries all. |&#10;&#10;### Return Parameters&#10;| Parameter Name | Parameter Type | Meaning of Parameters |&#10;|---------------|---------------|----------------------|&#10;| result        | number        | Interface status code, 0 is normal, other values indicate errors. (See Error Code Description) |&#10;| onlines       | array         | List of device online status information |&#10;| did           | string        | Equipment number |&#10;| vid           | string        | License plate number (empty if queried by equipment number) |&#10;| online        | number        | Online status: 1 means online, otherwise not online |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;onlines&quot;: [&#10;    {&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;online&quot;: 1,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;did&quot;: &quot;013300000001&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Get real-time device status&#10;&#10;### Interface Description&#10;Get real-time device status&#10;&#10;### Request Example&#10;```&#10;https://v7.cmsv8.com/StandardApiAction_getDeviceStatus.action?jsession=66d754dd7f41473dbd2&amp;vehiIdno=S66666&#10;```&#10;&#10;### Request Parameters&#10;| Parameter name | Parameter type | Required | Example                | Parameter meaning |&#10;|---------------|---------------|----------|------------------------|-------------------|&#10;| jsession      | string        | Yes      | 66d754dd7f41473dbd2    | Session number    |&#10;| devIdno       | string        | No       | 01330000001,01330000002| Device number(s), comma-separated. If empty, license plate number is used. |&#10;| vehiIdno      | string        | No       | S66666                 | License plate number(s), comma-separated. If both are blank, queries all authorized devices of the account. |&#10;| geoaddress    | number        | No       | 0                      | 1: provide geographic location resolution, otherwise not resolved |&#10;| driver        | number        | No       | 1                      | 1: query driver info, other/not passed: not queried |&#10;| toMap         | number        | No       | 0                      | 0: WGS84, 1: Google (gj02), 2: Baidu (bd09) |&#10;| language      | string        | No       | en                     | Language for longitude/latitude analysis (zh for Chinese) |&#10;&#10;### Return Parameters&#10;| Parameter name | Parameter type | Description |&#10;|---------------|---------------|-------------|&#10;| id            | string        | Device number |&#10;| vid           | string        | License plate |&#10;| lng           | number        | Longitude (divide by 1,000,000 for true value) |&#10;| lat           | number        | Latitude (divide by 1,000,000 for true value) |&#10;| ft            | number        | Type of manufacturer |&#10;| sp            | number        | Speed (km/h, divide by 10) |&#10;| ol            | number        | Online status: 1 means online, otherwise not online |&#10;| gt            | string        | Locate upload time |&#10;| pt            | number        | Communication protocol type |&#10;| dt            | number        | Hard disk type: 1 SD card, 2 hard disk, 3 SSD card |&#10;| ac            | number        | Audio type |&#10;| net           | number        | Network type: 0 3G, 1 WIFI, 2 wired, 3 4G, 4 5G |&#10;| gw            | string        | Gateway server number |&#10;| s1-s4         | number        | Device status description (see details) |&#10;| t1-t4         | number        | Temperature sensors 1-4 |&#10;| hx            | number        | North direction (0-360 degrees) |&#10;| mlng          | string        | Converted longitude |&#10;| mlat          | string        | Converted latitude |&#10;| pk            | number        | Parking duration (seconds) |&#10;| lc            | number        | Mileage (meters) |&#10;| yl            | number        | Oil quantity (liters, divide by 100) |&#10;| viceYl        | number        | Secondary oil quantity (liters, divide by 100) |&#10;| ps            | string        | Resolved geographic location or (converted longitude, latitude) |&#10;| tsp           | number        | Tachograph speed (km/h, divide by 10) |&#10;| dn            | string        | Driver name |&#10;| jn            | string        | Driver certificate code |&#10;| lt            | number        | Login type: 0-linux, 1-windows, 2-web, 3-Android, 4-ios |&#10;| ust           | number        | Usage status: 0 normal, 1 maintenance, 2 disabled, 3 overdue |&#10;| sn            | number        | Number of satellites |&#10;| lg            | number        | 2: long positioning (see 808-2019 protocol) |&#10;| rt            | string        | Server time to receive location (valid when lg=2) |&#10;| ...           | ...           | Many more fields as described above |&#10;&#10;### Return Example&#10;```&#10;{&#10;  &quot;result&quot;: 0,&#10;  &quot;status&quot;: [&#10;    {&#10;      &quot;id&quot;: &quot;013300000001&quot;,&#10;      &quot;net&quot;: 3,&#10;      &quot;gw&quot;: &quot;G1&quot;,&#10;      &quot;ol&quot;: 1,&#10;      &quot;s1&quot;: 805309827,&#10;      &quot;s2&quot;: 20480,&#10;      &quot;s3&quot;: 65280,&#10;      &quot;s4&quot;: 0,&#10;      &quot;t1&quot;: 0,&#10;      &quot;t2&quot;: 0,&#10;      &quot;t3&quot;: 0,&#10;      &quot;t4&quot;: 0,&#10;      &quot;yl&quot;: 0,&#10;      &quot;sp&quot;: 0,&#10;      &quot;hx&quot;: 0,&#10;      &quot;lng&quot;: 113712944,&#10;      &quot;lat&quot;: 23004510,&#10;      &quot;mlng&quot;: &quot;113.718131&quot;,&#10;      &quot;mlat&quot;: &quot;23.001755&quot;,&#10;      &quot;ps&quot;: &quot;23.004510,113.712944&quot;,&#10;      &quot;pk&quot;: 0,&#10;      &quot;lc&quot;: 0,&#10;      &quot;gt&quot;: &quot;2024-12-07 11:58:30.0&quot;,&#10;      &quot;pt&quot;: 6,&#10;      &quot;dt&quot;: 2,&#10;      &quot;ac&quot;: 0,&#10;      &quot;ft&quot;: 0,&#10;      &quot;vid&quot;: &quot;S66666&quot;,&#10;      &quot;lt&quot;: 0,&#10;      &quot;tsp&quot;: 0,&#10;      &quot;abbr&quot;: &quot;&quot;,&#10;      &quot;lg&quot;: 2,&#10;      &quot;sn&quot;: 0,&#10;      &quot;viceYl&quot;: 0&#10;      // ...other fields...&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;### Map Example&#10;&#10;**URL:**&#10;```&#10;https://v7.cmsv8.com/808gps/open/map/vehicleMap.html?jsession=66d754dd7f41473dbd2&amp;devIdno=013300000001&amp;lang=en&#10;```&#10;&#10;**Parameter Description**&#10;| Parameter name | Parameter type | Required | Example           | Parameter meaning |&#10;|---------------|---------------|----------|-------------------|-------------------|&#10;| jsession      | string        | No       | 66d754dd7f41473dbd2 | Session number, if blank, use username and password |&#10;| devIdno       | string        | No       | 0133000000001     | Device number, if empty, use license plate number |&#10;| vehiIdno      | string        | No       | S66666            | License plate number, if device number is empty |&#10;| lang          | string        | No       | en                | Language: en for English, otherwise Chinese |&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config.ini">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config.ini" />
              <option name="originalContent" value="# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;&#10;" />
              <option name="updatedContent" value="# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.go" />
              <option name="originalContent" value="package main&#10;&#10;import (&#10;&#9;&quot;bufio&quot;&#10;&#9;&quot;crypto/tls&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;fyne.io/fyne/v2&quot;&#10;&#9;&quot;fyne.io/fyne/v2/app&quot;&#10;&#9;&quot;fyne.io/fyne/v2/container&quot;&#10;&#9;&quot;fyne.io/fyne/v2/dialog&quot;&#10;&#9;&quot;fyne.io/fyne/v2/theme&quot;&#10;&#9;&quot;fyne.io/fyne/v2/widget&quot;&#10;&#9;&quot;io&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;strconv&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;// AppConfig holds all configuration values&#10;type AppConfig struct {&#10;&#9;ServerURL string&#10;&#9;APIPort   int&#10;&#9;RTMPPort  int&#10;&#9;RTSPPort  int&#10;&#9;HLSPort   int&#10;}&#10;&#10;// Global config variable&#10;var config AppConfig&#10;&#10;// loadConfig reads the configuration from config.ini file&#10;func loadConfig() error {&#10;&#9;// Set default values&#10;&#9;config = AppConfig{&#10;&#9;&#9;ServerURL: &quot;https://cloud.samsonix.com&quot;,&#10;&#9;&#9;APIPort:   443,&#10;&#9;&#9;RTMPPort:  1935,&#10;&#9;&#9;RTSPPort:  6604,&#10;&#9;&#9;HLSPort:   16604,&#10;&#9;}&#10;&#10;&#9;file, err := os.Open(&quot;config.ini&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;// If config file doesn't exist, use defaults and create one&#10;&#9;&#9;fmt.Println(&quot;Config file not found, using defaults and creating config.ini&quot;)&#10;&#9;&#9;return createDefaultConfig()&#10;&#9;}&#10;&#9;defer file.Close()&#10;&#10;&#9;scanner := bufio.NewScanner(file)&#10;&#9;for scanner.Scan() {&#10;&#9;&#9;line := strings.TrimSpace(scanner.Text())&#10;&#10;&#9;&#9;// Skip empty lines and comments&#10;&#9;&#9;if line == &quot;&quot; || strings.HasPrefix(line, &quot;#&quot;) {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Parse key = value pairs&#10;&#9;&#9;parts := strings.SplitN(line, &quot;=&quot;, 2)&#10;&#9;&#9;if len(parts) != 2 {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;key := strings.TrimSpace(parts[0])&#10;&#9;&#9;value := strings.TrimSpace(parts[1])&#10;&#10;&#9;&#9;// Remove quotes from value if present&#10;&#9;&#9;if len(value) &gt;= 2 &amp;&amp; ((value[0] == '&quot;' &amp;&amp; value[len(value)-1] == '&quot;') || (value[0] == '\'' &amp;&amp; value[len(value)-1] == '\'')) {&#10;&#9;&#9;&#9;value = value[1 : len(value)-1]&#10;&#9;&#9;}&#10;&#10;&#9;&#9;switch key {&#10;&#9;&#9;case &quot;server_url&quot;:&#10;&#9;&#9;&#9;config.ServerURL = value&#10;&#9;&#9;case &quot;api_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.APIPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtmp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTMPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtsp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTSPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;hls_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.HLSPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return scanner.Err()&#10;}&#10;&#10;// createDefaultConfig creates a default config.ini file&#10;func createDefaultConfig() error {&#10;&#9;content := `# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;`&#10;&#9;return os.WriteFile(&quot;config.ini&quot;, []byte(content), 0644)&#10;}&#10;&#10;type Config struct {&#10;&#9;Account  string `json:&quot;account&quot;`&#10;&#9;Password string `json:&quot;password&quot;`&#10;}&#10;&#10;type LoginResponse struct {&#10;&#9;Result   int    `json:&quot;result&quot;`&#10;&#9;JSession string `json:&quot;jsession&quot;`&#10;}&#10;&#10;type Device struct {&#10;&#9;VID string `json:&quot;vid&quot;`&#10;&#9;DID string `json:&quot;did&quot;`&#10;}&#10;&#10;type StatusResponse struct {&#10;&#9;Result  int      `json:&quot;result&quot;`&#10;&#9;Onlines []Device `json:&quot;onlines&quot;`&#10;}&#10;&#10;type VehicleResponse struct {&#10;&#9;Result   int `json:&quot;result&quot;`&#10;&#9;Companys []struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;} `json:&quot;companys&quot;`&#10;&#9;Vehicles []struct {&#10;&#9;&#9;ID         int    `json:&quot;id&quot;`&#10;&#9;&#9;Name       string `json:&quot;nm&quot;`&#10;&#9;&#9;PID        int    `json:&quot;pid&quot;`&#10;&#9;&#9;PName      string `json:&quot;pnm&quot;`&#10;&#9;&#9;DeviceList []struct {&#10;&#9;&#9;&#9;ID          string `json:&quot;id&quot;`&#10;&#9;&#9;&#9;Channels    int    `json:&quot;cc&quot;`&#10;&#9;&#9;&#9;ChanName    string `json:&quot;cn&quot;`&#10;&#9;&#9;&#9;SIM         string `json:&quot;sim&quot;`&#10;&#9;&#9;&#9;InstallTime string `json:&quot;ist&quot;`&#10;&#9;&#9;} `json:&quot;dl&quot;`&#10;&#9;&#9;VehicleType  string `json:&quot;vehiType&quot;`&#10;&#9;&#9;VehicleColor string `json:&quot;vehiColor&quot;`&#10;&#9;&#9;VehicleBand  string `json:&quot;vehiBand&quot;`&#10;&#9;&#9;OwnerName    string `json:&quot;ownerName&quot;`&#10;&#9;&#9;EngineNum    string `json:&quot;engineNum&quot;`&#10;&#9;&#9;FrameNum     string `json:&quot;frameNum&quot;`&#10;&#9;} `json:&quot;vehicles&quot;`&#10;}&#10;&#10;// EquipmentStatus represents the bit-by-bit status flags for equipment&#10;type EquipmentStatus struct {&#10;&#9;// S1 flags (32 bits)&#10;&#9;GPSValid           bool // s1:0 - GPS positioning status (0=invalid, 1=valid)&#10;&#9;ACCStatus          bool // s1:1 - ACC status (0=off, 1=on)&#10;&#9;LeftTurn           bool // s1:2 - Left turn status&#10;&#9;RightTurn          bool // s1:3 - Right turn status&#10;&#9;FatigueWarning     bool // s1:4 - Fatigue driving warning&#10;&#9;ForwardRotation    bool // s1:5 - Positive rotation state&#10;&#9;ReverseState       bool // s1:6 - Reverse state&#10;&#9;GPSAntennaPresent  bool // s1:7 - GPS antenna present&#10;&#9;HardDriveStatus    int  // s1:8-9 - Hard drive status (0=not present, 1=present, 2=power down)&#10;&#9;ThreeGModuleStatus int  // s1:10-12 - 3G module status (0-5)&#10;&#9;QuiescentState     bool // s1:13 - Quiescent state&#10;&#9;OverspeedState     bool // s1:14 - Overspeed state&#10;&#9;GPSSupplement      bool // s1:15 - GPS supplement&#10;&#9;BatteryStatus      bool // s1:16 - Battery status&#10;&#9;NightState         bool // s1:17 - Night state&#10;&#9;OvercrowdingStatus bool // s1:18 - Overcrowding status&#10;&#9;ParkingACCStatus   bool // s1:19 - Parking ACC status&#10;&#9;IO1Status          bool // s1:20 - IO1 status&#10;&#9;IO2Status          bool // s1:21 - IO2 status&#10;&#9;IO3Status          bool // s1:22 - IO3 status&#10;&#9;IO4Status          bool // s1:23 - IO4 status&#10;&#9;IO5Status          bool // s1:24 - IO5 status&#10;&#9;IO6Status          bool // s1:25 - IO6 status&#10;&#9;IO7Status          bool // s1:26 - IO7 status&#10;&#9;IO8Status          bool // s1:27 - IO8 status&#10;&#9;Drive2Status       bool // s1:28 - Drive 2 status&#10;&#9;HardDisk2Status    int  // s1:29-30 - Hard disk 2 status&#10;&#9;HardDiskInvalid    bool // s1:31 - Hard disk status&#10;&#10;&#9;// S2 flags (32 bits)&#10;&#9;OutOfAreaAlarm            bool // s2:0 - Out of area alarm&#10;&#9;LineAlarm                 bool // s2:1 - Line alarm&#10;&#9;HighSpeedInAreaAlarm      bool // s2:2 - High speed in area&#10;&#9;LowSpeedInAreaAlarm       bool // s2:3 - Low speed in area&#10;&#9;HighSpeedOutsideAreaAlarm bool // s2:4 - High speed outside area&#10;&#9;LowSpeedOutsideAreaAlarm  bool // s2:5 - Low speed outside area&#10;&#9;ParkingInAreaAlarm        bool // s2:6 - Parking in area alarm&#10;&#9;OutOfAreaParkingAlarm     bool // s2:7 - Out of area parking alarm&#10;&#9;DailyFlowWarning          bool // s2:8 - Daily flow warning&#10;&#9;DailyFlowExceeded         bool // s2:9 - Daily flow exceeded&#10;&#9;MonthlyTrafficWarning     bool // s2:10 - Monthly traffic warning&#10;&#9;MonthlyFlowExceeded       bool // s2:11 - Monthly flow exceeded&#10;&#9;BackupBatteryPowered      bool // s2:12 - Host powered by backup battery&#10;&#9;DoorOpen                  bool // s2:13 - Door open&#10;&#9;VehicleFortification      bool // s2:14 - Vehicle fortification&#10;&#9;BatteryVoltageLow         bool // s2:15 - Battery voltage too low&#10;&#9;EngineStatus              bool // s2:17 - Engine status&#10;&#9;LastValidGPSInfo          bool // s2:18 - Last valid GPS information&#10;&#9;OnBoardStatus             bool // s2:19 - On board status (0=no load, 1=heavy load)&#10;&#9;OperationStatus           bool // s2:20 - Operation status (1=shutdown)&#10;&#9;LatLngNotEncrypted        bool // s2:21 - Latitude and longitude not encrypted&#10;&#9;NormalOilCircuit          bool // s2:22 - Normal oil circuit (1=disconnected)&#10;&#9;CircuitOK                 bool // s2:23 - Circuit OK (1=disconnected)&#10;&#9;DoorUnlock                bool // s2:24 - Door unlock (1=locked)&#10;&#9;AreaOverspeedPlatform     bool // s2:25 - Area overspeed alarm (platform)&#10;&#9;AreaOverspeedPlatform2    bool // s2:26 - Area overspeed alarm (platform)&#10;&#9;IntoAreaAlarm             bool // s2:27 - Into area alarm (platform)&#10;&#9;LineOffset                bool // s2:28 - Line offset (platform)&#10;&#9;TimePeriodOverspeed       bool // s2:29 - Time period overspeed (platform)&#10;&#9;TimePeriodLowSpeed        bool // s2:30 - Time period low speed (platform)&#10;&#9;FatigueDriving            bool // s2:31 - Fatigue driving (platform)&#10;&#10;&#9;// S3 flags (32 bits)&#10;&#9;VideoLostChannels    uint8 // s3:0-7 - Channel video lost&#10;&#9;VideoChannels        uint8 // s3:8-15 - Channel video&#10;&#9;IOInputs916          uint8 // s3:16-23 - IO inputs 9-16&#10;&#9;IOOutput14           uint8 // s3:24-27 - IO output 1-4&#10;&#9;PositioningType      uint8 // s3:28-29 - Positioning (0=GPS, 1=base station, 2=WiFi)&#10;&#9;AbnormalDrivingState bool  // s3:30 - Abnormal driving state (passenger cars forbidden)&#10;&#9;MountainForbidden    bool  // s3:31 - Mountain forbidden line&#10;&#10;&#9;// S4 flags (32 bits)&#10;&#9;PositioningCoordType      uint8 // s4:0-2 - Positioning type (0=WGS84, 1=GCJ-02, 2=BD09)&#10;&#9;EmergencyAlarm            bool  // s4:3 - Emergency alarm&#10;&#9;AreaOverspeedAlarm        bool  // s4:4 - Area overspeed alarm&#10;&#9;FatigueDrivingReport      bool  // s4:5 - Fatigue driving report&#10;&#9;DangerousDrivingAlarm     bool  // s4:6 - Dangerous driving behavior alarm&#10;&#9;GNSSModuleFault           bool  // s4:7 - GNSS module fault alarm&#10;&#9;GNSSAntennaDisconnected   bool  // s4:8 - GNSS antenna not connected/cut off&#10;&#9;GNSSAntennaShortCircuit   bool  // s4:9 - GNSS antenna short circuit&#10;&#9;TerminalLCDFault          bool  // s4:10 - Terminal LCD/display failure&#10;&#9;TTSModuleFault            bool  // s4:11 - TTS module fault&#10;&#9;CameraFailure             bool  // s4:12 - Camera failure&#10;&#9;CumulativeDrivingOvertime bool  // s4:13 - Cumulative driving overtime&#10;&#9;OvertimeParking           bool  // s4:14 - Overtime parking&#10;&#9;IntoArea                  bool  // s4:15 - Into area&#10;&#9;RouteAlarm                bool  // s4:16 - Route alarm&#10;&#9;TravelTimeAbnormal        bool  // s4:17 - Insufficient/excessive travel time&#10;&#9;RouteDeviationAlarm       bool  // s4:18 - Route deviation alarm&#10;&#9;VSSFailure                bool  // s4:19 - Vehicle VSS failure&#10;&#9;FuelQuantityAbnormal      bool  // s4:20 - Abnormal fuel quantity&#10;&#9;VehicleTheftAlarm         bool  // s4:21 - Vehicle theft alarm&#10;&#9;IllegalIgnitionAlarm      bool  // s4:22 - Illegal ignition alarm&#10;&#9;IllegalDisplacementAlarm  bool  // s4:23 - Illegal displacement alarm&#10;&#9;CollisionRolloverAlarm    bool  // s4:24 - Collision rollover alarm&#10;&#9;OvertimeStop              bool  // s4:25 - Overtime stop (platform)&#10;&#9;KeyPointNotReachedAlarm   bool  // s4:26 - Key point not reached (platform)&#10;&#9;LineOverspeedAlarm        bool  // s4:27 - Line overspeed alarm (platform)&#10;&#9;LineLowSpeedAlarm         bool  // s4:28 - Line low speed alarm (platform)&#10;&#9;RoadOverspeedAlarm        bool  // s4:29 - Road overspeed alarm (platform)&#10;&#9;OutOfAreaAlarmPlatform    bool  // s4:30 - Out of area alarm (platform)&#10;&#9;KeyPointNotLeaveAlarm     bool  // s4:31 - Key points not leave alarm (platform)&#10;}&#10;&#10;// ParseEquipmentStatus parses the s1, s2, s3, s4 integers into a structured EquipmentStatus&#10;func ParseEquipmentStatus(s1, s2, s3, s4 int) EquipmentStatus {&#10;&#9;status := EquipmentStatus{}&#10;&#10;&#9;// Parse S1 flags&#10;&#9;status.GPSValid = (s1 &amp; 0x01) != 0&#10;&#9;status.ACCStatus = (s1 &amp; 0x02) != 0&#10;&#9;status.LeftTurn = (s1 &amp; 0x04) != 0&#10;&#9;status.RightTurn = (s1 &amp; 0x08) != 0&#10;&#9;status.FatigueWarning = (s1 &amp; 0x10) != 0&#10;&#9;status.ForwardRotation = (s1 &amp; 0x20) != 0&#10;&#9;status.ReverseState = (s1 &amp; 0x40) != 0&#10;&#9;status.GPSAntennaPresent = (s1 &amp; 0x80) != 0&#10;&#9;status.HardDriveStatus = (s1 &gt;&gt; 8) &amp; 0x03&#10;&#9;status.ThreeGModuleStatus = (s1 &gt;&gt; 10) &amp; 0x07&#10;&#9;status.QuiescentState = (s1 &amp; 0x2000) != 0&#10;&#9;status.OverspeedState = (s1 &amp; 0x4000) != 0&#10;&#9;status.GPSSupplement = (s1 &amp; 0x8000) != 0&#10;&#9;status.BatteryStatus = (s1 &amp; 0x10000) != 0&#10;&#9;status.NightState = (s1 &amp; 0x20000) != 0&#10;&#9;status.OvercrowdingStatus = (s1 &amp; 0x40000) != 0&#10;&#9;status.ParkingACCStatus = (s1 &amp; 0x80000) != 0&#10;&#9;status.IO1Status = (s1 &amp; 0x100000) != 0&#10;&#9;status.IO2Status = (s1 &amp; 0x200000) != 0&#10;&#9;status.IO3Status = (s1 &amp; 0x400000) != 0&#10;&#9;status.IO4Status = (s1 &amp; 0x800000) != 0&#10;&#9;status.IO5Status = (s1 &amp; 0x1000000) != 0&#10;&#9;status.IO6Status = (s1 &amp; 0x2000000) != 0&#10;&#9;status.IO7Status = (s1 &amp; 0x4000000) != 0&#10;&#9;status.IO8Status = (s1 &amp; 0x8000000) != 0&#10;&#9;status.Drive2Status = (s1 &amp; 0x10000000) != 0&#10;&#9;status.HardDisk2Status = (s1 &gt;&gt; 29) &amp; 0x03&#10;&#9;status.HardDiskInvalid = (s1 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S2 flags&#10;&#9;status.OutOfAreaAlarm = (s2 &amp; 0x01) != 0&#10;&#9;status.LineAlarm = (s2 &amp; 0x02) != 0&#10;&#9;status.HighSpeedInAreaAlarm = (s2 &amp; 0x04) != 0&#10;&#9;status.LowSpeedInAreaAlarm = (s2 &amp; 0x08) != 0&#10;&#9;status.HighSpeedOutsideAreaAlarm = (s2 &amp; 0x10) != 0&#10;&#9;status.LowSpeedOutsideAreaAlarm = (s2 &amp; 0x20) != 0&#10;&#9;status.ParkingInAreaAlarm = (s2 &amp; 0x40) != 0&#10;&#9;status.OutOfAreaParkingAlarm = (s2 &amp; 0x80) != 0&#10;&#9;status.DailyFlowWarning = (s2 &amp; 0x100) != 0&#10;&#9;status.DailyFlowExceeded = (s2 &amp; 0x200) != 0&#10;&#9;status.MonthlyTrafficWarning = (s2 &amp; 0x400) != 0&#10;&#9;status.MonthlyFlowExceeded = (s2 &amp; 0x800) != 0&#10;&#9;status.BackupBatteryPowered = (s2 &amp; 0x1000) != 0&#10;&#9;status.DoorOpen = (s2 &amp; 0x2000) != 0&#10;&#9;status.VehicleFortification = (s2 &amp; 0x4000) != 0&#10;&#9;status.BatteryVoltageLow = (s2 &amp; 0x8000) != 0&#10;&#9;status.EngineStatus = (s2 &amp; 0x20000) != 0&#10;&#9;status.LastValidGPSInfo = (s2 &amp; 0x40000) != 0&#10;&#9;status.OnBoardStatus = (s2 &amp; 0x80000) != 0&#10;&#9;status.OperationStatus = (s2 &amp; 0x100000) != 0&#10;&#9;status.LatLngNotEncrypted = (s2 &amp; 0x200000) != 0&#10;&#9;status.NormalOilCircuit = (s2 &amp; 0x400000) != 0&#10;&#9;status.CircuitOK = (s2 &amp; 0x800000) != 0&#10;&#9;status.DoorUnlock = (s2 &amp; 0x1000000) != 0&#10;&#9;status.AreaOverspeedPlatform = (s2 &amp; 0x2000000) != 0&#10;&#9;status.AreaOverspeedPlatform2 = (s2 &amp; 0x4000000) != 0&#10;&#9;status.IntoAreaAlarm = (s2 &amp; 0x8000000) != 0&#10;&#9;status.LineOffset = (s2 &amp; 0x10000000) != 0&#10;&#9;status.TimePeriodOverspeed = (s2 &amp; 0x20000000) != 0&#10;&#9;status.TimePeriodLowSpeed = (s2 &amp; 0x40000000) != 0&#10;&#9;status.FatigueDriving = (s2 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S3 flags&#10;&#9;status.VideoLostChannels = uint8(s3 &amp; 0xFF)&#10;&#9;status.VideoChannels = uint8((s3 &gt;&gt; 8) &amp; 0xFF)&#10;&#9;status.IOInputs916 = uint8((s3 &gt;&gt; 16) &amp; 0xFF)&#10;&#9;status.IOOutput14 = uint8((s3 &gt;&gt; 24) &amp; 0x0F)&#10;&#9;status.PositioningType = uint8((s3 &gt;&gt; 28) &amp; 0x03)&#10;&#9;status.AbnormalDrivingState = (s3 &amp; 0x40000000) != 0&#10;&#9;status.MountainForbidden = (s3 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S4 flags&#10;&#9;status.PositioningCoordType = uint8(s4 &amp; 0x07)&#10;&#9;status.EmergencyAlarm = (s4 &amp; 0x08) != 0&#10;&#9;status.AreaOverspeedAlarm = (s4 &amp; 0x10) != 0&#10;&#9;status.FatigueDrivingReport = (s4 &amp; 0x20) != 0&#10;&#9;status.DangerousDrivingAlarm = (s4 &amp; 0x40) != 0&#10;&#9;status.GNSSModuleFault = (s4 &amp; 0x80) != 0&#10;&#9;status.GNSSAntennaDisconnected = (s4 &amp; 0x100) != 0&#10;&#9;status.GNSSAntennaShortCircuit = (s4 &amp; 0x200) != 0&#10;&#9;status.TerminalLCDFault = (s4 &amp; 0x400) != 0&#10;&#9;status.TTSModuleFault = (s4 &amp; 0x800) != 0&#10;&#9;status.CameraFailure = (s4 &amp; 0x1000) != 0&#10;&#9;status.CumulativeDrivingOvertime = (s4 &amp; 0x2000) != 0&#10;&#9;status.OvertimeParking = (s4 &amp; 0x4000) != 0&#10;&#9;status.IntoArea = (s4 &amp; 0x8000) != 0&#10;&#9;status.RouteAlarm = (s4 &amp; 0x10000) != 0&#10;&#9;status.TravelTimeAbnormal = (s4 &amp; 0x20000) != 0&#10;&#9;status.RouteDeviationAlarm = (s4 &amp; 0x40000) != 0&#10;&#9;status.VSSFailure = (s4 &amp; 0x80000) != 0&#10;&#9;status.FuelQuantityAbnormal = (s4 &amp; 0x100000) != 0&#10;&#9;status.VehicleTheftAlarm = (s4 &amp; 0x200000) != 0&#10;&#9;status.IllegalIgnitionAlarm = (s4 &amp; 0x400000) != 0&#10;&#9;status.IllegalDisplacementAlarm = (s4 &amp; 0x800000) != 0&#10;&#9;status.CollisionRolloverAlarm = (s4 &amp; 0x1000000) != 0&#10;&#9;status.OvertimeStop = (s4 &amp; 0x2000000) != 0&#10;&#9;status.KeyPointNotReachedAlarm = (s4 &amp; 0x4000000) != 0&#10;&#9;status.LineOverspeedAlarm = (s4 &amp; 0x8000000) != 0&#10;&#9;status.LineLowSpeedAlarm = (s4 &amp; 0x10000000) != 0&#10;&#9;status.RoadOverspeedAlarm = (s4 &amp; 0x20000000) != 0&#10;&#9;status.OutOfAreaAlarmPlatform = (s4 &amp; 0x40000000) != 0&#10;&#9;status.KeyPointNotLeaveAlarm = (s4 &amp; 0x80000000) != 0&#10;&#10;&#9;return status&#10;}&#10;&#10;type AlarmResponse struct {&#10;&#9;Result    int `json:&quot;result&quot;`&#10;&#9;AlarmList []struct {&#10;&#9;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;&#9;Gps     struct {&#10;&#9;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;&#9;} `json:&quot;Gps&quot;`&#10;&#9;} `json:&quot;alarmlist&quot;`&#10;&#9;Pagination struct {&#10;&#9;&#9;TotalPages   int `json:&quot;totalPages&quot;`&#10;&#9;&#9;CurrentPage  int `json:&quot;currentPage&quot;`&#10;&#9;&#9;PageRecords  int `json:&quot;pageRecords&quot;`&#10;&#9;&#9;TotalRecords int `json:&quot;totalRecords&quot;`&#10;&#9;} `json:&quot;pagination&quot;`&#10;}&#10;&#10;type AlarmResponseAlarm = struct {&#10;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;Gps     struct {&#10;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;} `json:&quot;Gps&quot;`&#10;}&#10;&#10;// RTSPLinkOptions contains the parameters needed to build an RTSP URL&#10;type RTSPLinkOptions struct {&#10;&#9;ServerHost string // RTSP server hostname&#10;&#9;ServerPort int    // RTSP server port (default 6604)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTSPLink creates a properly formatted RTSP URL for video streaming&#10;func GenerateRTSPLink(opts RTSPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTSPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTSP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtsp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;// HLSLinkOptions contains the parameters needed to build an HLS URL&#10;&#10;type HLSLinkOptions struct {&#10;&#9;ServerHost  string // HLS server hostname&#10;&#9;ServerPort  int    // HLS server port (default 16604)&#10;&#9;JSession    string // Session token from login&#10;&#9;DevIDNO     string // Device ID number&#10;&#9;Channel     int    // Channel number (starts from 0)&#10;&#9;Stream      int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;RequestType int    // 1 for real-time video&#10;}&#10;&#10;// GenerateHLSLink creates a properly formatted HLS URL for video streaming&#10;// HLS(HTTP Live streaming) is a streaming media transmission protocol based on HTTP, which is proposed by Apple as a protocol interaction method for transmitting audio and video.&#10;// Provides the real- time video request address based on the HLS protocol. Currently supports h264, does not support h265.&#10;func GenerateHLSLink(opts HLSLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.HLSPort&#10;&#9;}&#10;&#10;&#9;// Default to real-time video if not specified&#10;&#9;if opts.RequestType == 0 {&#10;&#9;&#9;opts.RequestType = 1&#10;&#9;}&#10;&#10;&#9;// Format the HLS URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;https://%s:%d/hls/%d_%s_%d_%d.m3u8?jsession=%s&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.RequestType,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream,&#10;&#9;&#9;opts.JSession)&#10;}&#10;&#10;// RTMPLinkOptions contains the parameters needed to build an RTMP URL&#10;type RTMPLinkOptions struct {&#10;&#9;ServerHost string // RTMP server hostname&#10;&#9;ServerPort int    // RTMP server port (default from config)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTMPLink creates a properly formatted RTMP URL for video streaming&#10;func GenerateRTMPLink(opts RTMPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTMPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTMP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtmp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;func httpGetJSON(url string) ([]byte, error) {&#10;&#9;client := &amp;http.Client{}&#10;&#9;req, err := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create request: %v&quot;, err)&#10;&#9;}&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#10;&#9;resp, err := client.Do(req)&#10;&#9;if err != nil &amp;&amp; isCertError(err) {&#10;&#9;&#9;// Retry with InsecureSkipVerify&#10;&#9;&#9;insecureClient := &amp;http.Client{&#10;&#9;&#9;&#9;Transport: &amp;http.Transport{&#10;&#9;&#9;&#9;&#9;TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},&#10;&#9;&#9;&#9;},&#10;&#9;&#9;}&#10;&#9;&#9;req2, err2 := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;&#9;if err2 != nil {&#10;&#9;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create retry request: %v&quot;, err2)&#10;&#9;&#9;}&#10;&#9;&#9;req2.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#9;&#9;resp, err = insecureClient.Do(req2)&#10;&#9;}&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#9;return io.ReadAll(resp.Body)&#10;}&#10;&#10;func isCertError(err error) bool {&#10;&#9;if err == nil {&#10;&#9;&#9;return false&#10;&#9;}&#10;&#9;msg := err.Error()&#10;&#9;return strings.Contains(msg, &quot;x509:&quot;) || strings.Contains(msg, &quot;certificate signed by unknown authority&quot;)&#10;}&#10;&#10;func login(account, password string) (string, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?account=%s&amp;password=%s&quot;, getLoginURL(), account, password)&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;var res LoginResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return &quot;&quot;, fmt.Errorf(&quot;login failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#9;return res.JSession, nil&#10;}&#10;&#10;func getDevices(jsession string) ([]Device, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getStatusURL(), jsession)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;var res StatusResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return res.Onlines, nil&#10;}&#10;&#10;func getVehicleInfo(jsession string) (*VehicleResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getVehicleInfoURL(), jsession)&#10;&#10;&#9;fmt.Printf(&quot;Requesting vehicle info from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw response: %s\n&quot;, string(data))&#10;&#10;&#9;var res VehicleResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;fmt.Printf(&quot;API error response with code: %d\n&quot;, res.Result)&#10;&#9;&#9;return nil, fmt.Errorf(&quot;vehicle info request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func getDeviceAlarms(jsession, devIDNO string, toMap int) (*AlarmResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;toMap=%d&quot;, getAlarmURL(), jsession, devIDNO, toMap)&#10;&#10;&#9;fmt.Printf(&quot;Requesting alarms from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw alarm response: %s\n&quot;, string(data))&#10;&#10;&#9;var res AlarmResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;alarm request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func generateLinks(jsession, did, vid, account, password string) map[string]string {&#10;&#9;return map[string]string{&#10;&#9;&#9;&quot;Web Player ID&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;devIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), did, account, password),&#10;&#9;&#9;&quot;Web Player VI&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;vehiIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), vid, account, password),&#10;&#9;&#9;&quot;Live API&quot;:      fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;Chn=1&amp;Sec=300&amp;Label=test&quot;, getLiveAPIBaseURL(), jsession, did),&#10;&#9;}&#10;}&#10;&#10;func saveToFile(account string, allLinks map[string]map[string]string) error {&#10;&#9;filename := fmt.Sprintf(&quot;%s-%ddev-%s.txt&quot;, account, len(allLinks), time.Now().Format(&quot;2006-01-02&quot;))&#10;&#9;f, err := os.Create(filename)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;for name, links := range allLinks {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, name)&#10;&#9;&#9;for k, v := range links {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;  %s: %s\n&quot;, k, v)&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;func buildCompanyHierarchy(companies []struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}) map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;} {&#10;&#9;hierarchy := make(map[int][]struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;})&#10;&#10;&#9;for _, company := range companies {&#10;&#9;&#9;hierarchy[company.PID] = append(hierarchy[company.PID], company)&#10;&#9;}&#10;&#10;&#9;return hierarchy&#10;}&#10;&#10;func printCompanyTree(builder *strings.Builder, hierarchy map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}, parentID int, prefix string) {&#10;&#9;children, exists := hierarchy[parentID]&#10;&#9;if !exists {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;for i, company := range children {&#10;&#9;&#9;isLast := i == len(children)-1&#10;&#10;&#9;&#9;if isLast {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s└── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;    &quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s├── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;│   &quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;func getStatusDescription(status EquipmentStatus) string {&#10;&#9;var descriptions []string&#10;&#10;&#9;// Build status descriptions for relevant flags&#10;&#9;if status.GPSValid {&#10;&#9;&#9;descriptions = append(descriptions, &quot;GPS Valid&quot;)&#10;&#9;}&#10;&#10;&#9;if status.ACCStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;ACC On&quot;)&#10;&#9;}&#10;&#10;&#9;if status.LeftTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Left Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.RightTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Right Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.QuiescentState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Quiescent&quot;)&#10;&#9;}&#10;&#10;&#9;if status.OverspeedState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Overspeeding&quot;)&#10;&#9;}&#10;&#10;&#9;if status.BatteryStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Battery Low&quot;)&#10;&#9;}&#10;&#10;&#9;if status.NightState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Night Mode&quot;)&#10;&#9;}&#10;&#10;&#9;if status.DoorOpen {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Door Open&quot;)&#10;&#9;}&#10;&#10;&#9;// Add important alarms&#10;&#9;var alarms []string&#10;&#9;if status.EmergencyAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Emergency&quot;)&#10;&#9;}&#10;&#9;if status.AreaOverspeedAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Area Overspeed&quot;)&#10;&#9;}&#10;&#9;if status.FatigueDrivingReport {&#10;&#9;&#9;alarms = append(alarms, &quot;Fatigue Driving&quot;)&#10;&#9;}&#10;&#9;if status.DangerousDrivingAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Dangerous Driving&quot;)&#10;&#9;}&#10;&#9;if status.VehicleTheftAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Vehicle Theft&quot;)&#10;&#9;}&#10;&#9;if status.IllegalIgnitionAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Illegal Ignition&quot;)&#10;&#9;}&#10;&#9;if status.CollisionRolloverAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Collision/Rollover&quot;)&#10;&#9;}&#10;&#10;&#9;if len(alarms) &gt; 0 {&#10;&#9;&#9;descriptions = append(descriptions, fmt.Sprintf(&quot;ALARMS: %s&quot;, strings.Join(alarms, &quot;, &quot;)))&#10;&#9;}&#10;&#10;&#9;return strings.Join(descriptions, &quot;, &quot;)&#10;}&#10;&#10;func appIcon() fyne.Resource {&#10;&#9;// Return the default Fyne icon instead of trying to load a custom one&#10;&#9;// This avoids the PNG decoding error&#10;&#9;return theme.FyneLogo()&#10;}&#10;&#10;func logAlarmsToFile(alarms []AlarmResponseAlarm) {&#10;&#9;if len(alarms) == 0 {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;f, err := os.OpenFile(&quot;alarms.log&quot;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Failed to write log: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;timestamp := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)&#10;&#9;fmt.Fprintf(f, &quot;=== Alarm log at %s ===\n&quot;, timestamp)&#10;&#10;&#9;for _, alarm := range alarms {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, alarm.DevIDNO)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Time: %s\n&quot;, alarm.Time)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Type: %d\n&quot;, alarm.Type)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Description: %s\n&quot;, alarm.Desc)&#10;&#10;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintf(f, &quot;Status: %s\n&quot;, status)&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;}&#10;&#10;// URL generation functions that use config&#10;func getLoginURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_login.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getStatusURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_getDeviceOlStatus.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getLiveAPIBaseURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_realTimeVedio.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getVehicleInfoURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_queryUserVehicle.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getAlarmURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_vehicleAlarm.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getWebPlayerURL() string {&#10;&#9;return strings.Replace(config.ServerURL, &quot;https://&quot;, &quot;http://&quot;, 1)&#10;}&#10;&#10;// getServerHostname extracts hostname from server URL for streaming services&#10;func getServerHostname() string {&#10;&#9;// Remove protocol prefix (https:// or http://)&#10;&#9;hostname := strings.TrimPrefix(config.ServerURL, &quot;https://&quot;)&#10;&#9;hostname = strings.TrimPrefix(hostname, &quot;http://&quot;)&#10;&#10;&#9;// Remove any path or port if present&#10;&#9;parts := strings.Split(hostname, &quot;/&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;// Remove port if present (for cases like hostname:port)&#10;&#9;parts = strings.Split(hostname, &quot;:&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;return hostname&#10;}&#10;&#10;func main() {&#10;&#9;// Load configuration&#10;&#9;err := loadConfig()&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Error loading config: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;myApp := app.New()&#10;&#9;myWindow := myApp.NewWindow(&quot;CMSV Video Generator Link&quot;)&#10;&#9;myWindow.SetIcon(appIcon())&#10;&#10;&#9;accountEntry := widget.NewEntry()&#10;&#9;accountEntry.SetPlaceHolder(&quot;Enter Account&quot;)&#10;&#9;passwordEntry := widget.NewPasswordEntry()&#10;&#9;passwordEntry.SetPlaceHolder(&quot;Enter Password&quot;)&#10;&#10;&#9;output := widget.NewMultiLineEntry()&#10;&#9;output.SetPlaceHolder(&quot;Results will appear here...&quot;)&#10;&#9;output.SetMinRowsVisible(15)&#10;&#10;&#9;// Create a dropdown for device selection&#10;&#9;deviceSelector := widget.NewSelect([]string{&quot;Login first to see devices&quot;}, func(selected string) {&#10;&#9;&#9;// This will be handled when a device is selected&#10;&#9;})&#10;&#9;deviceSelector.PlaceHolder = &quot;Select Device IDNO&quot;&#10;&#9;deviceSelector.Disable() // Disable until logged in&#10;&#10;&#9;// Create a dropdown for coordinate system selection&#10;&#9;coordSystems := []string{&#10;&#9;&#9;&quot;0 - WGS84 (Default)&quot;,&#10;&#9;&#9;&quot;1 - Google (GJ02)&quot;,&#10;&#9;&#9;&quot;2 - Baidu (BD09)&quot;,&#10;&#9;}&#10;&#9;coordSystemSelector := widget.NewSelect(coordSystems, nil)&#10;&#9;coordSystemSelector.SetSelected(coordSystems[0])&#10;&#10;&#9;var allLinks map[string]map[string]string&#10;&#9;var deviceMap map[string]Device // Map to store device names to their IDs&#10;&#9;var jsessionCache string        // Store the session for reuse&#10;&#10;&#9;loginBtn := widget.NewButton(&quot;Login and Fetch Devices&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for later use&#10;&#10;&#9;&#9;devices, err := getDevices(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Device fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Update the device selector with actual devices&#10;&#9;&#9;deviceOptions := []string{&quot;All Devices&quot;}&#10;&#9;&#9;deviceMap = make(map[string]Device)&#10;&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;deviceName := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;deviceOptions = append(deviceOptions, deviceName)&#10;&#9;&#9;&#9;deviceMap[deviceName] = d&#10;&#9;&#9;}&#10;&#10;&#9;&#9;deviceSelector.Options = deviceOptions&#10;&#9;&#9;deviceSelector.Enable()&#10;&#9;&#9;deviceSelector.SetSelected(&quot;All Devices&quot;)&#10;&#10;&#9;&#9;allLinks = make(map[string]map[string]string)&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d devices\n\n&quot;, len(devices)))&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;key := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;links := generateLinks(jsession, d.DID, d.VID, account, password)&#10;&#9;&#9;&#9;allLinks[key] = links&#10;&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, key))&#10;&#9;&#9;&#9;for name, link := range links {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  %s: %s\n&quot;, name, link))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;saveBtn := widget.NewButton(&quot;Save to File&quot;, func() {&#10;&#9;&#9;if allLinks == nil {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Info&quot;, &quot;No data to save yet&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;err := saveToFile(accountEntry.Text, allLinks)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(err, myWindow)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Success&quot;, &quot;File saved successfully&quot;, myWindow)&#10;&#9;&#9;}&#10;&#9;})&#10;&#10;&#9;vehicleInfoBtn := widget.NewButton(&quot;VEHICLE INFORMATION&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for reuse&#10;&#9;&#9;fmt.Printf(&quot;Using jsession: %s\n&quot;, jsession)&#10;&#10;&#9;&#9;vehicleInfo, err := getVehicleInfo(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Vehicle info fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;// Build and display company hierarchy as a clean tree without IDs&#10;&#9;&#9;builder.WriteString(&quot;=== COMPANY HIERARCHY ===\n&quot;)&#10;&#9;&#9;hierarchy := buildCompanyHierarchy(vehicleInfo.Companys)&#10;&#9;&#9;printCompanyTree(&amp;builder, hierarchy, 2, &quot;&quot;)&#10;&#9;&#9;builder.WriteString(&quot;\n&quot;)&#10;&#10;&#9;&#9;// Display vehicle information&#10;&#9;&#9;builder.WriteString(&quot;=== VEHICLE INFORMATION ===\n&quot;)&#10;&#9;&#9;for _, vehicle := range vehicleInfo.Vehicles {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Vehicle: %s (ID: %d)\n&quot;, vehicle.Name, vehicle.ID))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Company: %s\n&quot;, vehicle.PName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Type: %s, Band: %s, Color: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.VehicleType, vehicle.VehicleBand, vehicle.VehicleColor))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Owner: %s\n&quot;, vehicle.OwnerName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Engine #: %s, Frame #: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.EngineNum, vehicle.FrameNum))&#10;&#10;&#9;&#9;&#9;// Display device information for each vehicle&#10;&#9;&#9;&#9;builder.WriteString(&quot;  Devices:\n&quot;)&#10;&#9;&#9;&#9;for _, device := range vehicle.DeviceList {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;    - %s (%s)\n&quot;, device.ID, device.SIM))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Channels: %d, Channel Name: %s\n&quot;, device.Channels, device.ChanName))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Installed: %s\n&quot;, device.InstallTime))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;alarmBtn := widget.NewButton(&quot;GET DEVICE ALARMS&quot;, func() {&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please login first&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please select a device&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get the device ID based on selection&#10;&#9;&#9;var deviceID string&#10;&#9;&#9;if selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;} else if device, ok := deviceMap[selectedDevice]; ok {&#10;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get coordinate system selection&#10;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;}&#10;&#10;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;alarm fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;builder.WriteString(&quot;=== DEVICE ALARMS ===\n&quot;)&#10;&#10;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0))&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Status: %s\n&quot;, status))&#10;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Log alarms to file for future reference&#10;&#9;&#9;&#9;var alarmSlice []AlarmResponseAlarm&#10;&#9;&#9;&#9;for _, a := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;alarmSlice = append(alarmSlice, a)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;logAlarmsToFile(alarmSlice)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;// Add refresh button to continuously fetch alarms&#10;&#9;var refreshTicker *time.Ticker&#10;&#9;var stopRefresh chan bool&#10;&#9;var refreshBtn *widget.Button&#10;&#9;refreshBtn = widget.NewButton(&quot;AUTO REFRESH ALARMS&quot;, func() {&#10;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;// Stop auto-refresh&#10;&#9;&#9;&#9;stopRefresh &lt;- true&#10;&#9;&#9;&#9;refreshTicker = nil&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;AUTO REFRESH ALARMS&quot;)&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Auto-refresh&quot;, &quot;Auto-refresh stopped&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Start auto-refresh&#10;&#9;&#9;const timeoutSec = 5&#10;&#9;&#9;message := fmt.Sprintf(&quot;Start auto-refreshing alarms every %d seconds?&quot;, timeoutSec)&#10;&#10;&#9;&#9;dialog.ShowConfirm(&quot;Auto-refresh&quot;, message, func(start bool) {&#10;&#9;&#9;&#9;if !start {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Setup channels&#10;&#9;&#9;&#9;refreshTicker = time.NewTicker(time.Duration(timeoutSec) * time.Second)&#10;&#9;&#9;&#9;stopRefresh = make(chan bool)&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;STOP AUTO REFRESH&quot;)&#10;&#10;&#9;&#9;&#9;// Start refresh goroutine&#10;&#9;&#9;&#9;go func() {&#10;&#9;&#9;&#9;&#9;for {&#10;&#9;&#9;&#9;&#9;&#9;select {&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-refreshTicker.C:&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get device ID based on selection&#10;&#9;&#9;&#9;&#9;&#9;&#9;var deviceID string&#10;&#9;&#9;&#9;&#9;&#9;&#9;if deviceSelector.Selected == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if device, ok := deviceMap[deviceSelector.Selected]; ok {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get coordinate system&#10;&#9;&#9;&#9;&#9;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;&#9;&#9;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;&#9;&#9;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Fetch alarms&#10;&#9;&#9;&#9;&#9;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue // Skip this iteration on error&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Build output&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;=== AUTO REFRESH ALARMS (%s) ===\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;time.Now().Format(&quot;15:04:05&quot;)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI thread-safely&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI on main thread&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.SetText(builder.String())&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.Refresh()&#10;&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-stopRefresh:&#10;&#9;&#9;&#9;&#9;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;refreshTicker.Stop()&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}()&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTSP link generation button&#10;&#9;rtspBtn := widget.NewButton(&quot;Generate RTSP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTSP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTSP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTSP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTSP link&#10;&#9;&#9;&#9;rtspOptions := RTSPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtspLink := GenerateRTSPLink(rtspOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtspLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTSP Link Generated:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(rtspLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;RTSP link copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTSP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTMP link generation button&#10;&#9;rtmpBtn := widget.NewButton(&quot;Generate RTMP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTMP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTMP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTMP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTMP link&#10;&#9;&#9;&#9;rtmpOptions := RTMPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port for RTMP&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtmpLink := GenerateRTMPLink(rtmpOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtmpLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTMP URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTMP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add HLS link generation button&#10;&#9;hlsBtn := widget.NewButton(&quot;Generate HLS Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for HLS parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure HLS Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;HLS Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the HLS link&#10;&#9;&#9;&#9;hlsOptions := HLSLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost:  serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort:  16604, // Default port for HLS&#10;&#9;&#9;&#9;&#9;JSession:    jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:     device.DID,&#10;&#9;&#9;&#9;&#9;Channel:     channelNum,&#10;&#9;&#9;&#9;&#9;Stream:      streamType,&#10;&#9;&#9;&#9;&#9;RequestType: 1, // Real-time video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;hlsLink := GenerateHLSLink(hlsOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(hlsLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;// Add HTML video player code&#10;&#9;&#9;&#9;htmlCode := fmt.Sprintf(`&lt;video controls preload=&quot;none&quot; width=&quot;352&quot; height=&quot;288&quot; data-setup=&quot;{}&quot;&gt;&#10;    &lt;source src=&quot;%s&quot; type=&quot;application/x-mpegURL&quot;&gt;&#10;&lt;/video&gt;`, hlsLink)&#10;&#10;&#9;&#9;&#9;htmlEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;htmlEntry.SetText(htmlCode)&#10;&#9;&#9;&#9;htmlEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HLS URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HTML Video Player Code:&quot;),&#10;&#9;&#9;&#9;&#9;htmlEntry,&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;HLS Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Create the final UI layout&#10;&#9;// Create the final UI layout&#10;&#9;// Create the final UI layout&#10;&#9;content := container.NewVBox(&#10;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Account:&quot;),&#10;&#9;&#9;&#9;accountEntry,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Password:&quot;),&#10;&#9;&#9;&#9;passwordEntry,&#10;&#9;&#9;),&#10;&#9;&#9;loginBtn,&#10;&#9;&#9;deviceSelector,&#10;&#9;&#9;container.NewGridWithColumns(6, // Changed from 5 to 6 columns&#10;&#9;&#9;&#9;vehicleInfoBtn,&#10;&#9;&#9;&#9;alarmBtn,&#10;&#9;&#9;&#9;refreshBtn,&#10;&#9;&#9;&#9;rtspBtn,&#10;&#9;&#9;&#9;hlsBtn,&#10;&#9;&#9;&#9;rtmpBtn, // Added RTMP button&#10;&#9;&#9;),&#10;&#9;&#9;widget.NewLabel(&quot;Coordinate System:&quot;),&#10;&#9;&#9;coordSystemSelector,&#10;&#9;&#9;saveBtn,&#10;&#9;&#9;output,&#10;&#9;)&#10;&#10;&#9;myWindow.SetContent(content)&#10;&#9;myWindow.Resize(fyne.NewSize(800, 600))&#10;&#9;myWindow.ShowAndRun()&#10;}&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;bufio&quot;&#10;&#9;&quot;crypto/tls&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;fyne.io/fyne/v2&quot;&#10;&#9;&quot;fyne.io/fyne/v2/app&quot;&#10;&#9;&quot;fyne.io/fyne/v2/container&quot;&#10;&#9;&quot;fyne.io/fyne/v2/dialog&quot;&#10;&#9;&quot;fyne.io/fyne/v2/theme&quot;&#10;&#9;&quot;fyne.io/fyne/v2/widget&quot;&#10;&#9;&quot;io&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;strconv&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;// AppConfig holds all configuration values&#10;type AppConfig struct {&#10;&#9;ServerURL string&#10;&#9;APIPort   int&#10;&#9;RTMPPort  int&#10;&#9;RTSPPort  int&#10;&#9;HLSPort   int&#10;}&#10;&#10;// Global config variable&#10;var config AppConfig&#10;&#10;// loadConfig reads the configuration from config.ini file&#10;func loadConfig() error {&#10;&#9;// Set default values&#10;&#9;config = AppConfig{&#10;&#9;&#9;ServerURL: &quot;https://ahd.samsonix.com&quot;,&#10;&#9;&#9;APIPort:   443,&#10;&#9;&#9;RTMPPort:  1935,&#10;&#9;&#9;RTSPPort:  6604,&#10;&#9;&#9;HLSPort:   16604,&#10;&#9;}&#10;&#10;&#9;file, err := os.Open(&quot;config.ini&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;// If config file doesn't exist, use defaults and create one&#10;&#9;&#9;fmt.Println(&quot;Config file not found, using defaults and creating config.ini&quot;)&#10;&#9;&#9;return createDefaultConfig()&#10;&#9;}&#10;&#9;defer file.Close()&#10;&#10;&#9;scanner := bufio.NewScanner(file)&#10;&#9;for scanner.Scan() {&#10;&#9;&#9;line := strings.TrimSpace(scanner.Text())&#10;&#10;&#9;&#9;// Skip empty lines and comments&#10;&#9;&#9;if line == &quot;&quot; || strings.HasPrefix(line, &quot;#&quot;) {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Parse key = value pairs&#10;&#9;&#9;parts := strings.SplitN(line, &quot;=&quot;, 2)&#10;&#9;&#9;if len(parts) != 2 {&#10;&#9;&#9;&#9;continue&#10;&#9;&#9;}&#10;&#10;&#9;&#9;key := strings.TrimSpace(parts[0])&#10;&#9;&#9;value := strings.TrimSpace(parts[1])&#10;&#10;&#9;&#9;// Remove quotes from value if present&#10;&#9;&#9;if len(value) &gt;= 2 &amp;&amp; ((value[0] == '&quot;' &amp;&amp; value[len(value)-1] == '&quot;') || (value[0] == '\'' &amp;&amp; value[len(value)-1] == '\'')) {&#10;&#9;&#9;&#9;value = value[1 : len(value)-1]&#10;&#9;&#9;}&#10;&#10;&#9;&#9;switch key {&#10;&#9;&#9;case &quot;server_url&quot;:&#10;&#9;&#9;&#9;config.ServerURL = value&#10;&#9;&#9;case &quot;api_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.APIPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtmp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTMPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;rtsp_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.RTSPPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;case &quot;hls_port&quot;:&#10;&#9;&#9;&#9;if port, err := strconv.Atoi(value); err == nil {&#10;&#9;&#9;&#9;&#9;config.HLSPort = port&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return scanner.Err()&#10;}&#10;&#10;// createDefaultConfig creates a default config.ini file&#10;func createDefaultConfig() error {&#10;&#9;content := `# Application Configuration File&#10;&#10;# Server URL&#10;server_url = &quot;https://cloud.samsonix.com&quot;&#10;&#10;# API Port&#10;api_port = 443&#10;&#10;# RTMP Port&#10;rtmp_port = 1935&#10;&#10;# RTSP Port&#10;rtsp_port = 6604&#10;&#10;# HLS Port&#10;hls_port = 16604&#10;&#10;# Other configuration options can be added below&#10;# Example:&#10;# map_port = 8080&#10;`&#10;&#9;return os.WriteFile(&quot;config.ini&quot;, []byte(content), 0644)&#10;}&#10;&#10;type Config struct {&#10;&#9;Account  string `json:&quot;account&quot;`&#10;&#9;Password string `json:&quot;password&quot;`&#10;}&#10;&#10;type LoginResponse struct {&#10;&#9;Result   int    `json:&quot;result&quot;`&#10;&#9;JSession string `json:&quot;jsession&quot;`&#10;}&#10;&#10;type Device struct {&#10;&#9;VID string `json:&quot;vid&quot;`&#10;&#9;DID string `json:&quot;did&quot;`&#10;}&#10;&#10;type StatusResponse struct {&#10;&#9;Result  int      `json:&quot;result&quot;`&#10;&#9;Onlines []Device `json:&quot;onlines&quot;`&#10;}&#10;&#10;type VehicleResponse struct {&#10;&#9;Result   int `json:&quot;result&quot;`&#10;&#9;Companys []struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;} `json:&quot;companys&quot;`&#10;&#9;Vehicles []struct {&#10;&#9;&#9;ID         int    `json:&quot;id&quot;`&#10;&#9;&#9;Name       string `json:&quot;nm&quot;`&#10;&#9;&#9;PID        int    `json:&quot;pid&quot;`&#10;&#9;&#9;PName      string `json:&quot;pnm&quot;`&#10;&#9;&#9;DeviceList []struct {&#10;&#9;&#9;&#9;ID          string `json:&quot;id&quot;`&#10;&#9;&#9;&#9;Channels    int    `json:&quot;cc&quot;`&#10;&#9;&#9;&#9;ChanName    string `json:&quot;cn&quot;`&#10;&#9;&#9;&#9;SIM         string `json:&quot;sim&quot;`&#10;&#9;&#9;&#9;InstallTime string `json:&quot;ist&quot;`&#10;&#9;&#9;} `json:&quot;dl&quot;`&#10;&#9;&#9;VehicleType  string `json:&quot;vehiType&quot;`&#10;&#9;&#9;VehicleColor string `json:&quot;vehiColor&quot;`&#10;&#9;&#9;VehicleBand  string `json:&quot;vehiBand&quot;`&#10;&#9;&#9;OwnerName    string `json:&quot;ownerName&quot;`&#10;&#9;&#9;EngineNum    string `json:&quot;engineNum&quot;`&#10;&#9;&#9;FrameNum     string `json:&quot;frameNum&quot;`&#10;&#9;} `json:&quot;vehicles&quot;`&#10;}&#10;&#10;// EquipmentStatus represents the bit-by-bit status flags for equipment&#10;type EquipmentStatus struct {&#10;&#9;// S1 flags (32 bits)&#10;&#9;GPSValid           bool // s1:0 - GPS positioning status (0=invalid, 1=valid)&#10;&#9;ACCStatus          bool // s1:1 - ACC status (0=off, 1=on)&#10;&#9;LeftTurn           bool // s1:2 - Left turn status&#10;&#9;RightTurn          bool // s1:3 - Right turn status&#10;&#9;FatigueWarning     bool // s1:4 - Fatigue driving warning&#10;&#9;ForwardRotation    bool // s1:5 - Positive rotation state&#10;&#9;ReverseState       bool // s1:6 - Reverse state&#10;&#9;GPSAntennaPresent  bool // s1:7 - GPS antenna present&#10;&#9;HardDriveStatus    int  // s1:8-9 - Hard drive status (0=not present, 1=present, 2=power down)&#10;&#9;ThreeGModuleStatus int  // s1:10-12 - 3G module status (0-5)&#10;&#9;QuiescentState     bool // s1:13 - Quiescent state&#10;&#9;OverspeedState     bool // s1:14 - Overspeed state&#10;&#9;GPSSupplement      bool // s1:15 - GPS supplement&#10;&#9;BatteryStatus      bool // s1:16 - Battery status&#10;&#9;NightState         bool // s1:17 - Night state&#10;&#9;OvercrowdingStatus bool // s1:18 - Overcrowding status&#10;&#9;ParkingACCStatus   bool // s1:19 - Parking ACC status&#10;&#9;IO1Status          bool // s1:20 - IO1 status&#10;&#9;IO2Status          bool // s1:21 - IO2 status&#10;&#9;IO3Status          bool // s1:22 - IO3 status&#10;&#9;IO4Status          bool // s1:23 - IO4 status&#10;&#9;IO5Status          bool // s1:24 - IO5 status&#10;&#9;IO6Status          bool // s1:25 - IO6 status&#10;&#9;IO7Status          bool // s1:26 - IO7 status&#10;&#9;IO8Status          bool // s1:27 - IO8 status&#10;&#9;Drive2Status       bool // s1:28 - Drive 2 status&#10;&#9;HardDisk2Status    int  // s1:29-30 - Hard disk 2 status&#10;&#9;HardDiskInvalid    bool // s1:31 - Hard disk status&#10;&#10;&#9;// S2 flags (32 bits)&#10;&#9;OutOfAreaAlarm            bool // s2:0 - Out of area alarm&#10;&#9;LineAlarm                 bool // s2:1 - Line alarm&#10;&#9;HighSpeedInAreaAlarm      bool // s2:2 - High speed in area&#10;&#9;LowSpeedInAreaAlarm       bool // s2:3 - Low speed in area&#10;&#9;HighSpeedOutsideAreaAlarm bool // s2:4 - High speed outside area&#10;&#9;LowSpeedOutsideAreaAlarm  bool // s2:5 - Low speed outside area&#10;&#9;ParkingInAreaAlarm        bool // s2:6 - Parking in area alarm&#10;&#9;OutOfAreaParkingAlarm     bool // s2:7 - Out of area parking alarm&#10;&#9;DailyFlowWarning          bool // s2:8 - Daily flow warning&#10;&#9;DailyFlowExceeded         bool // s2:9 - Daily flow exceeded&#10;&#9;MonthlyTrafficWarning     bool // s2:10 - Monthly traffic warning&#10;&#9;MonthlyFlowExceeded       bool // s2:11 - Monthly flow exceeded&#10;&#9;BackupBatteryPowered      bool // s2:12 - Host powered by backup battery&#10;&#9;DoorOpen                  bool // s2:13 - Door open&#10;&#9;VehicleFortification      bool // s2:14 - Vehicle fortification&#10;&#9;BatteryVoltageLow         bool // s2:15 - Battery voltage too low&#10;&#9;EngineStatus              bool // s2:17 - Engine status&#10;&#9;LastValidGPSInfo          bool // s2:18 - Last valid GPS information&#10;&#9;OnBoardStatus             bool // s2:19 - On board status (0=no load, 1=heavy load)&#10;&#9;OperationStatus           bool // s2:20 - Operation status (1=shutdown)&#10;&#9;LatLngNotEncrypted        bool // s2:21 - Latitude and longitude not encrypted&#10;&#9;NormalOilCircuit          bool // s2:22 - Normal oil circuit (1=disconnected)&#10;&#9;CircuitOK                 bool // s2:23 - Circuit OK (1=disconnected)&#10;&#9;DoorUnlock                bool // s2:24 - Door unlock (1=locked)&#10;&#9;AreaOverspeedPlatform     bool // s2:25 - Area overspeed alarm (platform)&#10;&#9;AreaOverspeedPlatform2    bool // s2:26 - Area overspeed alarm (platform)&#10;&#9;IntoAreaAlarm             bool // s2:27 - Into area alarm (platform)&#10;&#9;LineOffset                bool // s2:28 - Line offset (platform)&#10;&#9;TimePeriodOverspeed       bool // s2:29 - Time period overspeed (platform)&#10;&#9;TimePeriodLowSpeed        bool // s2:30 - Time period low speed (platform)&#10;&#9;FatigueDriving            bool // s2:31 - Fatigue driving (platform)&#10;&#10;&#9;// S3 flags (32 bits)&#10;&#9;VideoLostChannels    uint8 // s3:0-7 - Channel video lost&#10;&#9;VideoChannels        uint8 // s3:8-15 - Channel video&#10;&#9;IOInputs916          uint8 // s3:16-23 - IO inputs 9-16&#10;&#9;IOOutput14           uint8 // s3:24-27 - IO output 1-4&#10;&#9;PositioningType      uint8 // s3:28-29 - Positioning (0=GPS, 1=base station, 2=WiFi)&#10;&#9;AbnormalDrivingState bool  // s3:30 - Abnormal driving state (passenger cars forbidden)&#10;&#9;MountainForbidden    bool  // s3:31 - Mountain forbidden line&#10;&#10;&#9;// S4 flags (32 bits)&#10;&#9;PositioningCoordType      uint8 // s4:0-2 - Positioning type (0=WGS84, 1=GCJ-02, 2=BD09)&#10;&#9;EmergencyAlarm            bool  // s4:3 - Emergency alarm&#10;&#9;AreaOverspeedAlarm        bool  // s4:4 - Area overspeed alarm&#10;&#9;FatigueDrivingReport      bool  // s4:5 - Fatigue driving report&#10;&#9;DangerousDrivingAlarm     bool  // s4:6 - Dangerous driving behavior alarm&#10;&#9;GNSSModuleFault           bool  // s4:7 - GNSS module fault alarm&#10;&#9;GNSSAntennaDisconnected   bool  // s4:8 - GNSS antenna not connected/cut off&#10;&#9;GNSSAntennaShortCircuit   bool  // s4:9 - GNSS antenna short circuit&#10;&#9;TerminalLCDFault          bool  // s4:10 - Terminal LCD/display failure&#10;&#9;TTSModuleFault            bool  // s4:11 - TTS module fault&#10;&#9;CameraFailure             bool  // s4:12 - Camera failure&#10;&#9;CumulativeDrivingOvertime bool  // s4:13 - Cumulative driving overtime&#10;&#9;OvertimeParking           bool  // s4:14 - Overtime parking&#10;&#9;IntoArea                  bool  // s4:15 - Into area&#10;&#9;RouteAlarm                bool  // s4:16 - Route alarm&#10;&#9;TravelTimeAbnormal        bool  // s4:17 - Insufficient/excessive travel time&#10;&#9;RouteDeviationAlarm       bool  // s4:18 - Route deviation alarm&#10;&#9;VSSFailure                bool  // s4:19 - Vehicle VSS failure&#10;&#9;FuelQuantityAbnormal      bool  // s4:20 - Abnormal fuel quantity&#10;&#9;VehicleTheftAlarm         bool  // s4:21 - Vehicle theft alarm&#10;&#9;IllegalIgnitionAlarm      bool  // s4:22 - Illegal ignition alarm&#10;&#9;IllegalDisplacementAlarm  bool  // s4:23 - Illegal displacement alarm&#10;&#9;CollisionRolloverAlarm    bool  // s4:24 - Collision rollover alarm&#10;&#9;OvertimeStop              bool  // s4:25 - Overtime stop (platform)&#10;&#9;KeyPointNotReachedAlarm   bool  // s4:26 - Key point not reached (platform)&#10;&#9;LineOverspeedAlarm        bool  // s4:27 - Line overspeed alarm (platform)&#10;&#9;LineLowSpeedAlarm         bool  // s4:28 - Line low speed alarm (platform)&#10;&#9;RoadOverspeedAlarm        bool  // s4:29 - Road overspeed alarm (platform)&#10;&#9;OutOfAreaAlarmPlatform    bool  // s4:30 - Out of area alarm (platform)&#10;&#9;KeyPointNotLeaveAlarm     bool  // s4:31 - Key points not leave alarm (platform)&#10;}&#10;&#10;// ParseEquipmentStatus parses the s1, s2, s3, s4 integers into a structured EquipmentStatus&#10;func ParseEquipmentStatus(s1, s2, s3, s4 int) EquipmentStatus {&#10;&#9;status := EquipmentStatus{}&#10;&#10;&#9;// Parse S1 flags&#10;&#9;status.GPSValid = (s1 &amp; 0x01) != 0&#10;&#9;status.ACCStatus = (s1 &amp; 0x02) != 0&#10;&#9;status.LeftTurn = (s1 &amp; 0x04) != 0&#10;&#9;status.RightTurn = (s1 &amp; 0x08) != 0&#10;&#9;status.FatigueWarning = (s1 &amp; 0x10) != 0&#10;&#9;status.ForwardRotation = (s1 &amp; 0x20) != 0&#10;&#9;status.ReverseState = (s1 &amp; 0x40) != 0&#10;&#9;status.GPSAntennaPresent = (s1 &amp; 0x80) != 0&#10;&#9;status.HardDriveStatus = (s1 &gt;&gt; 8) &amp; 0x03&#10;&#9;status.ThreeGModuleStatus = (s1 &gt;&gt; 10) &amp; 0x07&#10;&#9;status.QuiescentState = (s1 &amp; 0x2000) != 0&#10;&#9;status.OverspeedState = (s1 &amp; 0x4000) != 0&#10;&#9;status.GPSSupplement = (s1 &amp; 0x8000) != 0&#10;&#9;status.BatteryStatus = (s1 &amp; 0x10000) != 0&#10;&#9;status.NightState = (s1 &amp; 0x20000) != 0&#10;&#9;status.OvercrowdingStatus = (s1 &amp; 0x40000) != 0&#10;&#9;status.ParkingACCStatus = (s1 &amp; 0x80000) != 0&#10;&#9;status.IO1Status = (s1 &amp; 0x100000) != 0&#10;&#9;status.IO2Status = (s1 &amp; 0x200000) != 0&#10;&#9;status.IO3Status = (s1 &amp; 0x400000) != 0&#10;&#9;status.IO4Status = (s1 &amp; 0x800000) != 0&#10;&#9;status.IO5Status = (s1 &amp; 0x1000000) != 0&#10;&#9;status.IO6Status = (s1 &amp; 0x2000000) != 0&#10;&#9;status.IO7Status = (s1 &amp; 0x4000000) != 0&#10;&#9;status.IO8Status = (s1 &amp; 0x8000000) != 0&#10;&#9;status.Drive2Status = (s1 &amp; 0x10000000) != 0&#10;&#9;status.HardDisk2Status = (s1 &gt;&gt; 29) &amp; 0x03&#10;&#9;status.HardDiskInvalid = (s1 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S2 flags&#10;&#9;status.OutOfAreaAlarm = (s2 &amp; 0x01) != 0&#10;&#9;status.LineAlarm = (s2 &amp; 0x02) != 0&#10;&#9;status.HighSpeedInAreaAlarm = (s2 &amp; 0x04) != 0&#10;&#9;status.LowSpeedInAreaAlarm = (s2 &amp; 0x08) != 0&#10;&#9;status.HighSpeedOutsideAreaAlarm = (s2 &amp; 0x10) != 0&#10;&#9;status.LowSpeedOutsideAreaAlarm = (s2 &amp; 0x20) != 0&#10;&#9;status.ParkingInAreaAlarm = (s2 &amp; 0x40) != 0&#10;&#9;status.OutOfAreaParkingAlarm = (s2 &amp; 0x80) != 0&#10;&#9;status.DailyFlowWarning = (s2 &amp; 0x100) != 0&#10;&#9;status.DailyFlowExceeded = (s2 &amp; 0x200) != 0&#10;&#9;status.MonthlyTrafficWarning = (s2 &amp; 0x400) != 0&#10;&#9;status.MonthlyFlowExceeded = (s2 &amp; 0x800) != 0&#10;&#9;status.BackupBatteryPowered = (s2 &amp; 0x1000) != 0&#10;&#9;status.DoorOpen = (s2 &amp; 0x2000) != 0&#10;&#9;status.VehicleFortification = (s2 &amp; 0x4000) != 0&#10;&#9;status.BatteryVoltageLow = (s2 &amp; 0x8000) != 0&#10;&#9;status.EngineStatus = (s2 &amp; 0x20000) != 0&#10;&#9;status.LastValidGPSInfo = (s2 &amp; 0x40000) != 0&#10;&#9;status.OnBoardStatus = (s2 &amp; 0x80000) != 0&#10;&#9;status.OperationStatus = (s2 &amp; 0x100000) != 0&#10;&#9;status.LatLngNotEncrypted = (s2 &amp; 0x200000) != 0&#10;&#9;status.NormalOilCircuit = (s2 &amp; 0x400000) != 0&#10;&#9;status.CircuitOK = (s2 &amp; 0x800000) != 0&#10;&#9;status.DoorUnlock = (s2 &amp; 0x1000000) != 0&#10;&#9;status.AreaOverspeedPlatform = (s2 &amp; 0x2000000) != 0&#10;&#9;status.AreaOverspeedPlatform2 = (s2 &amp; 0x4000000) != 0&#10;&#9;status.IntoAreaAlarm = (s2 &amp; 0x8000000) != 0&#10;&#9;status.LineOffset = (s2 &amp; 0x10000000) != 0&#10;&#9;status.TimePeriodOverspeed = (s2 &amp; 0x20000000) != 0&#10;&#9;status.TimePeriodLowSpeed = (s2 &amp; 0x40000000) != 0&#10;&#9;status.FatigueDriving = (s2 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S3 flags&#10;&#9;status.VideoLostChannels = uint8(s3 &amp; 0xFF)&#10;&#9;status.VideoChannels = uint8((s3 &gt;&gt; 8) &amp; 0xFF)&#10;&#9;status.IOInputs916 = uint8((s3 &gt;&gt; 16) &amp; 0xFF)&#10;&#9;status.IOOutput14 = uint8((s3 &gt;&gt; 24) &amp; 0x0F)&#10;&#9;status.PositioningType = uint8((s3 &gt;&gt; 28) &amp; 0x03)&#10;&#9;status.AbnormalDrivingState = (s3 &amp; 0x40000000) != 0&#10;&#9;status.MountainForbidden = (s3 &amp; 0x80000000) != 0&#10;&#10;&#9;// Parse S4 flags&#10;&#9;status.PositioningCoordType = uint8(s4 &amp; 0x07)&#10;&#9;status.EmergencyAlarm = (s4 &amp; 0x08) != 0&#10;&#9;status.AreaOverspeedAlarm = (s4 &amp; 0x10) != 0&#10;&#9;status.FatigueDrivingReport = (s4 &amp; 0x20) != 0&#10;&#9;status.DangerousDrivingAlarm = (s4 &amp; 0x40) != 0&#10;&#9;status.GNSSModuleFault = (s4 &amp; 0x80) != 0&#10;&#9;status.GNSSAntennaDisconnected = (s4 &amp; 0x100) != 0&#10;&#9;status.GNSSAntennaShortCircuit = (s4 &amp; 0x200) != 0&#10;&#9;status.TerminalLCDFault = (s4 &amp; 0x400) != 0&#10;&#9;status.TTSModuleFault = (s4 &amp; 0x800) != 0&#10;&#9;status.CameraFailure = (s4 &amp; 0x1000) != 0&#10;&#9;status.CumulativeDrivingOvertime = (s4 &amp; 0x2000) != 0&#10;&#9;status.OvertimeParking = (s4 &amp; 0x4000) != 0&#10;&#9;status.IntoArea = (s4 &amp; 0x8000) != 0&#10;&#9;status.RouteAlarm = (s4 &amp; 0x10000) != 0&#10;&#9;status.TravelTimeAbnormal = (s4 &amp; 0x20000) != 0&#10;&#9;status.RouteDeviationAlarm = (s4 &amp; 0x40000) != 0&#10;&#9;status.VSSFailure = (s4 &amp; 0x80000) != 0&#10;&#9;status.FuelQuantityAbnormal = (s4 &amp; 0x100000) != 0&#10;&#9;status.VehicleTheftAlarm = (s4 &amp; 0x200000) != 0&#10;&#9;status.IllegalIgnitionAlarm = (s4 &amp; 0x400000) != 0&#10;&#9;status.IllegalDisplacementAlarm = (s4 &amp; 0x800000) != 0&#10;&#9;status.CollisionRolloverAlarm = (s4 &amp; 0x1000000) != 0&#10;&#9;status.OvertimeStop = (s4 &amp; 0x2000000) != 0&#10;&#9;status.KeyPointNotReachedAlarm = (s4 &amp; 0x4000000) != 0&#10;&#9;status.LineOverspeedAlarm = (s4 &amp; 0x8000000) != 0&#10;&#9;status.LineLowSpeedAlarm = (s4 &amp; 0x10000000) != 0&#10;&#9;status.RoadOverspeedAlarm = (s4 &amp; 0x20000000) != 0&#10;&#9;status.OutOfAreaAlarmPlatform = (s4 &amp; 0x40000000) != 0&#10;&#9;status.KeyPointNotLeaveAlarm = (s4 &amp; 0x80000000) != 0&#10;&#10;&#9;return status&#10;}&#10;&#10;type AlarmResponse struct {&#10;&#9;Result    int `json:&quot;result&quot;`&#10;&#9;AlarmList []struct {&#10;&#9;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;&#9;Gps     struct {&#10;&#9;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;&#9;} `json:&quot;Gps&quot;`&#10;&#9;} `json:&quot;alarmlist&quot;`&#10;&#9;Pagination struct {&#10;&#9;&#9;TotalPages   int `json:&quot;totalPages&quot;`&#10;&#9;&#9;CurrentPage  int `json:&quot;currentPage&quot;`&#10;&#9;&#9;PageRecords  int `json:&quot;pageRecords&quot;`&#10;&#9;&#9;TotalRecords int `json:&quot;totalRecords&quot;`&#10;&#9;} `json:&quot;pagination&quot;`&#10;}&#10;&#10;type AlarmResponseAlarm = struct {&#10;&#9;DevIDNO string `json:&quot;DevIDNO&quot;`&#10;&#9;Desc    string `json:&quot;desc&quot;`&#10;&#9;GUID    string `json:&quot;guid&quot;`&#10;&#9;HD      int    `json:&quot;hd&quot;`&#10;&#9;Img     string `json:&quot;img&quot;`&#10;&#9;Info    int    `json:&quot;info&quot;`&#10;&#9;P1      int    `json:&quot;p1&quot;`&#10;&#9;P2      int    `json:&quot;p2&quot;`&#10;&#9;P3      int    `json:&quot;p3&quot;`&#10;&#9;P4      int    `json:&quot;p4&quot;`&#10;&#9;SrcTm   string `json:&quot;srcTm&quot;`&#10;&#9;StType  int    `json:&quot;stType&quot;`&#10;&#9;Time    string `json:&quot;time&quot;`&#10;&#9;Type    int    `json:&quot;type&quot;`&#10;&#9;Gps     struct {&#10;&#9;&#9;DCT  int    `json:&quot;dct&quot;`&#10;&#9;&#9;GD   int    `json:&quot;gd&quot;`&#10;&#9;&#9;GT   string `json:&quot;gt&quot;`&#10;&#9;&#9;HX   int    `json:&quot;hx&quot;`&#10;&#9;&#9;Lat  int    `json:&quot;lat&quot;`&#10;&#9;&#9;LC   int    `json:&quot;lc&quot;`&#10;&#9;&#9;LID  int    `json:&quot;lid&quot;`&#10;&#9;&#9;Lng  int    `json:&quot;lng&quot;`&#10;&#9;&#9;MLat string `json:&quot;mlat&quot;`&#10;&#9;&#9;MLng string `json:&quot;mlng&quot;`&#10;&#9;&#9;SP   int    `json:&quot;sp&quot;`&#10;&#9;} `json:&quot;Gps&quot;`&#10;}&#10;&#10;// RTSPLinkOptions contains the parameters needed to build an RTSP URL&#10;type RTSPLinkOptions struct {&#10;&#9;ServerHost string // RTSP server hostname&#10;&#9;ServerPort int    // RTSP server port (default 6604)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTSPLink creates a properly formatted RTSP URL for video streaming&#10;func GenerateRTSPLink(opts RTSPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTSPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTSP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtsp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;// HLSLinkOptions contains the parameters needed to build an HLS URL&#10;&#10;type HLSLinkOptions struct {&#10;&#9;ServerHost  string // HLS server hostname&#10;&#9;ServerPort  int    // HLS server port (default 16604)&#10;&#9;JSession    string // Session token from login&#10;&#9;DevIDNO     string // Device ID number&#10;&#9;Channel     int    // Channel number (starts from 0)&#10;&#9;Stream      int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;RequestType int    // 1 for real-time video&#10;}&#10;&#10;// GenerateHLSLink creates a properly formatted HLS URL for video streaming&#10;// HLS(HTTP Live streaming) is a streaming media transmission protocol based on HTTP, which is proposed by Apple as a protocol interaction method for transmitting audio and video.&#10;// Provides the real- time video request address based on the HLS protocol. Currently supports h264, does not support h265.&#10;func GenerateHLSLink(opts HLSLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.HLSPort&#10;&#9;}&#10;&#10;&#9;// Default to real-time video if not specified&#10;&#9;if opts.RequestType == 0 {&#10;&#9;&#9;opts.RequestType = 1&#10;&#9;}&#10;&#10;&#9;// Format the HLS URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;https://%s:%d/hls/%d_%s_%d_%d.m3u8?jsession=%s&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.RequestType,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream,&#10;&#9;&#9;opts.JSession)&#10;}&#10;&#10;// RTMPLinkOptions contains the parameters needed to build an RTMP URL&#10;type RTMPLinkOptions struct {&#10;&#9;ServerHost string // RTMP server hostname&#10;&#9;ServerPort int    // RTMP server port (default from config)&#10;&#9;JSession   string // Session token from login&#10;&#9;DevIDNO    string // Device ID number&#10;&#9;Channel    int    // Channel number (starts from 0)&#10;&#9;Stream     int    // Stream type (0=main stream, 1=sub stream)&#10;&#9;AVType     int    // 1=live video, 2=listening&#10;}&#10;&#10;// GenerateRTMPLink creates a properly formatted RTMP URL for video streaming&#10;func GenerateRTMPLink(opts RTMPLinkOptions) string {&#10;&#9;// Set default port from config if not specified&#10;&#9;if opts.ServerPort == 0 {&#10;&#9;&#9;opts.ServerPort = config.RTMPPort&#10;&#9;}&#10;&#10;&#9;// Default to live video if not specified&#10;&#9;if opts.AVType == 0 {&#10;&#9;&#9;opts.AVType = 1&#10;&#9;}&#10;&#10;&#9;// Format the RTMP URL according to the API documentation&#10;&#9;return fmt.Sprintf(&quot;rtmp://%s:%d/3/3?AVType=%d&amp;jsession=%s&amp;DevIDNO=%s&amp;Channel=%d&amp;Stream=%d&quot;,&#10;&#9;&#9;opts.ServerHost,&#10;&#9;&#9;opts.ServerPort,&#10;&#9;&#9;opts.AVType,&#10;&#9;&#9;opts.JSession,&#10;&#9;&#9;opts.DevIDNO,&#10;&#9;&#9;opts.Channel,&#10;&#9;&#9;opts.Stream)&#10;}&#10;&#10;func httpGetJSON(url string) ([]byte, error) {&#10;&#9;client := &amp;http.Client{}&#10;&#9;req, err := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create request: %v&quot;, err)&#10;&#9;}&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#10;&#9;resp, err := client.Do(req)&#10;&#9;if err != nil &amp;&amp; isCertError(err) {&#10;&#9;&#9;// Retry with InsecureSkipVerify&#10;&#9;&#9;insecureClient := &amp;http.Client{&#10;&#9;&#9;&#9;Transport: &amp;http.Transport{&#10;&#9;&#9;&#9;&#9;TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},&#10;&#9;&#9;&#9;},&#10;&#9;&#9;}&#10;&#9;&#9;req2, err2 := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;&#9;if err2 != nil {&#10;&#9;&#9;&#9;return nil, fmt.Errorf(&quot;failed to create retry request: %v&quot;, err2)&#10;&#9;&#9;}&#10;&#9;&#9;req2.Header.Set(&quot;User-Agent&quot;, &quot;GoClient&quot;)&#10;&#9;&#9;resp, err = insecureClient.Do(req2)&#10;&#9;}&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#9;return io.ReadAll(resp.Body)&#10;}&#10;&#10;func isCertError(err error) bool {&#10;&#9;if err == nil {&#10;&#9;&#9;return false&#10;&#9;}&#10;&#9;msg := err.Error()&#10;&#9;return strings.Contains(msg, &quot;x509:&quot;) || strings.Contains(msg, &quot;certificate signed by unknown authority&quot;)&#10;}&#10;&#10;func login(account, password string) (string, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?account=%s&amp;password=%s&quot;, getLoginURL(), account, password)&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;var res LoginResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return &quot;&quot;, fmt.Errorf(&quot;login failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#9;return res.JSession, nil&#10;}&#10;&#10;func getDevices(jsession string) ([]Device, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getStatusURL(), jsession)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;var res StatusResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return res.Onlines, nil&#10;}&#10;&#10;func getVehicleInfo(jsession string) (*VehicleResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&quot;, getVehicleInfoURL(), jsession)&#10;&#10;&#9;fmt.Printf(&quot;Requesting vehicle info from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw response: %s\n&quot;, string(data))&#10;&#10;&#9;var res VehicleResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;fmt.Printf(&quot;API error response with code: %d\n&quot;, res.Result)&#10;&#9;&#9;return nil, fmt.Errorf(&quot;vehicle info request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func getDeviceAlarms(jsession, devIDNO string, toMap int) (*AlarmResponse, error) {&#10;&#9;url := fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;toMap=%d&quot;, getAlarmURL(), jsession, devIDNO, toMap)&#10;&#10;&#9;fmt.Printf(&quot;Requesting alarms from: %s\n&quot;, url)&#10;&#10;&#9;data, err := httpGetJSON(url)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;HTTP request error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Raw alarm response: %s\n&quot;, string(data))&#10;&#10;&#9;var res AlarmResponse&#10;&#9;if err := json.Unmarshal(data, &amp;res); err != nil {&#10;&#9;&#9;fmt.Printf(&quot;JSON parsing error: %v\n&quot;, err)&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;if res.Result != 0 {&#10;&#9;&#9;return nil, fmt.Errorf(&quot;alarm request failed (result code %d)&quot;, res.Result)&#10;&#9;}&#10;&#10;&#9;return &amp;res, nil&#10;}&#10;&#10;func generateLinks(jsession, did, vid, account, password string) map[string]string {&#10;&#9;return map[string]string{&#10;&#9;&#9;&quot;Web Player ID&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;devIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), did, account, password),&#10;&#9;&#9;&quot;Web Player VI&quot;: fmt.Sprintf(&quot;%s/808gps/open/player/video.html?lang=en&amp;vehiIdno=%s&amp;account=%s&amp;password=%s&quot;, getWebPlayerURL(), vid, account, password),&#10;&#9;&#9;&quot;Live API&quot;:      fmt.Sprintf(&quot;%s?jsession=%s&amp;DevIDNO=%s&amp;Chn=1&amp;Sec=300&amp;Label=test&quot;, getLiveAPIBaseURL(), jsession, did),&#10;&#9;}&#10;}&#10;&#10;func saveToFile(account string, allLinks map[string]map[string]string) error {&#10;&#9;filename := fmt.Sprintf(&quot;%s-%ddev-%s.txt&quot;, account, len(allLinks), time.Now().Format(&quot;2006-01-02&quot;))&#10;&#9;f, err := os.Create(filename)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;for name, links := range allLinks {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, name)&#10;&#9;&#9;for k, v := range links {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;  %s: %s\n&quot;, k, v)&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;func buildCompanyHierarchy(companies []struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}) map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;} {&#10;&#9;hierarchy := make(map[int][]struct {&#10;&#9;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;&#9;PID  int    `json:&quot;pId&quot;`&#10;&#9;})&#10;&#10;&#9;for _, company := range companies {&#10;&#9;&#9;hierarchy[company.PID] = append(hierarchy[company.PID], company)&#10;&#9;}&#10;&#10;&#9;return hierarchy&#10;}&#10;&#10;func printCompanyTree(builder *strings.Builder, hierarchy map[int][]struct {&#10;&#9;ID   int    `json:&quot;id&quot;`&#10;&#9;Name string `json:&quot;nm&quot;`&#10;&#9;PID  int    `json:&quot;pId&quot;`&#10;}, parentID int, prefix string) {&#10;&#9;children, exists := hierarchy[parentID]&#10;&#9;if !exists {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;for i, company := range children {&#10;&#9;&#9;isLast := i == len(children)-1&#10;&#10;&#9;&#9;if isLast {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s└── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;    &quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;%s├── %s\n&quot;, prefix, company.Name))&#10;&#9;&#9;&#9;printCompanyTree(builder, hierarchy, company.ID, prefix+&quot;│   &quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;func getStatusDescription(status EquipmentStatus) string {&#10;&#9;var descriptions []string&#10;&#10;&#9;// Build status descriptions for relevant flags&#10;&#9;if status.GPSValid {&#10;&#9;&#9;descriptions = append(descriptions, &quot;GPS Valid&quot;)&#10;&#9;}&#10;&#10;&#9;if status.ACCStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;ACC On&quot;)&#10;&#9;}&#10;&#10;&#9;if status.LeftTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Left Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.RightTurn {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Right Turn&quot;)&#10;&#9;}&#10;&#10;&#9;if status.QuiescentState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Quiescent&quot;)&#10;&#9;}&#10;&#10;&#9;if status.OverspeedState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Overspeeding&quot;)&#10;&#9;}&#10;&#10;&#9;if status.BatteryStatus {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Battery Low&quot;)&#10;&#9;}&#10;&#10;&#9;if status.NightState {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Night Mode&quot;)&#10;&#9;}&#10;&#10;&#9;if status.DoorOpen {&#10;&#9;&#9;descriptions = append(descriptions, &quot;Door Open&quot;)&#10;&#9;}&#10;&#10;&#9;// Add important alarms&#10;&#9;var alarms []string&#10;&#9;if status.EmergencyAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Emergency&quot;)&#10;&#9;}&#10;&#9;if status.AreaOverspeedAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Area Overspeed&quot;)&#10;&#9;}&#10;&#9;if status.FatigueDrivingReport {&#10;&#9;&#9;alarms = append(alarms, &quot;Fatigue Driving&quot;)&#10;&#9;}&#10;&#9;if status.DangerousDrivingAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Dangerous Driving&quot;)&#10;&#9;}&#10;&#9;if status.VehicleTheftAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Vehicle Theft&quot;)&#10;&#9;}&#10;&#9;if status.IllegalIgnitionAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Illegal Ignition&quot;)&#10;&#9;}&#10;&#9;if status.CollisionRolloverAlarm {&#10;&#9;&#9;alarms = append(alarms, &quot;Collision/Rollover&quot;)&#10;&#9;}&#10;&#10;&#9;if len(alarms) &gt; 0 {&#10;&#9;&#9;descriptions = append(descriptions, fmt.Sprintf(&quot;ALARMS: %s&quot;, strings.Join(alarms, &quot;, &quot;)))&#10;&#9;}&#10;&#10;&#9;return strings.Join(descriptions, &quot;, &quot;)&#10;}&#10;&#10;func appIcon() fyne.Resource {&#10;&#9;// Return the default Fyne icon instead of trying to load a custom one&#10;&#9;// This avoids the PNG decoding error&#10;&#9;return theme.FyneLogo()&#10;}&#10;&#10;func logAlarmsToFile(alarms []AlarmResponseAlarm) {&#10;&#9;if len(alarms) == 0 {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;f, err := os.OpenFile(&quot;alarms.log&quot;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Failed to write log: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;defer f.Close()&#10;&#10;&#9;timestamp := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)&#10;&#9;fmt.Fprintf(f, &quot;=== Alarm log at %s ===\n&quot;, timestamp)&#10;&#10;&#9;for _, alarm := range alarms {&#10;&#9;&#9;fmt.Fprintf(f, &quot;Device: %s\n&quot;, alarm.DevIDNO)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Time: %s\n&quot;, alarm.Time)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Type: %d\n&quot;, alarm.Type)&#10;&#9;&#9;fmt.Fprintf(f, &quot;Description: %s\n&quot;, alarm.Desc)&#10;&#10;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng)&#10;&#9;&#9;&#9;fmt.Fprintf(f, &quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Fprintf(f, &quot;Status: %s\n&quot;, status)&#10;&#9;&#9;fmt.Fprintln(f, strings.Repeat(&quot;-&quot;, 60))&#10;&#9;}&#10;}&#10;&#10;// URL generation functions that use config&#10;func getLoginURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_login.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getStatusURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_getDeviceOlStatus.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getLiveAPIBaseURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_realTimeVedio.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getVehicleInfoURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_queryUserVehicle.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getAlarmURL() string {&#10;&#9;return fmt.Sprintf(&quot;%s/StandardApiAction_vehicleAlarm.action&quot;, config.ServerURL)&#10;}&#10;&#10;func getWebPlayerURL() string {&#10;&#9;return strings.Replace(config.ServerURL, &quot;https://&quot;, &quot;http://&quot;, 1)&#10;}&#10;&#10;// getServerHostname extracts hostname from server URL for streaming services&#10;func getServerHostname() string {&#10;&#9;// Remove protocol prefix (https:// or http://)&#10;&#9;hostname := strings.TrimPrefix(config.ServerURL, &quot;https://&quot;)&#10;&#9;hostname = strings.TrimPrefix(hostname, &quot;http://&quot;)&#10;&#10;&#9;// Remove any path or port if present&#10;&#9;parts := strings.Split(hostname, &quot;/&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;// Remove port if present (for cases like hostname:port)&#10;&#9;parts = strings.Split(hostname, &quot;:&quot;)&#10;&#9;hostname = parts[0]&#10;&#10;&#9;return hostname&#10;}&#10;&#10;func main() {&#10;&#9;// Load configuration&#10;&#9;err := loadConfig()&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Printf(&quot;Error loading config: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;myApp := app.New()&#10;&#9;myWindow := myApp.NewWindow(&quot;CMSV Video Generator Link&quot;)&#10;&#9;myWindow.SetIcon(appIcon())&#10;&#10;&#9;accountEntry := widget.NewEntry()&#10;&#9;accountEntry.SetPlaceHolder(&quot;Enter Account&quot;)&#10;&#9;passwordEntry := widget.NewPasswordEntry()&#10;&#9;passwordEntry.SetPlaceHolder(&quot;Enter Password&quot;)&#10;&#10;&#9;output := widget.NewMultiLineEntry()&#10;&#9;output.SetPlaceHolder(&quot;Results will appear here...&quot;)&#10;&#9;output.SetMinRowsVisible(15)&#10;&#10;&#9;// Create a dropdown for device selection&#10;&#9;deviceSelector := widget.NewSelect([]string{&quot;Login first to see devices&quot;}, func(selected string) {&#10;&#9;&#9;// This will be handled when a device is selected&#10;&#9;})&#10;&#9;deviceSelector.PlaceHolder = &quot;Select Device IDNO&quot;&#10;&#9;deviceSelector.Disable() // Disable until logged in&#10;&#10;&#9;// Create a dropdown for coordinate system selection&#10;&#9;coordSystems := []string{&#10;&#9;&#9;&quot;0 - WGS84 (Default)&quot;,&#10;&#9;&#9;&quot;1 - Google (GJ02)&quot;,&#10;&#9;&#9;&quot;2 - Baidu (BD09)&quot;,&#10;&#9;}&#10;&#9;coordSystemSelector := widget.NewSelect(coordSystems, nil)&#10;&#9;coordSystemSelector.SetSelected(coordSystems[0])&#10;&#10;&#9;var allLinks map[string]map[string]string&#10;&#9;var deviceMap map[string]Device // Map to store device names to their IDs&#10;&#9;var jsessionCache string        // Store the session for reuse&#10;&#10;&#9;loginBtn := widget.NewButton(&quot;Login and Fetch Devices&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for later use&#10;&#10;&#9;&#9;devices, err := getDevices(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Device fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Update the device selector with actual devices&#10;&#9;&#9;deviceOptions := []string{&quot;All Devices&quot;}&#10;&#9;&#9;deviceMap = make(map[string]Device)&#10;&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;deviceName := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;deviceOptions = append(deviceOptions, deviceName)&#10;&#9;&#9;&#9;deviceMap[deviceName] = d&#10;&#9;&#9;}&#10;&#10;&#9;&#9;deviceSelector.Options = deviceOptions&#10;&#9;&#9;deviceSelector.Enable()&#10;&#9;&#9;deviceSelector.SetSelected(&quot;All Devices&quot;)&#10;&#10;&#9;&#9;allLinks = make(map[string]map[string]string)&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d devices\n\n&quot;, len(devices)))&#10;&#9;&#9;for _, d := range devices {&#10;&#9;&#9;&#9;key := fmt.Sprintf(&quot;%s (%s)&quot;, d.VID, d.DID)&#10;&#9;&#9;&#9;links := generateLinks(jsession, d.DID, d.VID, account, password)&#10;&#9;&#9;&#9;allLinks[key] = links&#10;&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, key))&#10;&#9;&#9;&#9;for name, link := range links {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  %s: %s\n&quot;, name, link))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;saveBtn := widget.NewButton(&quot;Save to File&quot;, func() {&#10;&#9;&#9;if allLinks == nil {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Info&quot;, &quot;No data to save yet&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;err := saveToFile(accountEntry.Text, allLinks)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(err, myWindow)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Success&quot;, &quot;File saved successfully&quot;, myWindow)&#10;&#9;&#9;}&#10;&#9;})&#10;&#10;&#9;vehicleInfoBtn := widget.NewButton(&quot;VEHICLE INFORMATION&quot;, func() {&#10;&#9;&#9;account := strings.TrimSpace(accountEntry.Text)&#10;&#9;&#9;password := strings.TrimSpace(passwordEntry.Text)&#10;&#10;&#9;&#9;if account == &quot;&quot; || password == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please enter both account and password&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsession, err := login(account, password)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Login failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jsessionCache = jsession // Cache the jsession for reuse&#10;&#9;&#9;fmt.Printf(&quot;Using jsession: %s\n&quot;, jsession)&#10;&#10;&#9;&#9;vehicleInfo, err := getVehicleInfo(jsession)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;Vehicle info fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#10;&#9;&#9;// Build and display company hierarchy as a clean tree without IDs&#10;&#9;&#9;builder.WriteString(&quot;=== COMPANY HIERARCHY ===\n&quot;)&#10;&#9;&#9;hierarchy := buildCompanyHierarchy(vehicleInfo.Companys)&#10;&#9;&#9;printCompanyTree(&amp;builder, hierarchy, 2, &quot;&quot;)&#10;&#9;&#9;builder.WriteString(&quot;\n&quot;)&#10;&#10;&#9;&#9;// Display vehicle information&#10;&#9;&#9;builder.WriteString(&quot;=== VEHICLE INFORMATION ===\n&quot;)&#10;&#9;&#9;for _, vehicle := range vehicleInfo.Vehicles {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Vehicle: %s (ID: %d)\n&quot;, vehicle.Name, vehicle.ID))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Company: %s\n&quot;, vehicle.PName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Type: %s, Band: %s, Color: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.VehicleType, vehicle.VehicleBand, vehicle.VehicleColor))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Owner: %s\n&quot;, vehicle.OwnerName))&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;  Engine #: %s, Frame #: %s\n&quot;,&#10;&#9;&#9;&#9;&#9;vehicle.EngineNum, vehicle.FrameNum))&#10;&#10;&#9;&#9;&#9;// Display device information for each vehicle&#10;&#9;&#9;&#9;builder.WriteString(&quot;  Devices:\n&quot;)&#10;&#9;&#9;&#9;for _, device := range vehicle.DeviceList {&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;    - %s (%s)\n&quot;, device.ID, device.SIM))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Channels: %d, Channel Name: %s\n&quot;, device.Channels, device.ChanName))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;      Installed: %s\n&quot;, device.InstallTime))&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;alarmBtn := widget.NewButton(&quot;GET DEVICE ALARMS&quot;, func() {&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please login first&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;please select a device&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get the device ID based on selection&#10;&#9;&#9;var deviceID string&#10;&#9;&#9;if selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;} else if device, ok := deviceMap[selectedDevice]; ok {&#10;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Get coordinate system selection&#10;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;}&#10;&#10;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;alarm fetch failed: %v&quot;, err), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;builder.WriteString(&quot;=== DEVICE ALARMS ===\n&quot;)&#10;&#10;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;if alarm.Gps.Lat != 0 &amp;&amp; alarm.Gps.Lng != 0 {&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Location: %.6f, %.6f\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;float64(alarm.Gps.Lat)/1000000.0, float64(alarm.Gps.Lng)/1000000.0))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Mapped Location: %s, %s\n&quot;, alarm.Gps.MLat, alarm.Gps.MLng))&#10;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Speed: %.1f km/h\n&quot;, float64(alarm.Gps.SP)/10.0))&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;status := &quot;Unprocessed&quot;&#10;&#9;&#9;&#9;&#9;if alarm.HD == 1 {&#10;&#9;&#9;&#9;&#9;&#9;status = &quot;Processed&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Status: %s\n&quot;, status))&#10;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Log alarms to file for future reference&#10;&#9;&#9;&#9;var alarmSlice []AlarmResponseAlarm&#10;&#9;&#9;&#9;for _, a := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;alarmSlice = append(alarmSlice, a)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;logAlarmsToFile(alarmSlice)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;output.SetText(builder.String())&#10;&#9;})&#10;&#10;&#9;// Add refresh button to continuously fetch alarms&#10;&#9;var refreshTicker *time.Ticker&#10;&#9;var stopRefresh chan bool&#10;&#9;var refreshBtn *widget.Button&#10;&#9;refreshBtn = widget.NewButton(&quot;AUTO REFRESH ALARMS&quot;, func() {&#10;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;// Stop auto-refresh&#10;&#9;&#9;&#9;stopRefresh &lt;- true&#10;&#9;&#9;&#9;refreshTicker = nil&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;AUTO REFRESH ALARMS&quot;)&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Auto-refresh&quot;, &quot;Auto-refresh stopped&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Start auto-refresh&#10;&#9;&#9;const timeoutSec = 5&#10;&#9;&#9;message := fmt.Sprintf(&quot;Start auto-refreshing alarms every %d seconds?&quot;, timeoutSec)&#10;&#10;&#9;&#9;dialog.ShowConfirm(&quot;Auto-refresh&quot;, message, func(start bool) {&#10;&#9;&#9;&#9;if !start {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Setup channels&#10;&#9;&#9;&#9;refreshTicker = time.NewTicker(time.Duration(timeoutSec) * time.Second)&#10;&#9;&#9;&#9;stopRefresh = make(chan bool)&#10;&#9;&#9;&#9;refreshBtn.SetText(&quot;STOP AUTO REFRESH&quot;)&#10;&#10;&#9;&#9;&#9;// Start refresh goroutine&#10;&#9;&#9;&#9;go func() {&#10;&#9;&#9;&#9;&#9;for {&#10;&#9;&#9;&#9;&#9;&#9;select {&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-refreshTicker.C:&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get device ID based on selection&#10;&#9;&#9;&#9;&#9;&#9;&#9;var deviceID string&#10;&#9;&#9;&#9;&#9;&#9;&#9;if deviceSelector.Selected == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = &quot;&quot; // Empty string means all devices&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if device, ok := deviceMap[deviceSelector.Selected]; ok {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;deviceID = device.DID&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Get coordinate system&#10;&#9;&#9;&#9;&#9;&#9;&#9;toMap := 0 // Default to WGS84&#10;&#9;&#9;&#9;&#9;&#9;&#9;selectedCoordSystem := coordSystemSelector.Selected&#10;&#9;&#9;&#9;&#9;&#9;&#9;if strings.HasPrefix(selectedCoordSystem, &quot;1 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 1 // Google&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else if strings.HasPrefix(selectedCoordSystem, &quot;2 -&quot;) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;toMap = 2 // Baidu&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Fetch alarms&#10;&#9;&#9;&#9;&#9;&#9;&#9;alarmData, err := getDeviceAlarms(jsessionCache, deviceID, toMap)&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;continue // Skip this iteration on error&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Build output&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder := strings.Builder{}&#10;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;=== AUTO REFRESH ALARMS (%s) ===\n&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;time.Now().Format(&quot;15:04:05&quot;)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if len(alarmData.AlarmList) == 0 {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(&quot;No alarms found for this device\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Found %d alarms\n\n&quot;, len(alarmData.AlarmList)))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, alarm := range alarmData.AlarmList {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;// Display alarm details&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Device: %s\n&quot;, alarm.DevIDNO))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Time: %s\n&quot;, alarm.Time))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Type: %d\n&quot;, alarm.Type))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(fmt.Sprintf(&quot;Description: %s\n&quot;, alarm.Desc))&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;builder.WriteString(strings.Repeat(&quot;-&quot;, 60) + &quot;\n&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI thread-safely&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Update UI on main thread&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.SetText(builder.String())&#10;&#9;&#9;&#9;&#9;&#9;&#9;output.Refresh()&#10;&#10;&#9;&#9;&#9;&#9;&#9;case &lt;-stopRefresh:&#10;&#9;&#9;&#9;&#9;&#9;&#9;if refreshTicker != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;refreshTicker.Stop()&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}()&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTSP link generation button&#10;&#9;rtspBtn := widget.NewButton(&quot;Generate RTSP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTSP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTSP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTSP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTSP link&#10;&#9;&#9;&#9;rtspOptions := RTSPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtspLink := GenerateRTSPLink(rtspOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtspLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTSP Link Generated:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewButton(&quot;Copy to Clipboard&quot;, func() {&#10;&#9;&#9;&#9;&#9;&#9;myWindow.Clipboard().SetContent(rtspLink)&#10;&#9;&#9;&#9;&#9;&#9;dialog.ShowInformation(&quot;Copied&quot;, &quot;RTSP link copied to clipboard&quot;, myWindow)&#10;&#9;&#9;&#9;&#9;}),&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTSP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add RTMP link generation button&#10;&#9;rtmpBtn := widget.NewButton(&quot;Generate RTMP Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for RTMP parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure RTMP Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;RTMP Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the RTMP link&#10;&#9;&#9;&#9;rtmpOptions := RTMPLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost: serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort: 6604, // Default port for RTMP&#10;&#9;&#9;&#9;&#9;JSession:   jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:    device.DID,&#10;&#9;&#9;&#9;&#9;Channel:    channelNum,&#10;&#9;&#9;&#9;&#9;Stream:     streamType,&#10;&#9;&#9;&#9;&#9;AVType:     1, // Live video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;rtmpLink := GenerateRTMPLink(rtmpOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(rtmpLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;RTMP URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;RTMP Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Add HLS link generation button&#10;&#9;hlsBtn := widget.NewButton(&quot;Generate HLS Link&quot;, func() {&#10;&#9;&#9;// Ensure we have a valid session and selected device&#10;&#9;&#9;if jsessionCache == &quot;&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please login first&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;selectedDevice := deviceSelector.Selected&#10;&#9;&#9;if selectedDevice == &quot;&quot; || selectedDevice == &quot;All Devices&quot; {&#10;&#9;&#9;&#9;dialog.ShowInformation(&quot;Error&quot;, &quot;Please select a specific device&quot;, myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;device, ok := deviceMap[selectedDevice]&#10;&#9;&#9;if !ok {&#10;&#9;&#9;&#9;dialog.ShowError(fmt.Errorf(&quot;invalid device selection&quot;), myWindow)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Show config dialog for HLS parameters&#10;&#9;&#9;serverEntry := widget.NewEntry()&#10;&#9;&#9;serverEntry.SetText(getServerHostname())&#10;&#10;&#9;&#9;streamOptions := []string{&quot;Main Stream (0)&quot;, &quot;Sub Stream (1)&quot;}&#10;&#9;&#9;streamSelector := widget.NewSelect(streamOptions, nil)&#10;&#9;&#9;streamSelector.SetSelected(streamOptions[1]) // Default to sub stream&#10;&#10;&#9;&#9;channelOptions := []string{&quot;Channel 0&quot;, &quot;Channel 1&quot;, &quot;Channel 2&quot;, &quot;Channel 3&quot;}&#10;&#9;&#9;channelSelector := widget.NewSelect(channelOptions, nil)&#10;&#9;&#9;channelSelector.SetSelected(channelOptions[0]) // Default to channel 0&#10;&#10;&#9;&#9;configContainer := container.NewVBox(&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Configure HLS Stream:&quot;),&#10;&#9;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Server:&quot;),&#10;&#9;&#9;&#9;&#9;serverEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Channel:&quot;),&#10;&#9;&#9;&#9;&#9;channelSelector,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;Stream Type:&quot;),&#10;&#9;&#9;&#9;&#9;streamSelector,&#10;&#9;&#9;&#9;),&#10;&#9;&#9;)&#10;&#10;&#9;&#9;dialog.ShowCustomConfirm(&quot;HLS Configuration&quot;, &quot;Generate&quot;, &quot;Cancel&quot;, configContainer, func(generate bool) {&#10;&#9;&#9;&#9;if !generate {&#10;&#9;&#9;&#9;&#9;return&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse channel number from selection&#10;&#9;&#9;&#9;channelStr := channelSelector.Selected&#10;&#9;&#9;&#9;channelNum := 0 // Default&#10;&#9;&#9;&#9;if len(channelStr) &gt; 0 {&#10;&#9;&#9;&#9;&#9;channelNum, _ = strconv.Atoi(string(channelStr[len(channelStr)-1]))&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Parse stream type from selection&#10;&#9;&#9;&#9;streamStr := streamSelector.Selected&#10;&#9;&#9;&#9;streamType := 1 // Default to sub stream&#10;&#9;&#9;&#9;if strings.Contains(streamStr, &quot;(0)&quot;) {&#10;&#9;&#9;&#9;&#9;streamType = 0 // Main stream&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Generate the HLS link&#10;&#9;&#9;&#9;hlsOptions := HLSLinkOptions{&#10;&#9;&#9;&#9;&#9;ServerHost:  serverEntry.Text,&#10;&#9;&#9;&#9;&#9;ServerPort:  16604, // Default port for HLS&#10;&#9;&#9;&#9;&#9;JSession:    jsessionCache,&#10;&#9;&#9;&#9;&#9;DevIDNO:     device.DID,&#10;&#9;&#9;&#9;&#9;Channel:     channelNum,&#10;&#9;&#9;&#9;&#9;Stream:      streamType,&#10;&#9;&#9;&#9;&#9;RequestType: 1, // Real-time video&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;hlsLink := GenerateHLSLink(hlsOptions)&#10;&#10;&#9;&#9;&#9;// Show the generated link&#10;&#9;&#9;&#9;linkEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;linkEntry.SetText(hlsLink)&#10;&#9;&#9;&#9;linkEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;// Add HTML video player code&#10;&#9;&#9;&#9;htmlCode := fmt.Sprintf(`&lt;video controls preload=&quot;none&quot; width=&quot;352&quot; height=&quot;288&quot; data-setup=&quot;{}&quot;&gt;&#10;    &lt;source src=&quot;%s&quot; type=&quot;application/x-mpegURL&quot;&gt;&#10;&lt;/video&gt;`, hlsLink)&#10;&#10;&#9;&#9;&#9;htmlEntry := widget.NewMultiLineEntry()&#10;&#9;&#9;&#9;htmlEntry.SetText(htmlCode)&#10;&#9;&#9;&#9;htmlEntry.TextStyle = fyne.TextStyle{Monospace: true}&#10;&#10;&#9;&#9;&#9;linkContainer := container.NewVBox(&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HLS URL:&quot;),&#10;&#9;&#9;&#9;&#9;linkEntry,&#10;&#9;&#9;&#9;&#9;widget.NewLabel(&quot;HTML Video Player Code:&quot;),&#10;&#9;&#9;&#9;&#9;htmlEntry,&#10;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;dialog.ShowCustom(&quot;HLS Link&quot;, &quot;Close&quot;, linkContainer, myWindow)&#10;&#9;&#9;}, myWindow)&#10;&#9;})&#10;&#10;&#9;// Create the final UI layout&#10;&#9;// Create the final UI layout&#10;&#9;// Create the final UI layout&#10;&#9;content := container.NewVBox(&#10;&#9;&#9;container.NewGridWithColumns(2,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Account:&quot;),&#10;&#9;&#9;&#9;accountEntry,&#10;&#9;&#9;&#9;widget.NewLabel(&quot;Password:&quot;),&#10;&#9;&#9;&#9;passwordEntry,&#10;&#9;&#9;),&#10;&#9;&#9;loginBtn,&#10;&#9;&#9;deviceSelector,&#10;&#9;&#9;container.NewGridWithColumns(6, // Changed from 5 to 6 columns&#10;&#9;&#9;&#9;vehicleInfoBtn,&#10;&#9;&#9;&#9;alarmBtn,&#10;&#9;&#9;&#9;refreshBtn,&#10;&#9;&#9;&#9;rtspBtn,&#10;&#9;&#9;&#9;hlsBtn,&#10;&#9;&#9;&#9;rtmpBtn, // Added RTMP button&#10;&#9;&#9;),&#10;&#9;&#9;widget.NewLabel(&quot;Coordinate System:&quot;),&#10;&#9;&#9;coordSystemSelector,&#10;&#9;&#9;saveBtn,&#10;&#9;&#9;output,&#10;&#9;)&#10;&#10;&#9;myWindow.SetContent(content)&#10;&#9;myWindow.Resize(fyne.NewSize(800, 600))&#10;&#9;myWindow.ShowAndRun()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>